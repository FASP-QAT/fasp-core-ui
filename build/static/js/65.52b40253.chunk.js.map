{"version":3,"sources":["../node_modules/reactstrap/es/CardFooter.js","api/RealmService.js","api/ProcurementAgentService.js","views/procurementAgent/EditProcurementAgentComponent.js"],"names":["propTypes","tag","tagPropType","className","PropTypes","string","cssModule","object","CardFooter","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","RealmService","json","console","log","axios","post","API_URL","get","put","ProcurementAgentService","validationSchema","values","Yup","shape","procurementAgentCode","required","procurementAgentName","submittedToApprovedLeadTime","getErrorsFromValidationError","validationError","inner","reduce","errors","error","path","EditProcurementAgentComponent","state","realms","procurementAgent","location","message","cancelClicked","bind","dataChange","Capitalize","str","charAt","toUpperCase","slice","event","this","target","name","realm","realmId","value","label","label_en","active","id","setState","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","getValidationSchema","sm","md","style","flexBasis","initialValues","validate","validateSync","abortEarly","onSubmit","setSubmitting","setErrors","AuthenticationService","setupAxiosInterceptors","updateProcurementAgent","then","response","data","status","history","push","catch","render","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","noValidate","htmlFor","type","bsSize","readOnly","for","valid","invalid","onChange","e","onBlur","maxLength","min","check","inline","checked","color","onClick","touchAll","Component"],"mappings":"iMAAA,gFAMIA,EAAY,CACdC,IAAKC,IACLC,UAAWC,IAAUC,OACrBC,UAAWF,IAAUG,QAMnBC,EAAa,SAAoBC,GACnC,IAAIN,EAAYM,EAAMN,UAClBG,EAAYG,EAAMH,UAClBI,EAAMD,EAAMR,IACZU,EAAaC,YAA8BH,EAAO,CAAC,YAAa,YAAa,QAE7EI,EAAUC,YAAgBC,IAAWZ,EAAW,eAAgBG,GACpE,OAAOU,IAAMC,cAAcP,EAAKQ,YAAS,GAAIP,EAAY,CACvDR,UAAWU,MAIfL,EAAWR,UAAYA,EACvBQ,EAAWW,aAjBQ,CACjBlB,IAAK,OAiBQO,O,kFC1BTY,E,iGAEOC,GAEL,OADAC,QAAQC,IAAIF,GACLG,IAAMC,KAAN,UAAcC,IAAd,eAAoCL,EAAM,M,wCAKjD,OAAOG,IAAMG,IAAN,UAAaD,IAAb,eAAmC,M,kCAIlCL,GACR,OAAOG,IAAMI,IAAN,UAAaF,IAAb,eAAmCL,EAAM,Q,KAMzC,QAAID,G,kFCpBbS,E,4GAEkBR,GAEhB,OAAOG,IAAMC,KAAN,UAAcC,IAAd,0BAA+CL,EAAM,M,mDAK5D,OAAOG,IAAMG,IAAN,UAAaD,IAAb,0BAA8C,M,6CAGlCL,GACnB,OAAOG,IAAMI,IAAN,UAAaF,IAAb,0BAA8CL,EAAM,Q,KAMpD,QAAIQ,G,oSCNbC,EAAmB,SAAUC,GAC/B,OAAOC,WAAaC,MAAM,CACtBC,qBAAsBF,WACjBG,SAAS,qBACdC,qBAAsBJ,WACjBG,SAAS,qBACdE,4BAA6BL,WACxBG,SAAS,mDAgBhBG,EAA+B,SAACC,GAElC,OAAOA,EAAgBC,MAAMC,QAAO,SAACC,EAAQC,GACzC,OAAO,eACAD,EADP,eAEKC,EAAMC,KAAOD,EAAMD,OAJR,OAMjB,KAEDG,E,YACF,WAAYpC,GAAQ,IAAD,8BACf,4CAAMA,KACDqC,MAAQ,CACTC,OAAQ,GACRC,iBAAkB,EAAKvC,MAAMwC,SAASH,MAAME,iBAC5CE,QAAS,IAEb,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,WAAa,EAAKA,WAAWF,KAAhB,gBATH,E,wEAYRG,GAEP,OADAjC,QAAQC,IAAI,cACD,MAAPgC,GAAsB,IAAPA,EACRA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,GAExC,K,iCAKJC,GAAQ,IACTX,EAAqBY,KAAKd,MAA1BE,iBACmB,WAArBW,EAAME,OAAOC,OACbd,EAAiBe,MAAMC,QAAUL,EAAME,OAAOI,OAEzB,wBAArBN,EAAME,OAAOC,OACbd,EAAiBd,qBAAuByB,EAAME,OAAOI,OAEhC,wBAArBN,EAAME,OAAOC,OACbd,EAAiBkB,MAAMC,SAAWR,EAAME,OAAOI,OAE1B,+BAArBN,EAAME,OAAOC,OACbd,EAAiBX,4BAA8BsB,EAAME,OAAOI,OAEvC,UAArBN,EAAME,OAAOC,OACbd,EAAiBoB,OAA6B,YAApBT,EAAME,OAAOQ,IAI3CT,KAAKU,SAAS,CACVtB,qBAEA,iB,+BAGCuB,EAAY7B,GACjB6B,EAAW,CACPrC,sBAAsB,EACtBE,sBAAsB,EACtBC,6BAA6B,IAGjCuB,KAAKY,aAAa9B,K,mCAETA,GACTkB,KAAKa,eAAe,wBAAwB,SAACC,GACzC,OAAOC,QAAQjC,EAAOgC,S,qCAGfE,EAAUC,GAErB,IADA,IAAMC,EAAOC,SAASC,MAAMJ,GACnBK,EAAI,EAAGA,EAAIH,EAAKI,OAAQD,IAC7B,GAAIJ,EAASC,EAAKG,GAAGnB,MAAO,CACxBgB,EAAKG,GAAGE,QACR,S,+BAKF,IA7FIC,EA6FL,OACL,OACI,yBAAKjF,UAAU,mBACX,4BAAKyD,KAAKd,MAAMI,SAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKmC,GAAI,GAAIC,GAAI,EAAGC,MAAO,CAAEC,UAAW,SACpC,kBAAC,IAAD,KAEI,kBAAC,IAAD,KACI,uBAAGrF,UAAU,cAAgB,0DAAwC,KAEzE,kBAAC,IAAD,CACIsF,cACI,CACIvD,qBAAsB0B,KAAKd,MAAME,iBAAiBd,qBAClDE,qBAAsBwB,KAAKd,MAAME,iBAAiBkB,MAAMC,SACxD9B,4BAA6BuB,KAAKd,MAAME,iBAAiBX,6BAEjEqD,UA/GdN,EA+GiCtD,EA9GxC,SAACC,GACJ,IAAMD,EAAmBsD,EAAoBrD,GAC7C,IAEI,OADAD,EAAiB6D,aAAa5D,EAAQ,CAAE6D,YAAY,IAC7C,GACT,MAAOjD,GACL,OAAOL,EAA6BK,MAyGhBkD,SAAU,SAAC9D,EAAD,GAA0C,EAA/B+D,cAA+B,EAAhBC,UAChCzE,QAAQC,IAAI,iCAAkC,EAAKuB,MAAME,kBACzDgD,IAAsBC,yBACtBpE,IAAwBqE,uBAAuB,EAAKpD,MAAME,kBACrDmD,MAAK,SAAAC,GAC0B,WAAxBA,EAASC,KAAKC,OACd,EAAK7F,MAAM8F,QAAQC,KAAnB,iDAAkEJ,EAASC,KAAKnD,UAEhF,EAAKoB,SAAS,CACVpB,QAASkD,EAASC,KAAKnD,aAIlCuD,OACG,SAAA9D,GACI,OAAQA,EAAMO,SACV,IAAK,gBACD,EAAKoB,SAAS,CACVpB,QAASP,EAAMO,UAEnB,MACJ,QACI,EAAKoB,SAAS,CACVpB,QAASP,EAAMyD,SAASC,KAAKnD,eAOzDwD,OACI,cACI3E,OADJ,IAEIW,EAFJ,EAEIA,OACAiE,EAHJ,EAGIA,QACAC,EAJJ,EAIIA,aACAC,EALJ,EAKIA,WACAC,EANJ,EAMIA,aAGAvC,GATJ,EAOIwC,aAPJ,EAQIC,QARJ,EASIzC,YATJ,OAWQ,kBAAC,IAAD,CAAMsB,SAAUiB,EAAcG,YAAU,EAACnD,KAAK,wBAC1C,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoD,QAAQ,WAAf,SACA,kBAAC,IAAD,CACIC,KAAK,OACLrD,KAAK,UACLO,GAAG,UACH+C,OAAO,KACPC,UAAU,EACVpD,MAAO,EAAKnB,MAAME,iBAAiBe,MAAMG,MAAMC,YAIvD,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOmD,IAAI,wBAAX,0BACA,kBAAC,IAAD,CAAOH,KAAK,OACRrD,KAAK,uBACLO,GAAG,uBACHkD,OAAQ7E,EAAOR,qBACfsF,QAASb,EAAQzE,wBAA0BQ,EAAOR,qBAClDuF,SAAU,SAACC,GAAQd,EAAac,GAAI,EAAKrE,WAAWqE,IACpDC,OAAQd,EACR1E,UAAQ,EACRyF,UAAW,EACX3D,MAAO,EAAKX,WAAW,EAAKR,MAAME,iBAAiBd,wBAEvD,kBAAC,IAAD,KAAeQ,EAAOR,uBAE1B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoF,IAAI,wBAAX,0BACA,kBAAC,IAAD,CAAOH,KAAK,OACRrD,KAAK,uBACLO,GAAG,uBACHkD,OAAQ7E,EAAON,qBACfoF,QAASb,EAAQvE,wBAA0BM,EAAON,qBAClDqF,SAAU,SAACC,GAAQd,EAAac,GAAI,EAAKrE,WAAWqE,IACpDC,OAAQd,EACR1E,UAAQ,EACR8B,MAAO,EAAKX,WAAW,EAAKR,MAAME,iBAAiBkB,MAAMC,YAE7D,kBAAC,IAAD,KAAezB,EAAON,uBAE1B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOkF,IAAI,+BAAX,mCACA,kBAAC,IAAD,CAAOH,KAAK,SACRrD,KAAK,8BACLO,GAAG,8BACHkD,OAAQ7E,EAAOL,4BACfmF,QAASb,EAAQtE,+BAAiCK,EAAOL,4BACzDoF,SAAU,SAACC,GAAQd,EAAac,GAAI,EAAKrE,WAAWqE,IACpDC,OAAQd,EACR1E,UAAQ,EACR0F,IAAK,EACL5D,MAAO,EAAKnB,MAAME,iBAAiBX,8BAEvC,kBAAC,IAAD,KAAeK,EAAOL,8BAE1B,kBAAC,IAAD,KACI,kBAAC,IAAD,iBACA,kBAAC,IAAD,CAAWyF,OAAK,EAACC,QAAM,GACnB,kBAAC,IAAD,CACI5H,UAAU,mBACVgH,KAAK,QACL9C,GAAG,UACHP,KAAK,SACLG,OAAO,EACP+D,SAAgD,IAAvC,EAAKlF,MAAME,iBAAiBoB,OACrCqD,SAAU,SAACC,GAAQd,EAAac,GAAI,EAAKrE,WAAWqE,MAExD,kBAAC,IAAD,CACIvH,UAAU,mBACV2H,OAAK,EAACZ,QAAQ,iBAFlB,WAMJ,kBAAC,IAAD,CAAWY,OAAK,EAACC,QAAM,GACnB,kBAAC,IAAD,CACI5H,UAAU,mBACVgH,KAAK,QACL9C,GAAG,UACHP,KAAK,SACLG,OAAO,EACP+D,SAAgD,IAAvC,EAAKlF,MAAME,iBAAiBoB,OACrCqD,SAAU,SAACC,GAAQd,EAAac,GAAI,EAAKrE,WAAWqE,MAExD,kBAAC,IAAD,CACIvH,UAAU,mBACV2H,OAAK,EAACZ,QAAQ,iBAFlB,eAQZ,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAQC,KAAK,SAASc,MAAM,UAAU9H,UAAU,OAAO+H,QAAS,kBAAM,EAAKC,SAAS5D,EAAY7B,KAAhG,UACA,kBAAC,IAAD,CAAQyE,KAAK,QAAQc,MAAM,SAAS9H,UAAU,OAAO+H,QAAS,EAAK/E,eAAnE,sB,sCAchDS,KAAKnD,MAAM8F,QAAQC,KAAK,8D,GApPY4B,aAwP7BvF","file":"static/js/65.52b40253.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardFooter = function CardFooter(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-footer'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardFooter.propTypes = propTypes;\nCardFooter.defaultProps = defaultProps;\nexport default CardFooter;","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass RealmService {\n\n    addRealm(json) {\n        console.log(json);\n        return axios.post(`${API_URL}/api/realm/`, json, {}\n        );\n    }\n\n    getRealmListAll() {\n        return axios.get(`${API_URL}/api/realm/`, {\n        });\n    } \n\n    updateRealm(json) {\n        return axios.put(`${API_URL}/api/realm/`, json, {\n        });\n    }\n\n\n}\nexport default new RealmService();","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass ProcurementAgentService {\n\n    addProcurementAgent(json) {\n        //console.log(json);\n        return axios.post(`${API_URL}/api/procurementAgent/`, json, {}\n        );\n    }\n\n    getProcurementAgentListAll() {\n        return axios.get(`${API_URL}/api/procurementAgent/`, {\n        });\n    }\n    updateProcurementAgent(json) {\n        return axios.put(`${API_URL}/api/procurementAgent/`, json, {\n        });\n    }\n\n}\n\nexport default new ProcurementAgentService();\n","import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\n\nimport RealmService from \"../../api/RealmService\";\nimport ProcurementAgentService from \"../../api/ProcurementAgentService\";\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nconst initialValues = {\n    procurementAgentCode: \"\",\n    procurementAgentName: \"\",\n    submittedToApprovedLeadTime: \"\"\n}\n\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        procurementAgentCode: Yup.string()\n            .required('Please enter code'),\n        procurementAgentName: Yup.string()\n            .required('Please enter name'),\n        submittedToApprovedLeadTime: Yup.string()\n            .required('Please enter submitted to approved lead time')\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\nclass EditProcurementAgentComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            realms: [],\n            procurementAgent: this.props.location.state.procurementAgent,\n            message: ''\n        }\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        this.Capitalize = this.Capitalize.bind(this);\n    }\n\n    Capitalize(str) {\n        console.log(\"capitalize\");\n        if (str != null && str != \"\") {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        } else {\n            return \"\";\n        }\n    }\n\n\n    dataChange(event) {\n        let { procurementAgent } = this.state;\n        if (event.target.name == \"realmId\") {\n            procurementAgent.realm.realmId = event.target.value;\n        }\n        if (event.target.name == \"procurementAgentCode\") {\n            procurementAgent.procurementAgentCode = event.target.value;\n        }\n        if (event.target.name == \"procurementAgentName\") {\n            procurementAgent.label.label_en = event.target.value;\n        }\n        if (event.target.name == \"submittedToApprovedLeadTime\") {\n            procurementAgent.submittedToApprovedLeadTime = event.target.value;\n        }\n        if (event.target.name == \"active\") {\n            procurementAgent.active = event.target.id === \"active2\" ? false : true;\n        }\n\n\n        this.setState({\n            procurementAgent\n        },\n            () => { });\n    };\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            procurementAgentCode: true,\n            procurementAgentName: true,\n            submittedToApprovedLeadTime: true\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('procurementAgentForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"animated fadeIn\">\n                <h5>{this.state.message}</h5>\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>Edit Procurement Agent</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                initialValues={\n                                    {\n                                        procurementAgentCode: this.state.procurementAgent.procurementAgentCode,\n                                        procurementAgentName: this.state.procurementAgent.label.label_en,\n                                        submittedToApprovedLeadTime: this.state.procurementAgent.submittedToApprovedLeadTime\n                                    }}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {\n                                    console.log(\"this.state.procurementAgent---\", this.state.procurementAgent);\n                                    AuthenticationService.setupAxiosInterceptors();\n                                    ProcurementAgentService.updateProcurementAgent(this.state.procurementAgent)\n                                        .then(response => {\n                                            if (response.data.status == \"Success\") {\n                                                this.props.history.push(`/procurementAgent/listProcurementAgent/${response.data.message}`)\n                                            } else {\n                                                this.setState({\n                                                    message: response.data.message\n                                                })\n                                            }\n                                        })\n                                        .catch(\n                                            error => {\n                                                switch (error.message) {\n                                                    case \"Network Error\":\n                                                        this.setState({\n                                                            message: error.message\n                                                        })\n                                                        break\n                                                    default:\n                                                        this.setState({\n                                                            message: error.response.data.message\n                                                        })\n                                                        break\n                                                }\n                                            }\n                                        );\n                                }}\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='procurementAgentForm'>\n                                                <CardBody>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"realmId\">Realm</Label>\n                                                        <Input\n                                                            type=\"text\"\n                                                            name=\"realmId\"\n                                                            id=\"realmId\"\n                                                            bsSize=\"lg\"\n                                                            readOnly={true}\n                                                            value={this.state.procurementAgent.realm.label.label_en}\n                                                        >\n                                                        </Input>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"procurementAgentCode\">Procurement Agent Code</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"procurementAgentCode\"\n                                                            id=\"procurementAgentCode\"\n                                                            valid={!errors.procurementAgentCode}\n                                                            invalid={touched.procurementAgentCode && !!errors.procurementAgentCode}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            maxLength={6}\n                                                            value={this.Capitalize(this.state.procurementAgent.procurementAgentCode)}\n                                                        />\n                                                        <FormFeedback>{errors.procurementAgentCode}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"procurementAgentName\">Procurement Agent Name</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"procurementAgentName\"\n                                                            id=\"procurementAgentName\"\n                                                            valid={!errors.procurementAgentName}\n                                                            invalid={touched.procurementAgentName && !!errors.procurementAgentName}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            value={this.Capitalize(this.state.procurementAgent.label.label_en)}\n                                                        />\n                                                        <FormFeedback>{errors.procurementAgentName}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"submittedToApprovedLeadTime\">Submitted To Approved Lead Time</Label>\n                                                        <Input type=\"number\"\n                                                            name=\"submittedToApprovedLeadTime\"\n                                                            id=\"submittedToApprovedLeadTime\"\n                                                            valid={!errors.submittedToApprovedLeadTime}\n                                                            invalid={touched.submittedToApprovedLeadTime && !!errors.submittedToApprovedLeadTime}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            min={1}\n                                                            value={this.state.procurementAgent.submittedToApprovedLeadTime}\n                                                        />\n                                                        <FormFeedback>{errors.submittedToApprovedLeadTime}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label>Status  </Label>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active1\"\n                                                                name=\"active\"\n                                                                value={true}\n                                                                checked={this.state.procurementAgent.active === true}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-radio1\">\n                                                                Active\n                                                                </Label>\n                                                        </FormGroup>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active2\"\n                                                                name=\"active\"\n                                                                value={false}\n                                                                checked={this.state.procurementAgent.active === false}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-radio2\">\n                                                                Disabled\n                                                                </Label>\n                                                        </FormGroup>\n                                                    </FormGroup>\n                                                </CardBody>\n                                                <CardFooter>\n                                                    <FormGroup>\n                                                        <Button type=\"submit\" color=\"success\" className=\"mr-1\" onClick={() => this.touchAll(setTouched, errors)}>Update</Button>\n                                                        <Button type=\"reset\" color=\"danger\" className=\"mr-1\" onClick={this.cancelClicked}>Cancel</Button>\n                                                    </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n\n                                        )} />\n\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n    cancelClicked() {\n        this.props.history.push(`/procurementAgent/listProcurementAgent/` + \"Action Canceled\")\n    }\n}\n\nexport default EditProcurementAgentComponent;\n"],"sourceRoot":""}