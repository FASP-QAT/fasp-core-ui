{"version":3,"sources":["api/HealthAreaService.js","Constants.js","api/CountryService.js","views/HealthArea/AddHealthArea.js","views/Forms/AdvancedForms/data/states.js"],"names":["axios","get","API_URL","json","put","realmId","initialValues","countryId","healthAreaName","validationSchema","values","Yup","shape","required","getErrorsFromValidationError","validationError","inner","reduce","errors","error","path","onSubmit","setSubmitting","setErrors","console","log","setTimeout","alert","JSON","stringify","AddHealthArea","props","state","countries","realms","healthArea","label","realm","realmCountryArray","selCountries","message","submitClicked","bind","cancelClicked","handleChange","getCountryListByRealmId","event","target","name","value","setTouched","this","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","CountryService","getRealmCountryList","then","response","data","setState","catch","HealthAreaService","getRealmList","getValidationSchema","realmList","map","item","key","label_en","realmCountryId","country","className","Row","Col","sm","md","style","flexBasis","Card","CardHeader","CardBody","validate","validateSync","abortEarly","render","touched","handleBlur","handleSubmit","isValid","isSubmitting","Form","noValidate","FormGroup","Label","htmlFor","Input","type","id","bsSize","valid","invalid","onChange","onBlur","FormFeedback","multiple","for","Button","color","onClick","touchAll","disabled","CardFooter","filter","c","history","push","Component","exports","AU","US"],"mappings":"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","file":"static/js/69.1cc78408.chunk.js","sourcesContent":["import axios from \"axios\";\nclass HealthAreaService {\n    getRealmList() {\n        return axios.get(`http://localhost:8080/FASP/api/getRealmList`, {\n        });\n    }\n}\nexport default new HealthAreaService()","// export const API_URL='https://fasp.altius.cc/FASP'\n// export const API_URL='http://localhost:8080/FASP'\n//export const API_URL = 'http://localhost:8081'\n// export const API_URL = 'http://server6.altius.cc:8080/FASP'\n\nexport const API_URL='http://localhost:8080/FASP'\n// export const API_URL='http://192.168.43.70:8080/FASP'\nexport const SECRET_KEY = 'afhghggrehreqiuhrjhjdbfjehgfuoerhfjhfyguayaegrf'\n","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass CountryService {\n\n    addCountry(json) {\n        return axios.put(`${API_URL}/api/addCountry/`, json, {}\n        );\n    }\n\n    getCountryListAll() {\n        return axios.get(`${API_URL}/api/getCountryListAll/`, {\n        });\n    }\n    getCountryListActive() {\n        return axios.get(`${API_URL}/api/getCountryListActive/`, {\n        });\n    }\n\n    editCountry(json) {\n        return axios.put(`${API_URL}/api/editCountry/`, json, {}\n        );\n    }\n\n    getRealmCountryList() {\n        return axios.get(`${API_URL}/api/getRealmCountryList/`, {\n        });\n    }\n    getRealmCountryListByRealmId(realmId) {\n        return axios.get(`${API_URL}/api/getRealmCountryListByRealmId/${realmId}`, {\n        });\n    }\n\n}\nexport default new CountryService();","import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\n// React select\nimport states from '../Forms/AdvancedForms/data/states';\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.min.css';\n\nimport HealthAreaService from \"../../api/HealthAreaService\";\nimport CountryService from \"../../api/CountryService\";\n\nconst initialValues = {\n  realmId: [],\n  countryId: [],\n  healthAreaName: \"\"\n}\n\nconst validationSchema = function (values) {\n  return Yup.object().shape({\n    realmId: Yup.string()\n      .required('Please select realm.'),\n    countryId: Yup.string()\n      .required('Please select country'),\n    healthAreaName: Yup.string()\n      .required('Please enter health area')\n  })\n}\n\nconst validate = (getValidationSchema) => {\n  return (values) => {\n    const validationSchema = getValidationSchema(values)\n    try {\n      validationSchema.validateSync(values, { abortEarly: false })\n      return {}\n    } catch (error) {\n      return getErrorsFromValidationError(error)\n    }\n  }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n  const FIRST_ERROR = 0\n  return validationError.inner.reduce((errors, error) => {\n    return {\n      ...errors,\n      [error.path]: error.errors[FIRST_ERROR],\n    }\n  }, {})\n}\n\nconst onSubmit = (values, { setSubmitting, setErrors }) => {\n  console.log(\"submit called---\", values);\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2))\n    // console.log('User has been successfully saved!', values)\n    setSubmitting(false)\n  }, 2000)\n}\n\nclass AddHealthArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: [],\n      realms: [],\n      healthArea: {\n        label: {\n\n        },\n        realm: {\n\n        },\n        realmCountryArray: {\n\n        }\n      },\n      selCountries: [],\n      message: ''\n    }\n    this.submitClicked = this.submitClicked.bind(this);\n    this.cancelClicked = this.cancelClicked.bind(this);\n    // this.dataChange = this.dataChange.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.getCountryListByRealmId = this.getCountryListByRealmId.bind(this);\n  }\n  // handleChange(values) {\n  //   console.log(\"handle change called===\" , values);\n  // }\n  handleChange(event) {\n    // let { healthArea } = this.state.healthArea\n    console.log(\"handle change called===\", event.target.name);\n    console.log(\"handle change called===\", event.target.value);\n    // if (event.target.name === \"realmId\") {\n    //   realmId = event.target.value\n    // }\n    // this.setState({\n    //   healthArea\n    // }, (\n    // ) => {\n    //   console.log(\"state after update---\", this.state.healthArea)\n    // })\n    //   console.log(\"length---\"+event.target.options.length);\n    //   for (let i = 0, len = event.target.options.length; i < len; i++) {\n    //     // opt = event.target.options[i];\n\n    //     if (event.target.options[i].selected) {\n    //         console.log(\"value----\",event.target.options[i].value);\n    //     }\n    // }\n    // const { name, value } = event.target;\n    // this.setState({\n    //   [name]: value,\n    // });\n    console.log(\"handle change works\");\n  };\n\n  touchAll(setTouched, errors) {\n    setTouched({\n      'realmId': true,\n      countryId: true,\n      healthAreaName: true\n    }\n    )\n    this.validateForm(errors)\n  }\n  validateForm(errors) {\n    this.findFirstError('simpleForm', (fieldName) => {\n      return Boolean(errors[fieldName])\n    })\n  }\n  findFirstError(formName, hasError) {\n    const form = document.forms[formName]\n    for (let i = 0; i < form.length; i++) {\n      if (hasError(form[i].name)) {\n        form[i].focus()\n        break\n      }\n    }\n  }\n\n  componentDidMount() {\n    CountryService.getRealmCountryList()\n      .then(response => {\n        console.log(\"country list---\", response.data);\n        this.setState({\n          countries: response.data\n        })\n      }).catch(\n        error => {\n          switch (error.message) {\n            case \"Network Error\":\n              this.setState({\n                message: error.message\n              })\n              break\n            default:\n              this.setState({\n                message: error.response.data.message\n              })\n              break\n          }\n        }\n      );\n    HealthAreaService.getRealmList()\n      .then(response => {\n        console.log(\"realm list---\", response.data);\n        this.setState({\n          realms: response.data\n        })\n      }).catch(\n        error => {\n          switch (error.message) {\n            case \"Network Error\":\n              this.setState({\n                message: error.message\n              })\n              break\n            default:\n              this.setState({\n                message: error.response.data.message\n              })\n              break\n          }\n        }\n      );\n  }\n\n  render() {\n    const { selCountries } = this.state;\n    const { realms } = this.state;\n\n    let realmList = realms.length > 0\n      && realms.map((item, i) => {\n        return (\n          <option key={i} value={item.realmId}>\n            {item.label.label_en}\n          </option>\n        )\n      }, this);\n\n    let countryList = selCountries.length > 0\n      && selCountries.map((item, i) => {\n        return (\n          <option key={i} value={item.realmCountryId}>\n            {item.country.label.label_en}\n          </option>\n        )\n      }, this);\n    return (\n      <div className=\"animated fadeIn\">\n        <Row>\n          <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n            <Card>\n              <CardHeader>\n                <i className=\"icon-note\"></i><strong>Add Health Area</strong>{' '}\n              </CardHeader>\n              <CardBody>\n                <Formik\n                  initialValues={initialValues}\n                  validate={validate(validationSchema)}\n                  onSubmit={onSubmit}\n                  render={\n                    ({\n                      values,\n                      errors,\n                      touched,\n                      handleChange,\n                      handleBlur,\n                      handleSubmit,\n                      isSubmitting,\n                      isValid,\n                      setTouched\n                    }) => (\n                        <Form onSubmit={handleSubmit} noValidate name='simpleForm'>\n                          <FormGroup>\n                            <Label htmlFor=\"realmId\">Realm</Label>\n                            <Input\n                              type=\"select\"\n                              name=\"realmId\"\n                              id=\"realmId\"\n                              bsSize=\"lg\"\n                              valid={!errors.realmId}\n                              invalid={touched.realmId && !!errors.realmId}\n                              onChange={this.handleChange}\n                              onBlur={handleBlur}\n                              required\n                              value={this.state.realmId}\n                            >\n                              <option value=\"0\">Please select</option>\n                              {realmList}\n                            </Input>\n                            <FormFeedback>{errors.realmId}</FormFeedback>\n                          </FormGroup>\n                          <FormGroup>\n                            <Label>Country</Label>\n                            <Select\n                              name=\"countryId\"\n                              id=\"countryId\"\n                              bsSize=\"lg\"\n                              valid={!errors.countryId}\n                              invalid={touched.countryId && !!errors.countryId}\n                              onChange={this.handleChange}\n                              onBlur={handleBlur}\n                              required\n                              multiple\n                            />\n                              {/* <option value=\"0\">Please select</option>\n                              {realmList} */}\n                            {/* </Input> */}\n                            <FormFeedback>{errors.countryId}</FormFeedback>\n                          </FormGroup>\n                          <FormGroup>\n                            <Label for=\"healthArea\">Health Area</Label>\n                            <Input type=\"text\"\n                              name=\"healthAreaName\"\n                              id=\"healthAreaName\"\n                              valid={!errors.healthAreaName}\n                              invalid={touched.healthAreaName && !!errors.healthAreaName}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required />\n                            <FormFeedback>{errors.healthAreaName}</FormFeedback>\n                          </FormGroup>\n\n                          <FormGroup>\n                            {/* <Button type=\"submit\" color=\"primary\" className=\"mr-1\" disabled={isSubmitting || !isValid}>{isSubmitting ? 'Wait...' : 'Submit'}</Button> */}\n                            <Button type=\"submit\" color=\"success\" className=\"mr-1\" onClick={() => this.touchAll(setTouched, errors)} disabled={!isValid}>Submit</Button>\n                            <Button type=\"reset\" color=\"danger\" className=\"mr-1\">Cancel</Button>\n                          </FormGroup>\n                        </Form>\n                      )} />\n              </CardBody>\n              <CardFooter>\n                {/* <Button type=\"submit\" size=\"md\" color=\"primary\"><i className=\"fa fa-dot-circle-o\"></i> Submit</Button> */}\n                {/* <Button type=\"reset\" size=\"md\" color=\"danger\"><i className=\"fa fa-ban\"></i> Cancel</Button> */}\n              </CardFooter>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n  getCountryListByRealmId(event) {\n    let realmId = event.target.value;\n    const selCountries = this.state.countries.filter(c => c.realm.realmId == realmId)\n    this.setState({\n      selCountries: selCountries\n    });\n  }\n  submitClicked() {\n    // if (navigator.onLine) {\n    //   if (AuthenticationService.checkTypeOfSession()) {\n    //     if ($(\"#healthAreaForm\").valid()) {\n    //       HealthAreaService.addHealthArea(this.state.healthArea)\n    //         .then(response => {\n    //           if (response.data.message != \"Failed\") {\n    //             this.props.history.push(`/healthAreaList/${response.data.message}`)\n    //           } else {\n    //             this.setState({\n    //               message: response.data.message\n    //             })\n    //           }\n    //         })\n    //         .catch(\n    //           error => {\n    //             switch (error.message) {\n    //               case \"Network Error\":\n    //                 this.setState({\n    //                   message: error.message\n    //                 })\n    //                 break\n    //               default:\n    //                 this.setState({\n    //                   message: error.response.data.message\n    //                 })\n    //                 break\n    //             }\n    //           }\n    //         );\n    //     }\n    //   } else {\n    //     alert(\"You can't change your session from online to offline or vice versa.\");\n    //   }\n    // } else {\n    //   alert(\"You must be Online.\")\n    // }\n  }\n  cancelClicked() {\n    this.props.history.push(`/healthAreaList/` + \"Action Canceled\")\n  }\n}\n\nexport default AddHealthArea;\n","exports.AU = [\n\t{ value: 'australian-capital-territory', label: 'Australian Capital Territory', className: 'State-ACT' },\n\t{ value: 'new-south-wales', label: 'New South Wales', className: 'State-NSW' },\n\t{ value: 'victoria', label: 'Victoria', className: 'State-Vic' },\n\t{ value: 'queensland', label: 'Queensland', className: 'State-Qld' },\n\t{ value: 'western-australia', label: 'Western Australia', className: 'State-WA' },\n\t{ value: 'south-australia', label: 'South Australia', className: 'State-SA' },\n\t{ value: 'tasmania', label: 'Tasmania', className: 'State-Tas' },\n\t{ value: 'northern-territory', label: 'Northern Territory', className: 'State-NT' },\n];\n\nexports.US = [\n    { value: 'AL', label: 'Alabama', disabled: true },\n    { value: 'AK', label: 'Alaska' },\n    { value: 'AS', label: 'American Samoa' },\n    { value: 'AZ', label: 'Arizona' },\n    { value: 'AR', label: 'Arkansas' },\n    { value: 'CA', label: 'California' },\n    { value: 'CO', label: 'Colorado' },\n    { value: 'CT', label: 'Connecticut' },\n    { value: 'DE', label: 'Delaware' },\n    { value: 'DC', label: 'District Of Columbia' },\n    { value: 'FM', label: 'Federated States Of Micronesia' },\n    { value: 'FL', label: 'Florida' },\n    { value: 'GA', label: 'Georgia' },\n    { value: 'GU', label: 'Guam' },\n    { value: 'HI', label: 'Hawaii' },\n    { value: 'ID', label: 'Idaho' },\n    { value: 'IL', label: 'Illinois' },\n    { value: 'IN', label: 'Indiana' },\n    { value: 'IA', label: 'Iowa' },\n    { value: 'KS', label: 'Kansas' },\n    { value: 'KY', label: 'Kentucky' },\n    { value: 'LA', label: 'Louisiana' },\n    { value: 'ME', label: 'Maine' },\n    { value: 'MH', label: 'Marshall Islands' },\n    { value: 'MD', label: 'Maryland' },\n    { value: 'MA', label: 'Massachusetts' },\n    { value: 'MI', label: 'Michigan' },\n    { value: 'MN', label: 'Minnesota' },\n    { value: 'MS', label: 'Mississippi' },\n    { value: 'MO', label: 'Missouri' },\n    { value: 'MT', label: 'Montana' },\n    { value: 'NE', label: 'Nebraska' },\n    { value: 'NV', label: 'Nevada' },\n    { value: 'NH', label: 'New Hampshire' },\n    { value: 'NJ', label: 'New Jersey' },\n    { value: 'NM', label: 'New Mexico' },\n    { value: 'NY', label: 'New York' },\n    { value: 'NC', label: 'North Carolina' },\n    { value: 'ND', label: 'North Dakota' },\n    { value: 'MP', label: 'Northern Mariana Islands' },\n    { value: 'OH', label: 'Ohio' },\n    { value: 'OK', label: 'Oklahoma' },\n    { value: 'OR', label: 'Oregon' },\n    { value: 'PW', label: 'Palau' },\n    { value: 'PA', label: 'Pennsylvania' },\n    { value: 'PR', label: 'Puerto Rico' },\n    { value: 'RI', label: 'Rhode Island' },\n    { value: 'SC', label: 'South Carolina' },\n    { value: 'SD', label: 'South Dakota' },\n    { value: 'TN', label: 'Tennessee' },\n    { value: 'TX', label: 'Texas' },\n    { value: 'UT', label: 'Utah' },\n    { value: 'VT', label: 'Vermont' },\n    { value: 'VI', label: 'Virgin Islands' },\n    { value: 'VA', label: 'Virginia' },\n    { value: 'WA', label: 'Washington' },\n    { value: 'WV', label: 'West Virginia' },\n    { value: 'WI', label: 'Wisconsin' },\n    { value: 'WY', label: 'Wyoming' },\n];\n"],"sourceRoot":""}