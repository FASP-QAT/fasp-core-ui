{"version":3,"sources":["../node_modules/reactstrap/es/CardFooter.js","api/RealmService.js","api/ManufacturerService.js","views/manufacturer/AddManufacturerComponent.js"],"names":["propTypes","tag","tagPropType","className","PropTypes","string","cssModule","object","CardFooter","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","RealmService","json","console","log","axios","post","API_URL","get","put","ManufacturerService","initialValues","realmId","manufacturer","validationSchema","values","Yup","shape","required","getErrorsFromValidationError","validationError","inner","reduce","errors","error","path","AddManufacturerComponent","state","realms","realm","label","message","cancelClicked","bind","dataChange","event","this","target","name","value","label_en","setState","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","AuthenticationService","setupAxiosInterceptors","getRealmListAll","then","response","data","catch","getValidationSchema","realmList","map","item","key","sm","md","style","flexBasis","validate","validateSync","abortEarly","onSubmit","setSubmitting","setErrors","addManufacturer","status","history","push","render","touched","handleChange","handleBlur","handleSubmit","isValid","isSubmitting","noValidate","htmlFor","type","id","bsSize","valid","invalid","onChange","e","onBlur","for","size","color","onClick","touchAll","disabled","Component"],"mappings":"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","file":"static/js/63.f0a9ca99.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardFooter = function CardFooter(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-footer'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardFooter.propTypes = propTypes;\nCardFooter.defaultProps = defaultProps;\nexport default CardFooter;","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass RealmService {\n\n    addRealm(json) {\n        console.log(json);\n        return axios.post(`${API_URL}/api/realm/`, json, {}\n        );\n    }\n\n    getRealmListAll() {\n        return axios.get(`${API_URL}/api/realm/`, {\n        });\n    } \n\n    updateRealm(json) {\n        return axios.put(`${API_URL}/api/realm/`, json, {\n        });\n    }\n\n\n}\nexport default new RealmService();","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass ManufacturerService {\n\n    addManufacturer(json) {\n        return axios.post(`${API_URL}/api/manufacturer/`, json, {}\n        );\n    }\n\n    getManufacturerListAll() {\n        return axios.get(`${API_URL}/api/manufacturer/`, {\n        });\n    } \n\n    updateManufacturer(json) {\n        return axios.put(`${API_URL}/api/manufacturer/`, json, {\n        });\n    }\n\n}\nexport default new ManufacturerService();","import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\n\nimport ManufacturerService from \"../../api/ManufacturerService\";\nimport RealmService from \"../../api/RealmService\";\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nconst initialValues = {\n  realmId: [],\n  manufacturer: \"\"\n}\n\nconst validationSchema = function (values) {\n  return Yup.object().shape({\n    realmId: Yup.string()\n      .required('Please select Realm'),\n    manufacturer: Yup.string()\n      .required('Please enter Manufacturer')\n  })\n}\n\nconst validate = (getValidationSchema) => {\n  return (values) => {\n    const validationSchema = getValidationSchema(values)\n    try {\n      validationSchema.validateSync(values, { abortEarly: false })\n      return {}\n    } catch (error) {\n      return getErrorsFromValidationError(error)\n    }\n  }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n  const FIRST_ERROR = 0\n  return validationError.inner.reduce((errors, error) => {\n    return {\n      ...errors,\n      [error.path]: error.errors[FIRST_ERROR],\n    }\n  }, {})\n}\nclass AddManufacturerComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      realms: [],\n      manufacturer: {\n        realm: {\n        },\n        label: {\n        }\n      },\n      message: ''\n    }\n    this.cancelClicked = this.cancelClicked.bind(this);\n    this.dataChange = this.dataChange.bind(this);\n  }\n\n  dataChange(event) {\n    let { manufacturer } = this.state;\n    if (event.target.name == \"realmId\") {\n      manufacturer.realm.realmId = event.target.value;\n    }\n    if (event.target.name == \"manufacturer\") {\n      manufacturer.label.label_en = event.target.value;\n    }\n    this.setState({\n      manufacturer\n    },\n      () => { });\n  };\n\n  touchAll(setTouched, errors) {\n    setTouched({\n      realmId: true,\n      manufacturer: true\n    }\n    );\n    this.validateForm(errors);\n  }\n  validateForm(errors) {\n    this.findFirstError('manufacturerForm', (fieldName) => {\n      return Boolean(errors[fieldName])\n    })\n  }\n  findFirstError(formName, hasError) {\n    const form = document.forms[formName]\n    for (let i = 0; i < form.length; i++) {\n      if (hasError(form[i].name)) {\n        form[i].focus()\n        break\n      }\n    }\n  }\n\n  componentDidMount() {\n    AuthenticationService.setupAxiosInterceptors();\n    RealmService.getRealmListAll()\n      .then(response => {\n        this.setState({\n          realms: response.data.data\n        })\n      }).catch(\n        error => {\n          switch (error.message) {\n            case \"Network Error\":\n              this.setState({\n                message: error.message\n              })\n              break\n            default:\n              this.setState({\n                message: error.response.data.message\n              })\n              break\n          }\n        }\n      );\n  }\n\n  render() {\n    const { realms } = this.state;\n    let realmList = realms.length > 0\n      && realms.map((item, i) => {\n        return (\n          <option key={i} value={item.realmId}>\n            {item.label.label_en}\n          </option>\n        )\n      }, this);\n    return (\n      <div className=\"animated fadeIn\">\n        <Row>\n          <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n            <Card>\n              <CardHeader>\n                <i className=\"icon-note\"></i><strong>Add Manufacturer</strong>{' '}\n              </CardHeader>\n              <Formik\n                initialValues={initialValues}\n                validate={validate(validationSchema)}\n                onSubmit={(values, { setSubmitting, setErrors }) => {\n                  console.log(\"Submit clicked\");\n                  ManufacturerService.addManufacturer(this.state.manufacturer)\n                    .then(response => {\n                      console.log(\"Response->\", response);\n                      if (response.data.status == \"Success\") {\n                        this.props.history.push(`/manufacturer/listManufacturer/${response.data.message}`)\n                      } else {\n                        this.setState({\n                          message: response.data.message\n                        })\n                      }\n                    })\n                    .catch(\n                      error => {\n                        switch (error.message) {\n                          case \"Network Error\":\n                            this.setState({\n                              message: error.message\n                            })\n                            break\n                          default:\n                            this.setState({\n                              message: error.response.data.message\n                            })\n                            break\n                        }\n                      }\n                    );\n                }}\n                render={\n                  ({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                    isValid,\n                    setTouched\n                  }) => (\n                      <Form onSubmit={handleSubmit} noValidate name='manufacturerForm'>\n                        <CardBody>\n                          <FormGroup>\n                            <Label htmlFor=\"realmId\">Realm</Label>\n                            <Input\n                              type=\"select\"\n                              name=\"realmId\"\n                              id=\"realmId\"\n                              bsSize=\"sm\"\n                              valid={!errors.realmId}\n                              invalid={touched.realmId && !!errors.realmId}\n                              onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                              onBlur={handleBlur}\n                              required\n                              value={this.state.realmId}\n                            >\n                              <option value=\"0\">Please select</option>\n                              {realmList}\n                            </Input>\n                            <FormFeedback>{errors.realmId}</FormFeedback>\n                          </FormGroup>\n                          <FormGroup>\n                            <Label for=\"manufacturer\">Manufacturer</Label>\n                            <Input type=\"text\"\n                              name=\"manufacturer\"\n                              id=\"manufacturer\"\n                              bsSize=\"sm\"\n                              valid={!errors.manufacturer}\n                              invalid={touched.manufacturer && !!errors.manufacturer}\n                              onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                              onBlur={handleBlur}\n                              required />\n                            <FormFeedback>{errors.manufacturer}</FormFeedback>\n                          </FormGroup>\n                        </CardBody>\n                        <CardFooter>\n                          <FormGroup>\n                            <Button type=\"reset\" size=\"sm\" color=\"warning\" className=\"float-right mr-1\"><i className=\"fa fa-refresh\"></i> Reset</Button>\n                            <Button type=\"button\" size=\"sm\" color=\"danger\" className=\"float-right mr-1\" onClick={this.cancelClicked}><i className=\"fa fa-times\"></i> Cancel</Button>\n                            <Button type=\"submit\" size=\"sm\" color=\"success\" className=\"float-right mr-1\" onClick={() => this.touchAll(setTouched, errors)} disabled={!isValid}><i className=\"fa fa-check\"></i>Submit</Button>\n                                                        &nbsp;\n                          </FormGroup>\n                        </CardFooter>\n                      </Form>\n\n                    )} />\n\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n  cancelClicked() {\n    this.props.history.push(`/manufacturer/listManufacturer/` + \"Action Canceled\")\n  }\n}\n\nexport default AddManufacturerComponent;\n"],"sourceRoot":""}