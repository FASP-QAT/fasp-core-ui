{"version":3,"sources":["../node_modules/reactstrap/es/CardFooter.js","api/ManufacturerService.js","views/manufacturer/EditManufacturerComponent.js"],"names":["propTypes","tag","tagPropType","className","PropTypes","string","cssModule","object","CardFooter","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","ManufacturerService","json","axios","post","API_URL","get","put","validationSchema","values","Yup","shape","manufacturer","required","getErrorsFromValidationError","validationError","inner","reduce","errors","error","path","EditManufacturerComponent","state","location","message","cancelClicked","bind","dataChange","event","this","target","name","label","label_en","value","active","id","setState","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","getValidationSchema","sm","md","style","flexBasis","enableReinitialize","initialValues","validate","validateSync","abortEarly","onSubmit","setSubmitting","setErrors","AuthenticationService","setupAxiosInterceptors","updateManufacturer","then","response","data","status","history","push","catch","render","touched","handleChange","handleBlur","handleSubmit","isValid","isSubmitting","noValidate","htmlFor","type","bsSize","readOnly","realm","for","valid","invalid","onChange","e","onBlur","check","inline","checked","size","color","onClick","touchAll","disabled","Component"],"mappings":"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","file":"static/js/74.2b74abab.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar CardFooter = function CardFooter(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\"]);\n\n  var classes = mapToCssModules(classNames(className, 'card-footer'), cssModule);\n  return React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nCardFooter.propTypes = propTypes;\nCardFooter.defaultProps = defaultProps;\nexport default CardFooter;","import axios from \"axios\";\nimport { API_URL } from '../Constants.js';\n\nclass ManufacturerService {\n\n    addManufacturer(json) {\n        return axios.post(`${API_URL}/api/manufacturer/`, json, {}\n        );\n    }\n\n    getManufacturerListAll() {\n        return axios.get(`${API_URL}/api/manufacturer/`, {\n        });\n    } \n\n    updateManufacturer(json) {\n        return axios.put(`${API_URL}/api/manufacturer/`, json, {\n        });\n    }\n\n}\nexport default new ManufacturerService();","import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\n\nimport ManufacturerService from \"../../api/ManufacturerService\";\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nlet initialValues = {\n    manufacturer: \"\"\n}\n\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        manufacturer: Yup.string()\n            .required('Please enter Manufacturer')\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\n\nclass EditManufacturerComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            manufacturer: this.props.location.state.manufacturer,\n            message: ''\n        }\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    dataChange(event) {\n        let { manufacturer } = this.state;\n        if (event.target.name == \"manufacturer\") {\n            manufacturer.label.label_en = event.target.value;\n        }\n        if (event.target.name == \"active\") {\n            manufacturer.active = event.target.id === \"active2\" ? false : true;\n        }\n        this.setState({\n            manufacturer\n        },\n            () => { });\n    };\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            manufacturer: true\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('manufacturerForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"animated fadeIn\">\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>Update Manufacturer</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                enableReinitialize={true}\n                                initialValues={{ manufacturer: this.state.manufacturer.label.label_en }}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {\n                                    AuthenticationService.setupAxiosInterceptors();\n                                    ManufacturerService.updateManufacturer(this.state.manufacturer)\n                                        .then(response => {\n                                            if (response.data.status == \"Success\") {\n                                                this.props.history.push(`/manufacturer/listManufacturer/${response.data.message}`)\n                                            } else {\n                                                this.setState({\n                                                    message: response.data.message\n                                                })\n                                            }\n                                        })\n                                        .catch(\n                                            error => {\n                                                switch (error.message) {\n                                                    case \"Network Error\":\n                                                        this.setState({\n                                                            message: error.message\n                                                        })\n                                                        break\n                                                    default:\n                                                        this.setState({\n                                                            message: error.response.data.message\n                                                        })\n                                                        break\n                                                }\n                                            }\n                                        );\n                                }}\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='manufacturerForm'>\n                                                <CardBody>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"realmId\">Realm</Label>\n                                                        <Input\n                                                            type=\"text\"\n                                                            name=\"realmId\"\n                                                            id=\"realmId\"\n                                                            bsSize=\"sm\"\n                                                            readOnly\n                                                            value={this.state.manufacturer.realm.label.label_en}\n                                                        >\n                                                        </Input>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"manufacturer\">Manufacturer</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"manufacturer\"\n                                                            id=\"manufacturer\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.manufacturer}\n                                                            invalid={touched.manufacturer && !!errors.manufacturer}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            value={this.state.manufacturer.label.label_en}\n                                                            required />\n                                                        <FormFeedback>{errors.manufacturer}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label>Status&nbsp;&nbsp;</Label>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active1\"\n                                                                name=\"active\"\n                                                                value={true}\n                                                                checked={this.state.manufacturer.active === true}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-radio1\">\n                                                                Active\n                                                                </Label>\n                                                        </FormGroup>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active2\"\n                                                                name=\"active\"\n                                                                value={false}\n                                                                checked={this.state.manufacturer.active === false}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-radio2\">\n                                                                Disabled\n                                                                </Label>\n                                                        </FormGroup>\n                                                    </FormGroup>\n                                                </CardBody>\n                                                <CardFooter>\n                                                    <FormGroup>\n                                                        <Button type=\"reset\" size=\"sm\" color=\"warning\" className=\"float-right mr-1\"><i className=\"fa fa-refresh\"></i> Reset</Button>\n                                                        <Button type=\"button\" size=\"sm\" color=\"danger\" className=\"float-right mr-1\" onClick={this.cancelClicked}><i className=\"fa fa-times\"></i> Cancel</Button>\n                                                        <Button type=\"submit\" size=\"sm\" color=\"success\" className=\"float-right mr-1\" onClick={() => this.touchAll(setTouched, errors)} disabled={!isValid}><i className=\"fa fa-check\"></i>Submit</Button>\n                                                        &nbsp;\n                                                    </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n\n                                        )} />\n\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n    cancelClicked() {\n        this.props.history.push(`/manufacturer/listManufacturer/` + \"Action Canceled\")\n    }\n}\n\nexport default EditManufacturerComponent;\n"],"sourceRoot":""}