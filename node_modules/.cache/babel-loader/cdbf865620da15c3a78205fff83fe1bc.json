{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/Realm/AddRealmComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport RealmService from '../../api/RealmService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport i18n from '../../i18n';\nvar initialValues = {\n  realmCode: '',\n  label: '',\n  monthInPastForAmc: '',\n  monthInFutureForAmc: '',\n  orderFrequency: ''\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    realmCode: Yup.string().required('Please enter realm code'),\n    label: Yup.string().required('Please enter realm name'),\n    monthInPastForAmc: Yup.string().required('Please enter month in past for amc'),\n    monthInFutureForAmc: Yup.string().required('Please enter month in future for amc'),\n    orderFrequency: Yup.string().required('Please enter order frequency')\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar AddRealmComponent = /*#__PURE__*/function (_Component) {\n  _inherits(AddRealmComponent, _Component);\n\n  function AddRealmComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddRealmComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddRealmComponent).call(this, props));\n    _this.state = {\n      realm: {\n        realmCode: '',\n        label: {\n          label_en: ''\n        },\n        monthInPastForAmc: '',\n        monthInFutureForAmc: '',\n        orderFrequency: '',\n        defaultRealm: true\n      }\n    };\n    _this.Capitalize = _this.Capitalize.bind(_assertThisInitialized(_this));\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    _this.dataChange = _this.dataChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AddRealmComponent, [{\n    key: \"dataChange\",\n    value: function dataChange(event) {\n      var realm = this.state.realm;\n\n      if (event.target.name === \"label\") {\n        this.state.realm.label.label_en = event.target.value;\n      }\n\n      if (event.target.name === \"realmCode\") {\n        this.state.realm.realmCode = event.target.value;\n      }\n\n      if (event.target.name === \"monthInPastForAmc\") {\n        this.state.realm.monthInPastForAmc = event.target.value;\n      }\n\n      if (event.target.name === \"monthInFutureForAmc\") {\n        this.state.realm.monthInFutureForAmc = event.target.value;\n      }\n\n      if (event.target.name === \"orderFrequency\") {\n        this.state.realm.orderFrequency = event.target.value;\n      } else if (event.target.name === \"defaultRealm\") {\n        realm.defaultRealm = event.target.id === \"realm.active2\" ? false : true;\n      }\n\n      this.setState({\n        realm: realm\n      });\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        'realmCode': true,\n        'label': true,\n        'monthInPastForAmc': true,\n        'monthInFutureForAmc': true,\n        'orderFrequency': true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('realmForm', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      AuthenticationService.setupAxiosInterceptors();\n    }\n  }, {\n    key: \"Capitalize\",\n    value: function Capitalize(str) {\n      return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Add Realm\"), ' '), React.createElement(Formik, {\n        initialValues: initialValues,\n        validate: validate(validationSchema),\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting,\n              setErrors = _ref.setErrors;\n          console.log(\"------IN SUBMIT------\", _this2.state.country);\n          RealmService.addRealm(_this2.state.realm).then(function (response) {\n            if (response.data.status == \"Success\") {\n              _this2.props.history.push(\"/realm/listRealm/\".concat(response.data.message));\n            } else {\n              _this2.setState({\n                message: response.data.message\n              });\n            }\n          }).catch(function (error) {\n            switch (error.message) {\n              case \"Network Error\":\n                _this2.setState({\n                  message: error.message\n                });\n\n                break;\n\n              default:\n                _this2.setState({\n                  message: error.response.data.message\n                });\n\n                break;\n            }\n          });\n        },\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"realmForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 199\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 201\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"realmCode\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202\n            },\n            __self: this\n          }, \"Realm Code:\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"realmCode\",\n            id: \"realmCode\",\n            bsSize: \"sm\",\n            valid: !errors.realmCode,\n            invalid: touched.realmCode && !!errors.realmCode,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n\n              _this2.Capitalize(e.target.value);\n            },\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 212\n            },\n            __self: this\n          }, errors.realmCode)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 214\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"label\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 215\n            },\n            __self: this\n          }, \"Realm Name (English)\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"label\",\n            id: \"label\",\n            bsSize: \"sm\",\n            valid: !errors.countryCode,\n            invalid: touched.label && !!errors.label,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 216\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 225\n            },\n            __self: this\n          }, errors.label)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"monthInPastForAmc\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 228\n            },\n            __self: this\n          }, \"Month In Past For AMC\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"monthInPastForAmc\",\n            id: \"monthInPastForAmc\",\n            bsSize: \"sm\",\n            valid: !errors.monthInPastForAmc,\n            invalid: touched.monthInPastForAmc && !!errors.monthInPastForAmc,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 229\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 238\n            },\n            __self: this\n          }, errors.monthInPastForAmc)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 240\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"monthInFutureForAmc\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 241\n            },\n            __self: this\n          }, \"Month In Future For AMC\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"monthInFutureForAmc\",\n            id: \"monthInFutureForAmc\",\n            bsSize: \"sm\",\n            valid: !errors.monthInFutureForAmc,\n            invalid: touched.monthInFutureForAmc && !!errors.monthInFutureForAmc,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 242\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 251\n            },\n            __self: this\n          }, errors.monthInFutureForAmc)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 253\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"orderFrequency\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 254\n            },\n            __self: this\n          }, \"Order Frequency\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"orderFrequency\",\n            id: \"orderFrequency\",\n            bsSize: \"sm\",\n            valid: !errors.orderFrequency,\n            invalid: touched.orderFrequency && !!errors.orderFrequency,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 255\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 264\n            },\n            __self: this\n          }, errors.orderFrequency)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 266\n            },\n            __self: this\n          }, React.createElement(Label, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267\n            },\n            __self: this\n          }, \"Default  \"), React.createElement(FormGroup, {\n            check: true,\n            inline: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268\n            },\n            __self: this\n          }, React.createElement(Input, {\n            className: \"form-check-input\",\n            type: \"radio\",\n            id: \"active1\",\n            name: \"defaultRealm\",\n            value: true,\n            checked: _this2.state.realm.defaultRealm === true,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 269\n            },\n            __self: this\n          }), React.createElement(Label, {\n            className: \"form-check-label\",\n            check: true,\n            htmlFor: \"inline-radio1\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 278\n            },\n            __self: this\n          }, \"Active\")), React.createElement(FormGroup, {\n            check: true,\n            inline: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 284\n            },\n            __self: this\n          }, React.createElement(Input, {\n            className: \"form-check-input\",\n            type: \"radio\",\n            id: \"active2\",\n            name: \"defaultRealm\",\n            value: false,\n            checked: _this2.state.realm.defaultRealm === false,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285\n            },\n            __self: this\n          }), React.createElement(Label, {\n            className: \"form-check-label\",\n            check: true,\n            htmlFor: \"inline-radio2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 294\n            },\n            __self: this\n          }, \"Disabled\")))), React.createElement(CardFooter, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 303\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 304\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"reset\",\n            color: \"danger\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: _this2.cancelClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 305\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-check\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 305\n            },\n            __self: this\n          }), i18n.t('static.common.cancel')), React.createElement(Button, {\n            type: \"submit\",\n            color: \"success\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: function onClick() {\n              return _this2.touchAll(setTouched, errors);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 306\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-check\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 306\n            },\n            __self: this\n          }), i18n.t('static.common.submit')), \"\\xA0\")));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/realm/listRealm/\" + \"Action Canceled\");\n    }\n  }]);\n\n  return AddRealmComponent;\n}(Component);\n\nexport { AddRealmComponent as default };","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/Realm/AddRealmComponent.jsx"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","FormText","InputGroup","InputGroupAddon","InputGroupText","Formik","Yup","RealmService","AuthenticationService","i18n","initialValues","realmCode","label","monthInPastForAmc","monthInFutureForAmc","orderFrequency","validationSchema","values","object","shape","string","required","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","AddRealmComponent","props","state","realm","label_en","defaultRealm","Capitalize","bind","cancelClicked","dataChange","event","target","name","value","id","setState","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","setupAxiosInterceptors","str","charAt","toUpperCase","slice","flexBasis","setSubmitting","setErrors","console","log","country","addRealm","then","response","data","status","history","push","message","catch","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","e","countryCode","t","touchAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\nimport RealmService from '../../api/RealmService'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport i18n from '../../i18n';\nconst initialValues = {\n    realmCode: '',\n    label: '',\n    monthInPastForAmc: '',\n    monthInFutureForAmc: '',\n    orderFrequency: ''\n}\n\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        realmCode: Yup.string()\n            .required('Please enter realm code'),\n        label: Yup.string()\n            .required('Please enter realm name'),\n        monthInPastForAmc: Yup.string()\n            .required('Please enter month in past for amc'),\n        monthInFutureForAmc: Yup.string()\n            .required('Please enter month in future for amc'),\n        orderFrequency: Yup.string()\n            .required('Please enter order frequency')\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\n\n\nexport default class AddRealmComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            realm: {\n                realmCode: '',\n                label: {\n                    label_en: ''\n                },\n                monthInPastForAmc: '',\n                monthInFutureForAmc: '',\n                orderFrequency: '',\n                defaultRealm: true\n            }\n\n        }\n        this.Capitalize = this.Capitalize.bind(this);\n\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    dataChange(event) {\n        let { realm } = this.state\n        if (event.target.name === \"label\") {\n            this.state.realm.label.label_en = event.target.value\n        }\n        if (event.target.name === \"realmCode\") {\n            this.state.realm.realmCode = event.target.value\n        }\n        if (event.target.name === \"monthInPastForAmc\") {\n            this.state.realm.monthInPastForAmc = event.target.value\n        }\n        if (event.target.name === \"monthInFutureForAmc\") {\n            this.state.realm.monthInFutureForAmc = event.target.value\n        }\n        if (event.target.name === \"orderFrequency\") {\n            this.state.realm.orderFrequency = event.target.value\n        }\n        else if (event.target.name === \"defaultRealm\") {\n            realm.defaultRealm = event.target.id === \"realm.active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                realm\n            }\n        )\n    };\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            'realmCode': true,\n            'label': true,\n            'monthInPastForAmc': true,\n            'monthInFutureForAmc': true,\n            'orderFrequency': true\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('realmForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n    }\n    Capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n\n\n    render() {\n\n        return (\n            <div className=\"animated fadeIn\">\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>Add Realm</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                initialValues={initialValues}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {\n\n\n                                    console.log(\"------IN SUBMIT------\", this.state.country)\n                                    RealmService.addRealm(this.state.realm)\n                                        .then(response => {\n                                            if (response.data.status == \"Success\") {\n                                                this.props.history.push(`/realm/listRealm/${response.data.message}`)\n                                            } else {\n                                                this.setState({\n                                                    message: response.data.message\n                                                })\n                                            }\n                                        })\n                                        .catch(\n                                            error => {\n                                                switch (error.message) {\n                                                    case \"Network Error\":\n                                                        this.setState({\n                                                            message: error.message\n                                                        })\n                                                        break\n                                                    default:\n                                                        this.setState({\n                                                            message: error.response.data.message\n                                                        })\n                                                        break\n                                                }\n                                            }\n                                        );\n                                }}\n\n\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='realmForm'>\n                                                <CardBody>\n                                                    <FormGroup>\n                                                        <Label for=\"realmCode\">Realm Code:</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"realmCode\"\n                                                            id=\"realmCode\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.realmCode}\n                                                            invalid={touched.realmCode && !!errors.realmCode}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e); this.Capitalize(e.target.value) }}\n                                                            onBlur={handleBlur}\n                                                            required />\n                                                        <FormFeedback>{errors.realmCode}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"label\">Realm Name (English)</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"label\"\n                                                            id=\"label\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.countryCode}\n                                                            invalid={touched.label && !!errors.label}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required />\n                                                        <FormFeedback>{errors.label}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"monthInPastForAmc\">Month In Past For AMC</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"monthInPastForAmc\"\n                                                            id=\"monthInPastForAmc\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.monthInPastForAmc}\n                                                            invalid={touched.monthInPastForAmc && !!errors.monthInPastForAmc}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required />\n                                                        <FormFeedback>{errors.monthInPastForAmc}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"monthInFutureForAmc\">Month In Future For AMC</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"monthInFutureForAmc\"\n                                                            id=\"monthInFutureForAmc\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.monthInFutureForAmc}\n                                                            invalid={touched.monthInFutureForAmc && !!errors.monthInFutureForAmc}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required />\n                                                        <FormFeedback>{errors.monthInFutureForAmc}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"orderFrequency\">Order Frequency</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"orderFrequency\"\n                                                            id=\"orderFrequency\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.orderFrequency}\n                                                            invalid={touched.orderFrequency && !!errors.orderFrequency}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required />\n                                                        <FormFeedback>{errors.orderFrequency}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label>Default  </Label>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active1\"\n                                                                name=\"defaultRealm\"\n                                                                value={true}\n                                                                checked={this.state.realm.defaultRealm === true}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-radio1\">\n                                                                Active\n                                                                </Label>\n                                                        </FormGroup>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active2\"\n                                                                name=\"defaultRealm\"\n                                                                value={false}\n                                                                checked={this.state.realm.defaultRealm === false}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-radio2\">\n                                                                Disabled\n                                                                </Label>\n                                                        </FormGroup>\n                                                    </FormGroup>\n                                                </CardBody>\n\n                                                <CardFooter>\n                                                    <FormGroup>\n                                                        <Button type=\"reset\" color=\"danger\" className=\"mr-1 float-right\" size=\"sm\" onClick={this.cancelClicked}><i className=\"fa fa-check\"></i>{i18n.t('static.common.cancel')}</Button>\n                                                        <Button type=\"submit\" color=\"success\" className=\"mr-1 float-right\" size=\"sm\" onClick={() => this.touchAll(setTouched, errors)}><i className=\"fa fa-check\"></i>{i18n.t('static.common.submit')}</Button>\n                                                        &nbsp;\n                                                    </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n\n                                        )} />\n\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/realm/listRealm/` + \"Action Canceled\")\n    }\n\n}"]},"metadata":{},"sourceType":"module"}