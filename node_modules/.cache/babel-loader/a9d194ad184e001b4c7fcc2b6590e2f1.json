{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/views/SyncMasterData/SyncMasterData.js\";\nimport React, { Component } from 'react';\nimport { Card, CardBody, CardHeader, CardFooter, Button, Col, Progress } from 'reactstrap';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport 'react-select/dist/react-select.min.css';\nimport * as JsStoreFunction from \"../../CommonComponent/JsStoreFunctions.js\";\nimport * as JsStoreFunctionCore from \"../../CommonComponent/JsStoreFunctionsCore\";\nimport moment from 'moment';\nimport MasterSyncService from '../../api/MasterSyncService.js';\n\nvar DownloadProgram = /*#__PURE__*/function (_Component) {\n  _inherits(DownloadProgram, _Component);\n\n  function DownloadProgram() {\n    var _this;\n\n    _classCallCheck(this, DownloadProgram);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DownloadProgram).call(this));\n    _this.state = {\n      totalMasters: 19,\n      syncedMasters: 0,\n      syncedPercentage: 0\n    }; // this.syncMasters = this.syncMasters.bind(this);\n    // this.retryClicked = this.retryClicked.bind(this);\n\n    return _this;\n  }\n\n  _createClass(DownloadProgram, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.getElementById(\"retryButtonDiv\").style.display = \"none\";\n      this.syncMasters();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(Col, {\n        xs: \"12\",\n        sm: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Master Data Sync\")), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, this.state.syncedPercentage, \"% (Synced \", this.state.syncedMasters, \" of \", this.state.totalMasters, \" masters)\"), React.createElement(Progress, {\n        value: this.state.syncedMasters,\n        max: this.state.totalMasters,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })), React.createElement(CardFooter, {\n        id: \"retryButtonDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        onClick: function onClick() {\n          return _this2.retryClicked();\n        },\n        size: \"sm\",\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-dot-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), \"Retry\")))));\n    }\n  }, {\n    key: \"syncMasters\",\n    value: function syncMasters() {\n      var _this3 = this;\n\n      if (navigator.onLine) {\n        var realmId = 1;\n        var updatedSyncDate = moment(Date.now()).utcOffset('-0500').format('YYYY-MM-DD HH:mm');\n        var lastSyncDateVar = \"\";\n        var lastSyncDateRealmVar = \"\";\n        JsStoreFunction.getLastSyncDateForApplicationMaster().then(function (response) {\n          console.log(response);\n\n          if (response.length > 0) {\n            lastSyncDateVar = response[0];\n          } else {\n            lastSyncDateVar = null;\n          }\n\n          JsStoreFunction.getLastSyncDateForRealm(realmId).then(function (response) {\n            console.log(response);\n\n            if (response.length > 0) {\n              lastSyncDateRealmVar = response[0];\n            } else {\n              lastSyncDateRealmVar = null;\n            }\n\n            if (navigator.onLine) {\n              MasterSyncService.getCurrencyListForSync(lastSyncDateVar).then(function (response) {\n                JsStoreFunction.syncCurrency(response.data);\n\n                _this3.setState({\n                  syncedMasters: _this3.state.syncedMasters + 1,\n                  syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                });\n\n                if (navigator.onLine) {\n                  //Code to Sync DataSource list\n                  MasterSyncService.getDataSourceListForSync(lastSyncDateVar).then(function (response) {\n                    JsStoreFunction.syncDataSource(response.data);\n\n                    _this3.setState({\n                      syncedMasters: _this3.state.syncedMasters + 1,\n                      syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                    });\n\n                    if (navigator.onLine) {\n                      //Code to Sync Funding source list\n                      MasterSyncService.getFundingSourceListForSync(lastSyncDateRealmVar, realmId).then(function (response) {\n                        JsStoreFunction.syncDataSourceType(response.data);\n\n                        _this3.setState({\n                          syncedMasters: _this3.state.syncedMasters + 1,\n                          syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                        });\n\n                        if (navigator.onLine) {\n                          //Code to Sync DataSourceType list\n                          MasterSyncService.getDataSourceTypeListForSync(lastSyncDateVar).then(function (response) {\n                            JsStoreFunction.syncDataSourceType(response.data);\n\n                            _this3.setState({\n                              syncedMasters: _this3.state.syncedMasters + 1,\n                              syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                            });\n                          }).catch(function (error) {\n                            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                            _this3.setState({\n                              message: \"Sync failed\"\n                            });\n                          });\n                        } else {\n                          document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                          _this3.setState({\n                            message: \"Sync failed\"\n                          });\n                        }\n                      }).catch(function (error) {\n                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                        _this3.setState({\n                          message: \"Sync failed\"\n                        });\n                      });\n                    } else {\n                      document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                      _this3.setState({\n                        message: \"Sync failed\"\n                      });\n                    }\n                  }).catch(function (error) {\n                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                    _this3.setState({\n                      message: \"Sync failed\"\n                    });\n                  });\n                } else {\n                  document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                  _this3.setState({\n                    message: \"Sync failed\"\n                  });\n                } //funding source\n                //healtharea\n                //logistics unit\n                //manufacturer\n                //organiation\n                //planning unit\n                // product\n                //product category\n                //region\n                //shipment status\n                //shipment status allowed\n                //sub funding source\n                //Country\n                //unit\n                //unit type\n                //language\n                //last sync date\n\n              }).catch(function (error) {\n                document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                _this3.setState({\n                  message: \"Sync failed\"\n                });\n              });\n            } else {\n              document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n              _this3.setState({\n                message: \"Sync failed\"\n              });\n            }\n          }).catch(function (error) {\n            lastSyncDateRealmVar = null;\n          });\n        }).catch(function (error) {\n          lastSyncDateVar = null;\n        });\n      } else {\n        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n        this.setState({\n          message: \"Sync failed\"\n        });\n      }\n    }\n  }]);\n\n  return DownloadProgram;\n}(Component);\n\nexport { DownloadProgram as default };","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/views/SyncMasterData/SyncMasterData.js"],"names":["React","Component","Card","CardBody","CardHeader","CardFooter","Button","Col","Progress","JsStoreFunction","JsStoreFunctionCore","moment","MasterSyncService","DownloadProgram","state","totalMasters","syncedMasters","syncedPercentage","document","getElementById","style","display","syncMasters","retryClicked","navigator","onLine","realmId","updatedSyncDate","Date","now","utcOffset","format","lastSyncDateVar","lastSyncDateRealmVar","getLastSyncDateForApplicationMaster","then","response","console","log","length","getLastSyncDateForRealm","getCurrencyListForSync","syncCurrency","data","setState","Math","floor","getDataSourceListForSync","syncDataSource","getFundingSourceListForSync","syncDataSourceType","getDataSourceTypeListForSync","catch","error","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Card, CardBody, CardHeader,\n    CardFooter, Button, Col, Progress\n} from 'reactstrap';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport 'react-select/dist/react-select.min.css';\nimport * as JsStoreFunction from \"../../CommonComponent/JsStoreFunctions.js\"\nimport * as JsStoreFunctionCore from \"../../CommonComponent/JsStoreFunctionsCore\"\nimport moment from 'moment';\nimport MasterSyncService from '../../api/MasterSyncService.js';\n\nexport default class DownloadProgram extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            totalMasters: 19,\n            syncedMasters: 0,\n            syncedPercentage: 0\n        }\n        // this.syncMasters = this.syncMasters.bind(this);\n        // this.retryClicked = this.retryClicked.bind(this);\n    }\n\n    componentDidMount() {\n        document.getElementById(\"retryButtonDiv\").style.display = \"none\";\n        this.syncMasters();\n    }\n\n    render() {\n        return (\n            <>\n                <Col xs=\"12\" sm=\"12\">\n                    <Card>\n                        <CardHeader>\n                            <strong>Master Data Sync</strong>\n                        </CardHeader>\n                        <CardBody>\n                            <div className=\"text-center\">{this.state.syncedPercentage}% (Synced {this.state.syncedMasters} of {this.state.totalMasters} masters)</div>\n                            <Progress value={this.state.syncedMasters} max={this.state.totalMasters} />\n                        </CardBody>\n\n                        <CardFooter id=\"retryButtonDiv\">\n                            <Button type=\"button\" onClick={() => this.retryClicked()} size=\"sm\" color=\"danger\"><i className=\"fa fa-dot-circle-o\"></i>Retry</Button>\n                        </CardFooter>\n                    </Card>\n                </Col>\n            </>\n        )\n\n    }\n\n\n    syncMasters() {\n        if (navigator.onLine) {\n            const realmId = 1;\n            var updatedSyncDate = ((moment(Date.now()).utcOffset('-0500').format('YYYY-MM-DD HH:mm')));\n            var lastSyncDateVar = \"\";\n            var lastSyncDateRealmVar = \"\";\n            JsStoreFunction.getLastSyncDateForApplicationMaster().then(response => {\n                console.log(response);\n                if (response.length > 0) {\n                    lastSyncDateVar = response[0];\n                } else {\n                    lastSyncDateVar = null;\n                }\n\n                JsStoreFunction.getLastSyncDateForRealm(realmId).then(response => {\n                    console.log(response);\n                    if (response.length > 0) {\n                        lastSyncDateRealmVar = response[0];\n                    } else {\n                        lastSyncDateRealmVar = null;\n                    }\n                    if (navigator.onLine) {\n                        MasterSyncService.getCurrencyListForSync(lastSyncDateVar)\n                            .then(response => {\n                                JsStoreFunction.syncCurrency(response.data);\n                                this.setState({\n                                    syncedMasters: this.state.syncedMasters + 1,\n                                    syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                })\n                                if (navigator.onLine) {\n                                    //Code to Sync DataSource list\n                                    MasterSyncService.getDataSourceListForSync(lastSyncDateVar)\n                                        .then(response => {\n                                            JsStoreFunction.syncDataSource(response.data);\n                                            this.setState({\n                                                syncedMasters: this.state.syncedMasters + 1,\n                                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                            })\n                                            if (navigator.onLine) {\n                                                //Code to Sync Funding source list\n                                                MasterSyncService.getFundingSourceListForSync(lastSyncDateRealmVar, realmId)\n                                                    .then(response => {\n                                                        JsStoreFunction.syncDataSourceType(response.data);\n                                                        this.setState({\n                                                            syncedMasters: this.state.syncedMasters + 1,\n                                                            syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                        })\n                                                        if (navigator.onLine) {\n                                                            //Code to Sync DataSourceType list\n                                                            MasterSyncService.getDataSourceTypeListForSync(lastSyncDateVar)\n                                                                .then(response => {\n                                                                    JsStoreFunction.syncDataSourceType(response.data);\n                                                                    this.setState({\n                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                    })\n                                                                })\n                                                                .catch(\n                                                                    error => {\n                                                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                        this.setState({\n                                                                            message: \"Sync failed\"\n                                                                        })\n                                                                    }\n                                                                );\n                                                        } else {\n                                                            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                            this.setState({\n                                                                message: \"Sync failed\"\n                                                            })\n                                                        }\n                                                    })\n                                                    .catch(\n                                                        error => {\n                                                            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                            this.setState({\n                                                                message: \"Sync failed\"\n                                                            })\n                                                        }\n                                                    );\n                                            } else {\n                                                document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                this.setState({\n                                                    message: \"Sync failed\"\n                                                })\n                                            }\n                                        })\n                                        .catch(\n                                            error => {\n                                                document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                this.setState({\n                                                    message: \"Sync failed\"\n                                                })\n                                            }\n                                        );\n                                } else {\n                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                    this.setState({\n                                        message: \"Sync failed\"\n                                    })\n                                }\n\n                                //funding source\n                                //healtharea\n                                //logistics unit\n                                //manufacturer\n                                //organiation\n                                //planning unit\n                                // product\n                                //product category\n                                //region\n                                //shipment status\n                                //shipment status allowed\n                                //sub funding source\n                                //Country\n                                //unit\n                                //unit type\n                                //language\n                                //last sync date\n                            })\n                            .catch(\n                                error => {\n                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                    this.setState({\n                                        message: \"Sync failed\"\n                                    })\n                                }\n                            );\n                    } else {\n                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                        this.setState({\n                            message: \"Sync failed\"\n                        })\n                    }\n                })\n                    .catch(\n                        error => {\n                            lastSyncDateRealmVar = null;\n                        }\n                    )\n            })\n                .catch(\n                    error => {\n                        lastSyncDateVar = null;\n                    }\n                )\n\n        } else {\n            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n            this.setState({\n                message: \"Sync failed\"\n            })\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}