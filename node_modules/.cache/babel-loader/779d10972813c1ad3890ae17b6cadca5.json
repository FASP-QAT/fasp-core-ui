{"ast":null,"code":"'use strict';\n\nvar utils = require('../utils');\n\nvar GenericWorker = require('./GenericWorker');\n/**\n * A worker which calculate the total length of the data flowing through.\n * @constructor\n * @param {String} propName the name used to expose the length\n */\n\n\nfunction DataLengthProbe(propName) {\n  GenericWorker.call(this, \"DataLengthProbe for \" + propName);\n  this.propName = propName;\n  this.withStreamInfo(propName, 0);\n}\n\nutils.inherits(DataLengthProbe, GenericWorker);\n/**\n * @see GenericWorker.processChunk\n */\n\nDataLengthProbe.prototype.processChunk = function (chunk) {\n  if (chunk) {\n    var length = this.streamInfo[this.propName] || 0;\n    this.streamInfo[this.propName] = length + chunk.data.length;\n  }\n\n  GenericWorker.prototype.processChunk.call(this, chunk);\n};\n\nmodule.exports = DataLengthProbe;","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/jszip/lib/stream/DataLengthProbe.js"],"names":["utils","require","GenericWorker","DataLengthProbe","propName","call","withStreamInfo","inherits","prototype","processChunk","chunk","length","streamInfo","data","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA3B;AAEA;;;;;;;AAKA,SAASE,eAAT,CAAyBC,QAAzB,EAAmC;AAC/BF,EAAAA,aAAa,CAACG,IAAd,CAAmB,IAAnB,EAAyB,yBAAyBD,QAAlD;AACA,OAAKA,QAAL,GAAgBA,QAAhB;AACA,OAAKE,cAAL,CAAoBF,QAApB,EAA8B,CAA9B;AACH;;AACDJ,KAAK,CAACO,QAAN,CAAeJ,eAAf,EAAgCD,aAAhC;AAEA;;;;AAGAC,eAAe,CAACK,SAAhB,CAA0BC,YAA1B,GAAyC,UAAUC,KAAV,EAAiB;AACtD,MAAGA,KAAH,EAAU;AACN,QAAIC,MAAM,GAAG,KAAKC,UAAL,CAAgB,KAAKR,QAArB,KAAkC,CAA/C;AACA,SAAKQ,UAAL,CAAgB,KAAKR,QAArB,IAAiCO,MAAM,GAAGD,KAAK,CAACG,IAAN,CAAWF,MAArD;AACH;;AACDT,EAAAA,aAAa,CAACM,SAAd,CAAwBC,YAAxB,CAAqCJ,IAArC,CAA0C,IAA1C,EAAgDK,KAAhD;AACH,CAND;;AAOAI,MAAM,CAACC,OAAP,GAAiBZ,eAAjB","sourcesContent":["'use strict';\n\nvar utils = require('../utils');\nvar GenericWorker = require('./GenericWorker');\n\n/**\n * A worker which calculate the total length of the data flowing through.\n * @constructor\n * @param {String} propName the name used to expose the length\n */\nfunction DataLengthProbe(propName) {\n    GenericWorker.call(this, \"DataLengthProbe for \" + propName);\n    this.propName = propName;\n    this.withStreamInfo(propName, 0);\n}\nutils.inherits(DataLengthProbe, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nDataLengthProbe.prototype.processChunk = function (chunk) {\n    if(chunk) {\n        var length = this.streamInfo[this.propName] || 0;\n        this.streamInfo[this.propName] = length + chunk.data.length;\n    }\n    GenericWorker.prototype.processChunk.call(this, chunk);\n};\nmodule.exports = DataLengthProbe;\n\n"]},"metadata":{},"sourceType":"script"}