{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/Dimension/EditDimensionComponent.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport UnitTypeService from '../../api/UnitTypeService.js';\nimport i18n from '../../i18n';\nvar initialValues = {\n  label: \"\"\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    label: Yup.string().required('Please enter Diamension')\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar UpdateUnitTypeComponent = /*#__PURE__*/function (_Component) {\n  _inherits(UpdateUnitTypeComponent, _Component);\n\n  function UpdateUnitTypeComponent(props) {\n    var _this;\n\n    _classCallCheck(this, UpdateUnitTypeComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UpdateUnitTypeComponent).call(this, props));\n    _this.state = {\n      unitType: {\n        unitTypeId: '',\n        label: {\n          labelId: '',\n          label_en: ''\n        }\n      }\n    };\n    _this.Capitalize = _this.Capitalize.bind(_assertThisInitialized(_this));\n    _this.dataChange = _this.dataChange.bind(_assertThisInitialized(_this));\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(UpdateUnitTypeComponent, [{\n    key: \"dataChange\",\n    value: function dataChange(event) {\n      var unitType = this.state.unitType;\n\n      if (event.target.name === \"label\") {\n        //console.log(\"inside if\")\n        unitType.label.label_en = event.target.value;\n      }\n\n      this.setState({\n        unitType: unitType\n      });\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        label: true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('diamensionForm', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      AuthenticationService.setupAxiosInterceptors(); // console.log(this.props.location.state.unitType);\n\n      this.setState({\n        unitType: this.props.location.state.unitType\n      });\n    }\n  }, {\n    key: \"Capitalize\",\n    value: function Capitalize(str) {\n      this.state.unitType.label.label_en = str.charAt(0).toUpperCase() + str.slice(1);\n    }\n  }, {\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/diamension/diamensionlist/\" + \"Action Canceled\");\n    } // render() {\n    //     return (\n    //         <>\n    //             <h3>Update Unit Type</h3>\n    //             <form name=\"updateUnitTypeForm\" id=\"updateUnitTypeForm\">\n    //                 <div>\n    //                     <label>Unit Type Name:-</label>\n    //                     <input type=\"text\" name=\"unitType.label.label_en\" value={this.Capitalize(this.state.unitType.label.label_en)} onChange={this.updateFieldData} />\n    //                 </div>\n    //                 <br /><br />\n    //                 {/*                   \n    //                 <div>\n    //                     {myConst.ACTIVE}:\n    //                 <input type=\"radio\" id=\"dataSourceType.active1\" name=\"dataSourceType.active\" value={true} checked={this.state.dataSourceType.active === true} onChange={this.updateFieldData} /> Active\n    //                 <input type=\"radio\" id=\"dataSourceType.active2\" name=\"dataSourceType.active\" value={false} checked={this.state.dataSourceType.active === false} onChange={this.updateFieldData} /> Disabled\n    //                  </div> */}\n    //                 <div>\n    //                     <button type=\"button\" onClick={this.updateForm}>Update</button>\n    //                     <button type=\"button\" onClick={this.cancelClicked}>Cancel</button><br></br><br></br>\n    //                 </div>\n    //             </form>\n    //         </>\n    //     );\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Edit Diamension\"), ' '), React.createElement(Formik, {\n        enableReinitialize: true,\n        initialValues: {\n          language: this.state.language\n        },\n        validate: validate(validationSchema),\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting,\n              setErrors = _ref.setErrors;\n          // AuthenticationService.setupAxiosInterceptors();\n          UnitTypeService.updateUnitType(_this2.state.unitType).then(function (response) {\n            if (response.data.status == \"Success\") {\n              _this2.props.history.push(\"/diamension/diamensionlist/\".concat(response.data.message));\n            } else {\n              _this2.setState({\n                message: response.data.message\n              });\n            }\n          }).catch(function (error) {\n            switch (error.message) {\n              case \"Network Error\":\n                _this2.setState({\n                  message: error.response.data\n                });\n\n                break;\n\n              default:\n                _this2.setState({\n                  message: error.response.data.message\n                });\n\n                break;\n            }\n          });\n        },\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"diamensionForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 199\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 201\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"label\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202\n            },\n            __self: this\n          }, \"Dimension\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"label\",\n            id: \"label\",\n            bsSize: \"sm\",\n            valid: !errors.label,\n            invalid: touched.label && !!errors.label,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n\n              _this2.Capitalize(e.target.value);\n            },\n            onBlur: handleBlur,\n            value: _this2.state.unitType.label.label_en,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 213\n            },\n            __self: this\n          }, errors.label))), React.createElement(CardFooter, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 216\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 217\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"reset\",\n            color: \"danger\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: _this2.cancelClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 222\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-check\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 222\n            },\n            __self: this\n          }), i18n.t('static.common.cancel')), React.createElement(Button, {\n            type: \"submit\",\n            color: \"success\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: function onClick() {\n              return _this2.touchAll(setTouched, errors);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 223\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-check\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 223\n            },\n            __self: this\n          }), i18n.t('static.common.submit')), \"\\xA0\")));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return UpdateUnitTypeComponent;\n}(Component);\n\nexport { UpdateUnitTypeComponent as default };","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/Dimension/EditDimensionComponent.js"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","FormText","InputGroup","InputGroupAddon","InputGroupText","AuthenticationService","Formik","Yup","UnitTypeService","i18n","initialValues","label","validationSchema","values","object","shape","string","required","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","UpdateUnitTypeComponent","props","state","unitType","unitTypeId","labelId","label_en","Capitalize","bind","dataChange","cancelClicked","event","target","name","value","setState","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","setupAxiosInterceptors","location","str","charAt","toUpperCase","slice","history","push","flexBasis","language","setSubmitting","setErrors","updateUnitType","then","response","data","status","message","catch","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","e","t","touchAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\nimport UnitTypeService from '../../api/UnitTypeService.js';\nimport i18n from '../../i18n';\n\nlet initialValues = {\n    label: \"\"\n}\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        label: Yup.string()\n            .required('Please enter Diamension')\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\n\n\nexport default class UpdateUnitTypeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            unitType: {\n                unitTypeId: '',\n                label: {\n                    labelId: '',\n                    label_en: ''\n                }\n            }\n        }\n        this.Capitalize = this.Capitalize.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    dataChange(event) {\n        let { unitType } = this.state\n        if (event.target.name === \"label\") {\n            //console.log(\"inside if\")\n            unitType.label.label_en = event.target.value\n        }\n        this.setState(\n            {\n                unitType\n            }\n        )\n    };\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            label: true\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('diamensionForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        // console.log(this.props.location.state.unitType);\n        this.setState({\n            unitType: this.props.location.state.unitType\n        });\n\n    }\n\n    Capitalize(str) {\n        this.state.unitType.label.label_en = str.charAt(0).toUpperCase() + str.slice(1)\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/diamension/diamensionlist/` + \"Action Canceled\")\n    }\n\n    // render() {\n\n    //     return (\n    //         <>\n    //             <h3>Update Unit Type</h3>\n    //             <form name=\"updateUnitTypeForm\" id=\"updateUnitTypeForm\">\n    //                 <div>\n    //                     <label>Unit Type Name:-</label>\n    //                     <input type=\"text\" name=\"unitType.label.label_en\" value={this.Capitalize(this.state.unitType.label.label_en)} onChange={this.updateFieldData} />\n    //                 </div>\n    //                 <br /><br />\n    //                 {/*                   \n    //                 <div>\n    //                     {myConst.ACTIVE}:\n    //                 <input type=\"radio\" id=\"dataSourceType.active1\" name=\"dataSourceType.active\" value={true} checked={this.state.dataSourceType.active === true} onChange={this.updateFieldData} /> Active\n    //                 <input type=\"radio\" id=\"dataSourceType.active2\" name=\"dataSourceType.active\" value={false} checked={this.state.dataSourceType.active === false} onChange={this.updateFieldData} /> Disabled\n    //                  </div> */}\n\n    //                 <div>\n    //                     <button type=\"button\" onClick={this.updateForm}>Update</button>\n    //                     <button type=\"button\" onClick={this.cancelClicked}>Cancel</button><br></br><br></br>\n    //                 </div>\n    //             </form>\n\n\n    //         </>\n\n    //     );\n    // }\n\n    render() {\n        return (\n            <div className=\"animated fadeIn\">\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>Edit Diamension</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                enableReinitialize={true}\n                                initialValues={{ language: this.state.language }}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {\n                                    // AuthenticationService.setupAxiosInterceptors();\n                                    UnitTypeService.updateUnitType(this.state.unitType).then(response => {\n                                        if (response.data.status == \"Success\") {\n                                            this.props.history.push(`/diamension/diamensionlist/${response.data.message}`)\n                                        } else {\n                                            this.setState({\n                                                message: response.data.message\n                                            })\n                                        }\n\n                                    }\n                                    )\n                                        .catch(\n                                            error => {\n                                                switch (error.message) {\n                                                    case \"Network Error\":\n                                                        this.setState({\n                                                            message: error.response.data\n                                                        })\n                                                        break\n                                                    default:\n                                                        this.setState({\n                                                            message: error.response.data.message\n                                                        })\n                                                        break\n                                                }\n                                            }\n                                        )\n\n                                }}\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='diamensionForm'>\n                                                <CardBody>\n                                                    <FormGroup>\n                                                        <Label for=\"label\">Dimension</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"label\"\n                                                            id=\"label\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.label}\n                                                            invalid={touched.label && !!errors.label}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e); this.Capitalize(e.target.value) }}\n                                                            onBlur={handleBlur}\n                                                            value={this.state.unitType.label.label_en}\n                                                            required />\n                                                        <FormFeedback>{errors.label}</FormFeedback>\n                                                    </FormGroup>\n                                                </CardBody>\n                                                <CardFooter>\n                                                    <FormGroup>\n                                                    {/* <Button type=\"reset\" color=\"danger\" className=\"mr-1 float-right\"size=\"sm\" onClick={this.cancelClicked}><i className=\"fa fa-times\"></i> Cancel</Button>\n                                                        <Button type=\"submit\" color=\"success\" className=\"mr-1 float-right\"size=\"sm\" onClick={() => this.touchAll(setTouched, errors)}><i className=\"fa fa-check\"></i>Submit</Button> */}\n                                                      \n\n                                                        <Button type=\"reset\" color=\"danger\"className=\"mr-1 float-right\"size=\"sm\" onClick={this.cancelClicked}><i className=\"fa fa-check\"></i>{i18n.t('static.common.cancel')}</Button>\n                                                        <Button type=\"submit\" color=\"success\" className=\"mr-1 float-right\"size=\"sm\" onClick={() => this.touchAll(setTouched, errors)}><i className=\"fa fa-check\"></i>{i18n.t('static.common.submit')}</Button>\n                                                        &nbsp;\n                                                    </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n\n                                        )} />\n\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n}"]},"metadata":{},"sourceType":"module"}