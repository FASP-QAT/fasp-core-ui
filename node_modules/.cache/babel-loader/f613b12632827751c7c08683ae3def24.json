{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/DataSource/AddDataSource.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport DataSourceService from '../../api/DataSourceService';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport i18n from '../../i18n';\nvar initialValues = {\n  label: '',\n  dataSourceTypeId: '',\n  dataSourceTypeList: []\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    label: Yup.string().required(i18n.t('static.datasource.datasourcetext')),\n    dataSourceTypeId: Yup.string().required(i18n.t('static.datasource.datasourcetypetext'))\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar AddDataSource = /*#__PURE__*/function (_Component) {\n  _inherits(AddDataSource, _Component);\n\n  function AddDataSource(props) {\n    var _this;\n\n    _classCallCheck(this, AddDataSource);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddDataSource).call(this, props));\n    _this.state = {\n      message: '',\n      label: {\n        label_en: ''\n      },\n      dataSourceType: {\n        dataSourceTypeId: ''\n      },\n      dataSourceTypeList: []\n    };\n    _this.Capitalize = _this.Capitalize.bind(_assertThisInitialized(_this));\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    _this.dataChange = _this.dataChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AddDataSource, [{\n    key: \"dataChange\",\n    value: function dataChange(event) {\n      if (event.target.name === \"label\") {\n        this.state.label.label_en = event.target.value;\n      } else if (event.target.name === \"dataSourceTypeId\") {\n        this.state.dataSourceType.dataSourceTypeId = event.target.value;\n      }\n\n      var dataSource = this.state.dataSource;\n      this.setState({\n        dataSource: dataSource\n      });\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        'label': true,\n        'dataSourceTypeId': true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('dataSourceForm', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      AuthenticationService.setupAxiosInterceptors();\n      DataSourceTypeService.getDataSourceTypeListActive().then(function (response) {\n        _this2.setState({\n          dataSourceTypeList: response.data\n        });\n      }).catch(function (error) {\n        switch (error.message) {\n          case \"Network Error\":\n            _this2.setState({\n              message: error.message\n            });\n\n            break;\n\n          default:\n            _this2.setState({\n              message: error.message\n            });\n\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"Capitalize\",\n    value: function Capitalize(str) {\n      this.state.label.label_en = str.charAt(0).toUpperCase() + str.slice(1);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var dataSourceTypeList = this.state.dataSourceTypeList;\n      var dataSourceTypes = dataSourceTypeList.length > 0 && dataSourceTypeList.map(function (item, i) {\n        return React.createElement(\"option\", {\n          key: i,\n          value: item.dataSourceTypeId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147\n          },\n          __self: this\n        }, item.label.label_en);\n      }, this);\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, i18n.t('static.datasource.datasourceadd')), ' '), React.createElement(Formik, {\n        initialValues: initialValues,\n        validate: validate(validationSchema),\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting,\n              setErrors = _ref.setErrors;\n          DataSourceService.addDataSource(_this3.state).then(function (response) {\n            if (response.data.status == \"Success\") {\n              _this3.props.history.push(\"/dataSource/listDataSource/\".concat(response.data.message));\n            } else {\n              _this3.setState({\n                message: response.data.message\n              });\n            }\n          }).catch(function (error) {\n            switch (error.message) {\n              case \"Network Error\":\n                _this3.setState({\n                  message: error.message\n                });\n\n                break;\n\n              default:\n                _this3.setState({\n                  message: error.response.data.message\n                });\n\n                break;\n            }\n          });\n        },\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"dataSourceForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 206\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"label\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 207\n            },\n            __self: this\n          }, i18n.t('static.datasource.datasource')), React.createElement(Input, {\n            type: \"text\",\n            name: \"label\",\n            id: \"label\",\n            bsSize: \"sm\",\n            valid: !errors.label,\n            invalid: touched.label && !!errors.label,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n\n              _this3.Capitalize(e.target.value);\n            },\n            onBlur: handleBlur,\n            value: _this3.state.label.label_en,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 208\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 218\n            },\n            __self: this\n          }, errors.label)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 220\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"dataSourceTypeId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 221\n            },\n            __self: this\n          }, i18n.t('static.datasource.datasourcetype')), React.createElement(Input, {\n            type: \"select\",\n            name: \"dataSourceTypeId\",\n            id: \"dataSourceTypeId\",\n            bsSize: \"sm\",\n            valid: !errors.dataSourceTypeId,\n            invalid: touched.dataSourceTypeId && !!errors.dataSourceTypeId,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 222\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"0\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 232\n            },\n            __self: this\n          }, i18n.t('static.common.select')), dataSourceTypes), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 235\n            },\n            __self: this\n          }, errors.dataSourceTypeId))), React.createElement(CardFooter, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 239\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 240\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"reset\",\n            color: \"danger\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: _this3.cancelClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 241\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-times\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 241\n            },\n            __self: this\n          }), \" \", i18n.t('static.common.cancel')), React.createElement(Button, {\n            type: \"submit\",\n            color: \"success\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: function onClick() {\n              return _this3.touchAll(setTouched, errors);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 242\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-check\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 242\n            },\n            __self: this\n          }), i18n.t('static.common.submit')), \"\\xA0\")));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/dataSource/listDataSource/\" + \"Action Canceled\");\n    }\n  }]);\n\n  return AddDataSource;\n}(Component);\n\nexport { AddDataSource as default };","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/DataSource/AddDataSource.jsx"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","FormText","InputGroup","InputGroupAddon","InputGroupText","Formik","Yup","AuthenticationService","DataSourceService","DataSourceTypeService","i18n","initialValues","label","dataSourceTypeId","dataSourceTypeList","validationSchema","values","object","shape","string","required","t","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","AddDataSource","props","state","message","label_en","dataSourceType","Capitalize","bind","cancelClicked","dataChange","event","target","name","value","dataSource","setState","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","setupAxiosInterceptors","getDataSourceTypeListActive","then","response","data","catch","str","charAt","toUpperCase","slice","dataSourceTypes","map","item","flexBasis","setSubmitting","setErrors","addDataSource","status","history","push","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","e","touchAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport DataSourceService from '../../api/DataSourceService';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport i18n from '../../i18n';\n\nconst initialValues = {\n    label: '',\n    dataSourceTypeId: '',\n    dataSourceTypeList: []\n}\n\n\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        label: Yup.string()\n            .required(i18n.t('static.datasource.datasourcetext')),\n        dataSourceTypeId: Yup.string()\n            .required(i18n.t('static.datasource.datasourcetypetext'))\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\n\n\nexport default class AddDataSource extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: '',\n            label: {\n                label_en: ''\n            },\n            dataSourceType: {\n                dataSourceTypeId: ''\n            },\n            dataSourceTypeList: []\n        }\n        this.Capitalize = this.Capitalize.bind(this);\n\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    dataChange(event) {\n        if (event.target.name === \"label\") {\n            this.state.label.label_en = event.target.value\n        }\n        else if (event.target.name === \"dataSourceTypeId\") {\n            this.state.dataSourceType.dataSourceTypeId = event.target.value\n        }\n\n        let { dataSource } = this.state\n        this.setState(\n            {\n                dataSource\n            }\n        )\n\n    };\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            'label': true,\n            'dataSourceTypeId': true\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('dataSourceForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeListActive().then(response => {\n            this.setState({\n                dataSourceTypeList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n        \n\n    }\n\n    \n    Capitalize(str) {\n        this.state.label.label_en = str.charAt(0).toUpperCase() + str.slice(1)\n    }\n    render() {\n\n        const { dataSourceTypeList } = this.state;\n        let dataSourceTypes = dataSourceTypeList.length > 0\n            && dataSourceTypeList.map((item, i) => {\n                return (\n                    <option key={i} value={item.dataSourceTypeId}>{item.label.label_en}</option>\n                )\n            }, this);\n\n        return (\n            <div className=\"animated fadeIn\">\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n                            <CardHeader>\n        <i className=\"icon-note\"></i><strong>{i18n.t('static.datasource.datasourceadd')}</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                initialValues={initialValues}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {  \n                                    DataSourceService.addDataSource(this.state)\n                                        .then(response => {\n                                            if (response.data.status == \"Success\") {\n                                                this.props.history.push(`/dataSource/listDataSource/${response.data.message}`)\n                                            } else {\n                                                this.setState({\n                                                    message: response.data.message\n                                                })\n                                            }\n                                        })\n                                        .catch(\n                                            error => {\n                                                switch (error.message) {\n                                                    case \"Network Error\":\n                                                        this.setState({\n                                                            message: error.message\n                                                        })\n                                                        break\n                                                    default:\n                                                        this.setState({\n                                                            message: error.response.data.message\n                                                        })\n                                                        break\n                                                }\n                                            }\n                                        );\n                                }}\n\n\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='dataSourceForm'>\n                                                <CardBody>\n                                                    <FormGroup>\n                                                        <Label for=\"label\">{i18n.t('static.datasource.datasource')}</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"label\"\n                                                            id=\"label\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.label}\n                                                            invalid={touched.label && !!errors.label}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e); this.Capitalize(e.target.value) }}\n                                                            onBlur={handleBlur}\n                                                            value={this.state.label.label_en}\n                                                            required />\n                                                        <FormFeedback>{errors.label}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"dataSourceTypeId\">{i18n.t('static.datasource.datasourcetype')}</Label>\n                                                        <Input\n                                                            type=\"select\"\n                                                            name=\"dataSourceTypeId\"\n                                                            id=\"dataSourceTypeId\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.dataSourceTypeId}\n                                                            invalid={touched.dataSourceTypeId && !!errors.dataSourceTypeId}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required>\n                                                            <option value=\"0\">{i18n.t('static.common.select')}</option>\n                                                            {dataSourceTypes}\n                                                        </Input>\n                                                        <FormFeedback>{errors.dataSourceTypeId}</FormFeedback>\n                                                    </FormGroup>\n                                                </CardBody>\n\n                                                <CardFooter>\n                                                    <FormGroup>\n                                                         <Button type=\"reset\" color=\"danger\" className=\"mr-1 float-right\"size=\"sm\" onClick={this.cancelClicked}><i className=\"fa fa-times\"></i> {i18n.t('static.common.cancel')}</Button>\n                                                        <Button type=\"submit\" color=\"success\" className=\"mr-1 float-right\"size=\"sm\" onClick={() => this.touchAll(setTouched, errors)}><i className=\"fa fa-check\"></i>{i18n.t('static.common.submit')}</Button>\n                                                        &nbsp;\n                                                       \n                                                    </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n\n                                        )} />\n\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/dataSource/listDataSource/` + \"Action Canceled\")\n    }\n\n}"]},"metadata":{},"sourceType":"module"}