{"ast":null,"code":"// const db1=\"\";\nvar openRequest = indexedDB.open('fasp', 1);\nexport function getDatabase() {\n  var db1;\n  var storeOS;\n\n  openRequest.onupgradeneeded = function (e) {\n    db1 = e.target.result;\n\n    if (!db1.objectStoreNames.contains('programData')) {\n      storeOS = db1.createObjectStore('programData', {\n        keyPath: 'id',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('lastSyncDate')) {\n      storeOS = db1.createObjectStore('lastSyncDate', {\n        keyPath: 'id',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('language')) {\n      storeOS = db1.createObjectStore('language', {\n        keyPath: 'languageId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('country')) {\n      storeOS = db1.createObjectStore('country', {\n        keyPath: 'countryId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('currency')) {\n      storeOS = db1.createObjectStore('currency', {\n        keyPath: 'currencyId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('unit')) {\n      storeOS = db1.createObjectStore('unit', {\n        keyPath: 'unitId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('unitType')) {\n      storeOS = db1.createObjectStore('unitType', {\n        keyPath: 'unitTypeId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('organisation')) {\n      storeOS = db1.createObjectStore('organisation', {\n        keyPath: 'organisationId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('healthArea')) {\n      storeOS = db1.createObjectStore('healthArea', {\n        keyPath: 'healthAreaId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('region')) {\n      storeOS = db1.createObjectStore('region', {\n        keyPath: 'regionId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('fundingSource')) {\n      storeOS = db1.createObjectStore('fundingSource', {\n        keyPath: 'fundingSourceId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('subFundingSource')) {\n      storeOS = db1.createObjectStore('subFundingSource', {\n        keyPath: 'subFundingSourceId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('product')) {\n      storeOS = db1.createObjectStore('product', {\n        keyPath: 'productId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('productCategory')) {\n      storeOS = db1.createObjectStore('productCategory', {\n        keyPath: 'productCategoryId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('dataSource')) {\n      storeOS = db1.createObjectStore('dataSource', {\n        keyPath: 'dataSourceId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('dataSourceType')) {\n      storeOS = db1.createObjectStore('dataSourceType', {\n        keyPath: 'dataSourceTypeId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('shipmentStatus')) {\n      storeOS = db1.createObjectStore('shipmentStatus', {\n        keyPath: 'shipmentStatusId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n      storeOS = db1.createObjectStore('shipmentStatusAllowed', {\n        keyPath: 'shipmentStatusAllowedId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('manufacturer')) {\n      storeOS = db1.createObjectStore('manufacturer', {\n        keyPath: 'manufacturerId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('logisticsUnit')) {\n      storeOS = db1.createObjectStore('logisticsUnit', {\n        keyPath: 'logisticsUnitId',\n        autoIncrement: true\n      });\n    }\n\n    if (!db1.objectStoreNames.contains('planningUnit')) {\n      storeOS = db1.createObjectStore('planningUnit', {\n        keyPath: 'planningUnitId',\n        autoIncrement: true\n      });\n    }\n  };\n\n  openRequest.onsuccess = function (e) {\n    db1 = e.target.result;\n    return db1;\n  };\n}\nexport function saveProgram(json) {\n  var db1;\n  var openRequest = indexedDB.open('fasp', 1);\n\n  openRequest.onsuccess = function (e) {\n    console.log('in success');\n    db1 = e.target.result;\n    var transaction = db1.transaction(['programData'], 'readwrite');\n    var program = transaction.objectStore('programData');\n    console.log(\"Transaction\", transaction);\n    console.log(\"db1\", db1);\n    console.log(\"program\", program); // var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(json), SECRET_KEY);\n    // var userBytes = CryptoJS.AES.decrypt(localStorage.getItem('curUser'), SECRET_KEY);\n    // var userId = userBytes.toString(CryptoJS.enc.Utf8);\n    // var item = {\n    //     id: json.programId + \"_v\" + json.programVersion + \"_uId_\" + userId,\n    //     programId: json.programId,\n    //     version: json.programVersion,\n    //     programName: (CryptoJS.AES.encrypt((json.label.labelEn), SECRET_KEY)).toString(),\n    //     programData: encryptedText.toString(),\n    //     userId: userId\n    // };\n    // console.log(item)\n\n    var putRequest = program.getAll();\n    console.log(\"putRequest\", putRequest);\n    return putRequest;\n  };\n}","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/CommonComponent/IndexedDbFunctions.js"],"names":["openRequest","indexedDB","open","getDatabase","db1","storeOS","onupgradeneeded","e","target","result","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","onsuccess","saveProgram","json","console","log","transaction","program","objectStore","putRequest","getAll"],"mappings":"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","sourcesContent":["// const db1=\"\";\nconst openRequest = indexedDB.open('fasp', 1);\nexport function getDatabase() {\n    var db1;\n    var storeOS;\n    \n    openRequest.onupgradeneeded = function (e) {\n        db1 = e.target.result;\n        if (!db1.objectStoreNames.contains('programData')) {\n            storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('lastSyncDate')) {\n            storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('language')) {\n            storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('country')) {\n            storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('currency')) {\n            storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('unit')) {\n            storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('unitType')) {\n            storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('organisation')) {\n            storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('healthArea')) {\n            storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('region')) {\n            storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('fundingSource')) {\n            storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('subFundingSource')) {\n            storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('product')) {\n            storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('productCategory')) {\n            storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('dataSource')) {\n            storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('dataSourceType')) {\n            storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('shipmentStatus')) {\n            storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n            storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('manufacturer')) {\n            storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('logisticsUnit')) {\n            storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n        }\n        if (!db1.objectStoreNames.contains('planningUnit')) {\n            storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n        }\n    };\n    openRequest.onsuccess = function (e) {\n        db1 = e.target.result;\n        return db1;\n    }\n}\n\nexport function saveProgram(json) {\n    var db1;\n    var openRequest = indexedDB.open('fasp', 1);\n    openRequest.onsuccess = function (e) {\n        console.log('in success')\n        db1 = e.target.result;\n        var transaction = db1.transaction(['programData'], 'readwrite');\n        var program = transaction.objectStore('programData');\n        console.log(\"Transaction\", transaction);\n        console.log(\"db1\", db1);\n        console.log(\"program\", program);\n        // var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(json), SECRET_KEY);\n        // var userBytes = CryptoJS.AES.decrypt(localStorage.getItem('curUser'), SECRET_KEY);\n        // var userId = userBytes.toString(CryptoJS.enc.Utf8);\n        // var item = {\n        //     id: json.programId + \"_v\" + json.programVersion + \"_uId_\" + userId,\n        //     programId: json.programId,\n        //     version: json.programVersion,\n        //     programName: (CryptoJS.AES.encrypt((json.label.labelEn), SECRET_KEY)).toString(),\n        //     programData: encryptedText.toString(),\n        //     userId: userId\n        // };\n        // console.log(item)\n        var putRequest = program.getAll();\n        console.log(\"putRequest\", putRequest);\n        return putRequest;\n    }\n}"]},"metadata":{},"sourceType":"module"}