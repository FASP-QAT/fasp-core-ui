{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/DataSourceType/UpdateDataSourceTypeComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js';\nimport i18n from '../../i18n';\nvar initialValues = {\n  label: ''\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    label: Yup.string().required(i18n.t('static.datasourcetype.datasourcetypetext'))\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar UpdateDataSourceTypeComponent = /*#__PURE__*/function (_Component) {\n  _inherits(UpdateDataSourceTypeComponent, _Component);\n\n  function UpdateDataSourceTypeComponent(props) {\n    var _this;\n\n    _classCallCheck(this, UpdateDataSourceTypeComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(UpdateDataSourceTypeComponent).call(this, props));\n    _this.state = {\n      dataSourceType: {\n        active: '',\n        label: {\n          label_en: '',\n          // spaLabel: '',\n          // freLabel: '',\n          // porLabel: '',\n          labelId: ''\n        }\n      }\n    };\n    _this.dataChange = _this.dataChange.bind(_assertThisInitialized(_this));\n    _this.Capitalize = _this.Capitalize.bind(_assertThisInitialized(_this));\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    initialValues = {\n      label: _this.props.location.state.dataSourceType.label.label_en\n    };\n    return _this;\n  }\n\n  _createClass(UpdateDataSourceTypeComponent, [{\n    key: \"dataChange\",\n    value: function dataChange(event) {\n      var dataSourceType = this.state.dataSourceType;\n\n      if (event.target.name === \"label\") {\n        dataSourceType.label.label_en = event.target.value;\n      } else if (event.target.name === \"active\") {\n        dataSourceType.active = event.target.id === \"active2\" ? false : true;\n      }\n\n      this.setState({\n        dataSourceType: dataSourceType\n      });\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        'label': true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('dataSourceTypeForm', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      AuthenticationService.setupAxiosInterceptors();\n      this.setState({\n        dataSourceType: this.props.location.state.dataSourceType\n      });\n    }\n  }, {\n    key: \"Capitalize\",\n    value: function Capitalize(str) {\n      var dataSourceType = this.state.dataSourceType;\n      dataSourceType.label.label_en = str.charAt(0).toUpperCase() + str.slice(1);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, i18n.t('static.datasourcetype.datasourcetypeedit')), ' '), React.createElement(Formik, {\n        initialValues: initialValues,\n        validate: validate(validationSchema),\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting,\n              setErrors = _ref.setErrors;\n          // alert(\"----\"+this.state);\n          // console.log(\"------IN SUBMIT------\" + this.state.country)\n          DataSourceTypeService.editDataSourceType(_this2.state.dataSourceType).then(function (response) {\n            if (response.data.status == \"Success\") {\n              _this2.props.history.push(\"/dataSourceType/listDataSourceType/\".concat(response.data.message));\n            } else {\n              _this2.setState({\n                message: response.data.message\n              });\n            }\n          }).catch(function (error) {\n            switch (error.message) {\n              case \"Network Error\":\n                _this2.setState({\n                  message: error.message\n                });\n\n                break;\n\n              default:\n                _this2.setState({\n                  message: error.response.data.message\n                });\n\n                break;\n            }\n          });\n        },\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"dataSourceTypeForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 187\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"label\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 188\n            },\n            __self: this\n          }, i18n.t('static.datasourcetype.datasourcetype')), React.createElement(Input, {\n            type: \"text\",\n            name: \"label\",\n            id: \"label\",\n            bsSize: \"sm\",\n            valid: !errors.label,\n            invalid: touched.label && !!errors.label,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n\n              _this2.Capitalize(e.target.value);\n            },\n            onBlur: handleBlur,\n            value: _this2.state.dataSourceType.label.label_en,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 189\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 199\n            },\n            __self: this\n          }, errors.label)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 202\n            },\n            __self: this\n          }, React.createElement(Label, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203\n            },\n            __self: this\n          }, i18n.t('static.common.status'), \"  \"), React.createElement(FormGroup, {\n            check: true,\n            inline: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204\n            },\n            __self: this\n          }, React.createElement(Input, {\n            className: \"form-check-input\",\n            type: \"radio\",\n            id: \"active1\",\n            name: \"active\",\n            value: true,\n            checked: _this2.state.dataSourceType.active === true,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            },\n            __self: this\n          }), React.createElement(Label, {\n            className: \"form-check-label\",\n            check: true,\n            htmlFor: \"inline-radio1\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 214\n            },\n            __self: this\n          }, i18n.t('static.common.active'))), React.createElement(FormGroup, {\n            check: true,\n            inline: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 220\n            },\n            __self: this\n          }, React.createElement(Input, {\n            className: \"form-check-input\",\n            type: \"radio\",\n            id: \"active2\",\n            name: \"active\",\n            value: false,\n            checked: _this2.state.dataSourceType.active === false,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 221\n            },\n            __self: this\n          }), React.createElement(Label, {\n            className: \"form-check-label\",\n            check: true,\n            htmlFor: \"inline-radio2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 230\n            },\n            __self: this\n          }, i18n.t('static.common.disabled'))))), React.createElement(CardFooter, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 238\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 239\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"reset\",\n            color: \"danger\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: _this2.cancelClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 240\n            },\n            __self: this\n          }, i18n.t('static.common.cancel')), React.createElement(Button, {\n            type: \"submit\",\n            color: \"success\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: function onClick() {\n              return _this2.touchAll(setTouched, errors);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 241\n            },\n            __self: this\n          }, i18n.t('static.common.submit')), \"\\xA0\")));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/dataSourceType/listDataSourceType/\" + \"Action Canceled\");\n    }\n  }]);\n\n  return UpdateDataSourceTypeComponent;\n}(Component);\n\nexport { UpdateDataSourceTypeComponent as default };","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/DataSourceType/UpdateDataSourceTypeComponent.jsx"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","FormText","InputGroup","InputGroupAddon","InputGroupText","AuthenticationService","Formik","Yup","DataSourceTypeService","i18n","initialValues","label","validationSchema","values","object","shape","string","required","t","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","UpdateDataSourceTypeComponent","props","state","dataSourceType","active","label_en","labelId","dataChange","bind","Capitalize","cancelClicked","location","event","target","name","value","id","setState","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","setupAxiosInterceptors","str","charAt","toUpperCase","slice","flexBasis","setSubmitting","setErrors","editDataSourceType","then","response","data","status","history","push","message","catch","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","e","touchAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js';\nimport i18n from '../../i18n'\n\nlet initialValues = {\n    label: ''\n}\n\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        label: Yup.string()\n            .required(i18n.t('static.datasourcetype.datasourcetypetext'))\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\n\n\nexport default class UpdateDataSourceTypeComponent extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceType:\n            {\n                active: '',\n\n                label: {\n                    label_en: '',\n                    // spaLabel: '',\n                    // freLabel: '',\n                    // porLabel: '',\n                    labelId: '',\n                }\n            }\n        }\n\n        this.dataChange = this.dataChange.bind(this);\n        this.Capitalize = this.Capitalize.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        initialValues = {\n            label: this.props.location.state.dataSourceType.label.label_en\n        }\n    }\n\n    dataChange(event) {\n        let { dataSourceType } = this.state\n\n        if (event.target.name === \"label\") {\n            dataSourceType.label.label_en = event.target.value\n        }\n\n        else if (event.target.name === \"active\") {\n            dataSourceType.active = event.target.id === \"active2\" ? false : true\n        }\n\n\n        this.setState(\n            {\n                dataSourceType\n            }\n        )\n\n    };\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            'label': true\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('dataSourceTypeForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n\n        this.setState({\n            dataSourceType: this.props.location.state.dataSourceType\n        });\n    }\n\n    Capitalize(str) {\n        let { dataSourceType } = this.state\n        dataSourceType.label.label_en = str.charAt(0).toUpperCase() + str.slice(1)\n    }\n\n    render() {\n\n        return (\n            <div className=\"animated fadeIn\">\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>{i18n.t('static.datasourcetype.datasourcetypeedit')}</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                initialValues={initialValues}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {\n\n                                    // alert(\"----\"+this.state);\n                                    // console.log(\"------IN SUBMIT------\" + this.state.country)\n                                    DataSourceTypeService.editDataSourceType(this.state.dataSourceType)\n                                        .then(response => {\n                                            if (response.data.status == \"Success\") {\n                                                this.props.history.push(`/dataSourceType/listDataSourceType/${response.data.message}`)\n                                            } else {\n                                                this.setState({\n                                                    message: response.data.message\n                                                })\n                                            }\n                                        })\n                                        .catch(\n                                            error => {\n                                                switch (error.message) {\n                                                    case \"Network Error\":\n                                                        this.setState({\n                                                            message: error.message\n                                                        })\n                                                        break\n                                                    default:\n                                                        this.setState({\n                                                            message: error.response.data.message\n                                                        })\n                                                        break\n                                                }\n                                            }\n                                        );\n                                }}\n\n\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='dataSourceTypeForm'>\n                                                <CardBody>\n                                                    <FormGroup>\n                                                        <Label for=\"label\">{i18n.t('static.datasourcetype.datasourcetype')}</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"label\"\n                                                            id=\"label\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.label}\n                                                            invalid={touched.label && !!errors.label}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e); this.Capitalize(e.target.value) }}\n                                                            onBlur={handleBlur}\n                                                            value={this.state.dataSourceType.label.label_en}\n                                                            required />\n                                                        <FormFeedback>{errors.label}</FormFeedback>\n                                                    </FormGroup>\n\n                                                    <FormGroup>\n                                                        <Label>{i18n.t('static.common.status')}  </Label>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active1\"\n                                                                name=\"active\"\n                                                                value={true}\n                                                                checked={this.state.dataSourceType.active === true}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-radio1\">\n                                                                {i18n.t('static.common.active')}\n                                                                </Label>\n                                                        </FormGroup>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active2\"\n                                                                name=\"active\"\n                                                                value={false}\n                                                                checked={this.state.dataSourceType.active === false}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-radio2\">\n                                                                {i18n.t('static.common.disabled')}\n                                                                </Label>\n                                                        </FormGroup>\n                                                    </FormGroup>\n                                                </CardBody>\n                                                <CardFooter>\n                                                    <FormGroup>\n                                                    <Button type=\"reset\" color=\"danger\" className=\"mr-1 float-right\"size=\"sm\" onClick={this.cancelClicked}>{i18n.t('static.common.cancel')}</Button>\n                                                    <Button type=\"submit\" color=\"success\" className=\"mr-1 float-right\"size=\"sm\" onClick={() => this.touchAll(setTouched, errors)}>{i18n.t('static.common.submit')}</Button>\n                                                    \n                                                       \n                                                        &nbsp;\n                                                       \n                                                    </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n\n                                        )} />\n\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n    cancelClicked() {\n        this.props.history.push(`/dataSourceType/listDataSourceType/` + \"Action Canceled\")\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}