{"ast":null,"code":"var _this = this;\n\nimport * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport * as SqlWeb from \"sqlweb\";\nimport { Query } from \"sqlweb\"; // eslint-disable-next-line import/no-webpack-loader-syntax\n// This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\n\nJsStore.useSqlWeb(SqlWeb);\nexport var idbCon = new JsStore.Instance();\nexport var dbname = 'fasp';\n\nvar getDatabase = function getDatabase() {\n  var tblStudent = {\n    name: 'programData',\n    columns: {\n      id: {\n        primaryKey: true\n      },\n      programId: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      },\n      version: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      },\n      programName: {\n        notNull: true,\n        dataType: DATA_TYPE.String\n      },\n      programData: {\n        dataType: DATA_TYPE.String,\n        notNull: true\n      },\n      userId: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      }\n    }\n  };\n  var dataBase = {\n    name: dbname,\n    tables: [tblStudent]\n  };\n  return dataBase;\n};\n\nexport var getDbQuery = function getDbQuery() {\n  var db = \"DEFINE DB fasp;\";\n  var tblStudentQry = \"DEFINE TABLE programData(\\n        id PRIMARYKEY,\\n        programId NUMBER NOTNULL ,\\n        version NOTNULL NUMBER,\\n        programName NOTNULL STRING,\\n        programData STRING NOTNULL,\\n        userId NUMBER NOTNULL\\n    )\";\n  var dbCreatequery = db + tblStudentQry;\n  return dbCreatequery;\n};\nexport var initJsStore = function initJsStore() {\n  var qry = getDbQuery();\n  console.log(\"this\", _this);\n  connection.runSql(qry).then(function () {\n    console.log('db initiated');\n  }).catch(function (ex) {\n    console.error(ex);\n  });\n};\nexport function saveProgram(programJson) {\n  var qry = new Query(\"insert into programData \\n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\\n    \");\n  qry.map(\"@id\", programJson.id);\n  qry.map(\"@programId\", programJson.programId);\n  qry.map(\"@version\", programJson.version);\n  qry.map(\"@programName\", programJson.programName);\n  qry.map(\"@programData\", programJson.programData);\n  qry.map(\"@userId\", programJson.userId); // below code is equaivalent of above - another way of using insert\n  // const qry = new Query(`insert into ${this.tableName} values='@values' return`);\n  // qry.map('@values', [student]);\n\n  return this.connection.runSql(qry);\n}","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/CommonComponent/JsStoreFunctions.js"],"names":["JsStore","IDataBase","DATA_TYPE","ITable","SqlWeb","Query","useSqlWeb","idbCon","Instance","dbname","getDatabase","tblStudent","name","columns","id","primaryKey","programId","notNull","dataType","Number","version","programName","String","programData","userId","dataBase","tables","getDbQuery","db","tblStudentQry","dbCreatequery","initJsStore","qry","console","log","connection","runSql","then","catch","ex","error","saveProgram","programJson","map"],"mappings":"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","sourcesContent":["import * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport * as SqlWeb from \"sqlweb\";\nimport {\n    Query\n} from \"sqlweb\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\n\n\n// This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\nJsStore.useSqlWeb(SqlWeb);\nexport const idbCon = new JsStore.Instance();\nexport const dbname = 'fasp';\n\nconst getDatabase = () => {\n    const tblStudent = {\n        name: 'programData',\n        columns: {\n            id: {\n                primaryKey: true\n            },\n            programId: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            },\n            version: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            },\n            programName: {\n                notNull: true,\n                dataType: DATA_TYPE.String\n            },\n            programData: {\n                dataType: DATA_TYPE.String,\n                notNull: true\n            },\n            userId: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            }\n        }\n    };\n    const dataBase = {\n        name: dbname,\n        tables: [tblStudent]\n    };\n    return dataBase;\n};\n\nexport const getDbQuery = () => {\n    const db = `DEFINE DB fasp;`;\n    const tblStudentQry = `DEFINE TABLE programData(\n        id PRIMARYKEY,\n        programId NUMBER NOTNULL ,\n        version NOTNULL NUMBER,\n        programName NOTNULL STRING,\n        programData STRING NOTNULL,\n        userId NUMBER NOTNULL\n    )`\n    const dbCreatequery = db + tblStudentQry;\n    return dbCreatequery;\n}\n\nexport const initJsStore = () => {\n    const qry = getDbQuery();\n    console.log(\"this\",this);\n    connection.runSql(qry).then(function () {\n        console.log('db initiated');\n    }).catch(function (ex) {\n        console.error(ex);\n    })\n};\n\nexport function saveProgram(programJson) {\n    const qry = new Query(`insert into programData \n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n    `);\n    qry.map(\"@id\", programJson.id);\n    qry.map(\"@programId\", programJson.programId);\n    qry.map(\"@version\", programJson.version);\n    qry.map(\"@programName\", programJson.programName);\n    qry.map(\"@programData\", programJson.programData);\n    qry.map(\"@userId\", programJson.userId);\n\n    // below code is equaivalent of above - another way of using insert\n    // const qry = new Query(`insert into ${this.tableName} values='@values' return`);\n    // qry.map('@values', [student]);\n\n    return this.connection.runSql(qry);\n\n}"]},"metadata":{},"sourceType":"module"}