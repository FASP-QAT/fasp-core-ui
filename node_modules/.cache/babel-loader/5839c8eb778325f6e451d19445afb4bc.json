{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  /**\n   * True if this is running in Nodejs, will be undefined in a browser.\n   * In a browser, browserify won't include this file and the whole module\n   * will be resolved an empty object.\n   */\n  isNode: typeof Buffer !== \"undefined\",\n\n  /**\n   * Create a new nodejs Buffer from an existing content.\n   * @param {Object} data the data to pass to the constructor.\n   * @param {String} encoding the encoding to use.\n   * @return {Buffer} a new Buffer.\n   */\n  newBufferFrom: function newBufferFrom(data, encoding) {\n    if (Buffer.from && Buffer.from !== Uint8Array.from) {\n      return Buffer.from(data, encoding);\n    } else {\n      if (typeof data === \"number\") {\n        // Safeguard for old Node.js versions. On newer versions,\n        // Buffer.from(number) / Buffer(number, encoding) already throw.\n        throw new Error(\"The \\\"data\\\" argument must not be a number\");\n      }\n\n      return new Buffer(data, encoding);\n    }\n  },\n\n  /**\n   * Create a new nodejs Buffer with the specified size.\n   * @param {Integer} size the size of the buffer.\n   * @return {Buffer} a new Buffer.\n   */\n  allocBuffer: function allocBuffer(size) {\n    if (Buffer.alloc) {\n      return Buffer.alloc(size);\n    } else {\n      var buf = new Buffer(size);\n      buf.fill(0);\n      return buf;\n    }\n  },\n\n  /**\n   * Find out if an object is a Buffer.\n   * @param {Object} b the object to test.\n   * @return {Boolean} true if the object is a Buffer, false otherwise.\n   */\n  isBuffer: function isBuffer(b) {\n    return Buffer.isBuffer(b);\n  },\n  isStream: function isStream(obj) {\n    return obj && typeof obj.on === \"function\" && typeof obj.pause === \"function\" && typeof obj.resume === \"function\";\n  }\n};","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/node_modules/jszip/lib/nodejsUtils.js"],"names":["module","exports","isNode","Buffer","newBufferFrom","data","encoding","from","Uint8Array","Error","allocBuffer","size","alloc","buf","fill","isBuffer","b","isStream","obj","on","pause","resume"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACb;;;;;AAKAC,EAAAA,MAAM,EAAG,OAAOC,MAAP,KAAkB,WANd;;AAOb;;;;;;AAMAC,EAAAA,aAAa,EAAE,uBAASC,IAAT,EAAeC,QAAf,EAAyB;AACpC,QAAIH,MAAM,CAACI,IAAP,IAAeJ,MAAM,CAACI,IAAP,KAAgBC,UAAU,CAACD,IAA9C,EAAoD;AAChD,aAAOJ,MAAM,CAACI,IAAP,CAAYF,IAAZ,EAAkBC,QAAlB,CAAP;AACH,KAFD,MAEO;AACH,UAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC1B;AACA;AACA,cAAM,IAAII,KAAJ,CAAU,4CAAV,CAAN;AACH;;AACD,aAAO,IAAIN,MAAJ,CAAWE,IAAX,EAAiBC,QAAjB,CAAP;AACH;AACJ,GAxBY;;AAyBb;;;;;AAKAI,EAAAA,WAAW,EAAE,qBAAUC,IAAV,EAAgB;AACzB,QAAIR,MAAM,CAACS,KAAX,EAAkB;AACd,aAAOT,MAAM,CAACS,KAAP,CAAaD,IAAb,CAAP;AACH,KAFD,MAEO;AACH,UAAIE,GAAG,GAAG,IAAIV,MAAJ,CAAWQ,IAAX,CAAV;AACAE,MAAAA,GAAG,CAACC,IAAJ,CAAS,CAAT;AACA,aAAOD,GAAP;AACH;AACJ,GAtCY;;AAuCb;;;;;AAKAE,EAAAA,QAAQ,EAAG,kBAASC,CAAT,EAAW;AAClB,WAAOb,MAAM,CAACY,QAAP,CAAgBC,CAAhB,CAAP;AACH,GA9CY;AAgDbC,EAAAA,QAAQ,EAAG,kBAAUC,GAAV,EAAe;AACtB,WAAOA,GAAG,IACN,OAAOA,GAAG,CAACC,EAAX,KAAkB,UADf,IAEH,OAAOD,GAAG,CAACE,KAAX,KAAqB,UAFlB,IAGH,OAAOF,GAAG,CAACG,MAAX,KAAsB,UAH1B;AAIH;AArDY,CAAjB","sourcesContent":["'use strict';\n\nmodule.exports = {\n    /**\n     * True if this is running in Nodejs, will be undefined in a browser.\n     * In a browser, browserify won't include this file and the whole module\n     * will be resolved an empty object.\n     */\n    isNode : typeof Buffer !== \"undefined\",\n    /**\n     * Create a new nodejs Buffer from an existing content.\n     * @param {Object} data the data to pass to the constructor.\n     * @param {String} encoding the encoding to use.\n     * @return {Buffer} a new Buffer.\n     */\n    newBufferFrom: function(data, encoding) {\n        if (Buffer.from && Buffer.from !== Uint8Array.from) {\n            return Buffer.from(data, encoding);\n        } else {\n            if (typeof data === \"number\") {\n                // Safeguard for old Node.js versions. On newer versions,\n                // Buffer.from(number) / Buffer(number, encoding) already throw.\n                throw new Error(\"The \\\"data\\\" argument must not be a number\");\n            }\n            return new Buffer(data, encoding);\n        }\n    },\n    /**\n     * Create a new nodejs Buffer with the specified size.\n     * @param {Integer} size the size of the buffer.\n     * @return {Buffer} a new Buffer.\n     */\n    allocBuffer: function (size) {\n        if (Buffer.alloc) {\n            return Buffer.alloc(size);\n        } else {\n            var buf = new Buffer(size);\n            buf.fill(0);\n            return buf;\n        }\n    },\n    /**\n     * Find out if an object is a Buffer.\n     * @param {Object} b the object to test.\n     * @return {Boolean} true if the object is a Buffer, false otherwise.\n     */\n    isBuffer : function(b){\n        return Buffer.isBuffer(b);\n    },\n\n    isStream : function (obj) {\n        return obj &&\n            typeof obj.on === \"function\" &&\n            typeof obj.pause === \"function\" &&\n            typeof obj.resume === \"function\";\n    }\n};\n"]},"metadata":{},"sourceType":"script"}