{"ast":null,"code":"// import * as JsStore from 'jsstore';\n// import { IDataBase, DATA_TYPE, ITable } from 'jsstore';\n// import * as SqlWeb from \"sqlweb\";\n// // import {\n// //     Query\n// // } from \"sqlweb\";\n// import CryptoJS from 'crypto-js'\n// import { SECRET_KEY } from '../Constants.js'\n// import moment from \"moment\";\n// // This will ensure that we are using only one instance. \n// // Otherwise due to multiple instance multiple worker will be created.\n// JsStore.useSqlWeb(SqlWeb);\n// export const idbCon = new JsStore.Instance();\n// export const dbname = 'fasp';\n// const getDatabase = () => {\n//     const tblStudent = {\n//         name: 'programData',\n//         columns: {\n//             id: {\n//                 primaryKey: true\n//             },\n//             programId: {\n//                 notNull: true,\n//                 dataType: DATA_TYPE.Number\n//             },\n//             version: {\n//                 notNull: true,\n//                 dataType: DATA_TYPE.Number\n//             },\n//             programName: {\n//                 notNull: true,\n//                 dataType: DATA_TYPE.String\n//             },\n//             programData: {\n//                 dataType: DATA_TYPE.String,\n//                 notNull: true\n//             },\n//             userId: {\n//                 notNull: true,\n//                 dataType: DATA_TYPE.Number\n//             }\n//         }\n//     };\n//     const dataBase = {\n//         name: dbname,\n//         tables: [tblStudent]\n//     };\n//     return dataBase;\n// };\n// export const getDbQuery = () => {\n//     const db = `DEFINE DB fasp;`;\n//     const tblStudentQry = `DEFINE TABLE programData(\n//         id PRIMARYKEY,\n//         programId NUMBER NOTNULL ,\n//         version NOTNULL NUMBER,\n//         programName NOTNULL STRING,\n//         programData STRING NOTNULL,\n//         userId NUMBER NOTNULL\n//     );`\n//     const lastSyncDate = `DEFINE TABLE lastSyncDate(\n//         id PRIMARYKEY,\n//         lastSyncDate STRING\n//     );`\n//     const currency = `DEFINE TABLE currency (\n//     currencyId PRIMARYKEY,\n//     conversionRateToUsd number,\n//     currencyCode STRING,\n//     currencySymbol STRING,\n//     label object\n//      );`\n//     const dataSource = `DEFINE TABLE dataSource (\n//         dataSourceId PRIMARYKEY,\n//         active STRING,\n//         dataSourceType object,\n//         label object\n//          );`\n//     const dataSourceType = `DEFINE TABLE dataSourceType (\n//             dataSourceTypeId PRIMARYKEY,\n//             active STRING,\n//             label object\n//              );`\n//     const fundingSource = `DEFINE TABLE fundingSource (\n//                 fundingSourceId PRIMARYKEY,\n//                 active STRING,\n//                 label object,\n//                 realmId number\n//                  );`\n//     const healthArea = `DEFINE TABLE healthArea (\n//                     healthAreaId PRIMARYKEY,\n//                     active STRING,\n//                     label object,\n//                     realmId number\n//                      );`\n//     const lu = `DEFINE TABLE logisticsUnit (\n//         logisticsUnitId PRIMARYKEY,\n//         active STRING,\n//         heightQty number,\n//         heightUnit object,\n//         lengthQty number,\n//         lengthUnit object,\n//         manufacturer object,\n//         planningUnit object,\n//         qtyInEuroOne number,\n//         qtyInEuroTwo number,\n//         qtyOfPlanningUnits number,\n//         unit object,\n//         weightQty number,\n//         weightUnit object,\n//         widthQty number,\n//         widthUnit object,\n//         label object,\n//         realmId number\n//          );`\n//     const manufacturer = `DEFINE TABLE manufacturer (\n//         manufacturerId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         realmId number\n//          );`\n//     const organisation = `DEFINE TABLE organisation (\n//         organisationId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         realmId number\n//          );`\n//     const planningUnit = `DEFINE TABLE planningUnit (\n//         planningUnitId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         realmId number,\n//         price number,\n//         productId number,\n//         qtyOfForecastingUnits number,\n//         unit object\n//          );`\n//     const product = `DEFINE TABLE product (\n//         productId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         realmId number,\n//         forecastUnit object,\n//         genericLabel object,\n//         productCategory object\n//          );`\n//     const productCategory = `DEFINE TABLE productCategory (\n//         productCategoryId PRIMARYKEY,\n//         active STRING,\n//         label object\n//          );`\n//     const region = `DEFINE TABLE region (\n//         regionId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         realmId number,\n//         capacityCbm number\n//          );`\n//     const shipmentStatus = `DEFINE TABLE shipmentStatus (\n//         shipmentStatusId PRIMARYKEY,\n//         active STRING,\n//         label object\n//          );`\n//     const shipmentStatusAllowed = `DEFINE TABLE shipmentStatusAllowed (\n//         shipmentStatusAllowedId PRIMARYKEY,\n//         nextShipmentStatusId number,\n//         shipmentStatusId number\n//          );`\n//     const unit = `DEFINE TABLE unit (\n//         unitId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         unitCode string,\n//         unitType object\n//          );`\n//     const unitType = `DEFINE TABLE unitType (\n//         unitTypeId PRIMARYKEY,\n//         label object\n//          );`\n//     const subFundingSource = `DEFINE TABLE subFundingSource (\n//         subFundingSourceId PRIMARYKEY,\n//         label object,\n//         active STRING,\n//         fundingSource object,\n//         realmId number\n//          );`\n//     const country = `DEFINE TABLE country (\n//         countryId PRIMARYKEY,\n//         label object,\n//         active STRING,\n//         currency object,\n//         language object\n//          );`\n//     const language = `DEFINE TABLE language (\n//         languageId PRIMARYKEY,\n//         active STRING,\n//         languageName string\n//          );`\n//     const dbCreatequery = db + tblStudentQry + lastSyncDate + currency + dataSource +\n//         dataSourceType + fundingSource + healthArea\n//         + lu\n//         + manufacturer + organisation + planningUnit\n//         + product\n//         + productCategory\n//         + region\n//         + shipmentStatus + shipmentStatusAllowed\n//         + unit\n//         + unitType\n//         + subFundingSource + country + language;\n//     return dbCreatequery;\n// }\n// export const initJsStore = () => {\n//     const qry = getDbQuery();\n//     idbCon.runSql(qry).then(function () {\n//     }).catch(function (ex) {\n//         console.error(ex);\n//     })\n// };\n// export function saveProgram(programJson) {\n//     var curUser = 1;\n//     for (var i = 0; i < programJson.length; i++) {\n//         var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(programJson[i]), SECRET_KEY);\n//         var programName = CryptoJS.AES.encrypt(JSON.stringify(programJson[i].label), SECRET_KEY);\n//         const qry = new Query(`insert into programData \n//     values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n//     `);\n//         qry.map(\"@id\", programJson[i].programId + \"_v\" + programJson[i].programVersion + \"_uId_\" + curUser);\n//         qry.map(\"@programId\", programJson[i].programId);\n//         qry.map(\"@version\", programJson[i].programVersion);\n//         qry.map(\"@programName\", programName.toString());\n//         qry.map(\"@programData\", encryptedText.toString());\n//         qry.map(\"@userId\", curUser);\n//         idbCon.runSql(qry);\n//     }\n//     return 1;\n// }\n// export function getProgramDataByprogramIds(programIds) {\n//     const qry = new Query(`select * from programData where id In (${programIds})`);\n//     return idbCon.runSql(qry);\n// }\n// export function getProgramDataList() {\n//     console.log(\"in jsstore function program\")\n//     var curUser = 1;\n//     const qry = new Query(`select * from programData where userId=${curUser}`);\n//     console.log(\"after query build\");\n//     var result= idbCon.runSql(qry);\n//     console.log(\"result\",result+\"Moment\"+new Date());\n//     return result;\n// }\n// export function importProgram(programJson) {\n//     var curUser = 1;\n//     const qry = new Query(`insert into programData \n//     values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n//     `);\n//     qry.map(\"@id\", programJson.programId + \"_v\" + programJson.version + \"_uId_\" + curUser);\n//     qry.map(\"@programId\", programJson.programId);\n//     qry.map(\"@version\", programJson.version);\n//     qry.map(\"@programName\", programJson.programName);\n//     qry.map(\"@programData\", programJson.programData);\n//     qry.map(\"@userId\", curUser);\n//     idbCon.runSql(qry);\n//     return 1;\n// }\n// export function getLastSyncDateForApplicationMaster() {\n//     const qry = new Query(`select * from lastSyncDate where id=0`);\n//     return idbCon.runSql(qry);\n// }\n// export function syncCurrency(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].currencyId).concat(\",\");\n//         data[i] = {\n//             currencyId: json[i].currencyId,\n//             conversionRateToUsd: json[i].conversionRateToUsd,\n//             label: json[i].label,\n//             currencyCode: json[i].currencyCode,\n//             currencySymbol: json[i].currencySymbol\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM currency WHERE currencyId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into currency Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncDataSource(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].dataSourceId).concat(\",\");\n//         data[i] = {\n//             dataSourceId: json[i].dataSourceId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             dataSourceType: json[i].dataSourceType\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM dataSource WHERE dataSourceId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into dataSource Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncDataSourceType(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].dataSourceTypeId).concat(\",\");\n//         data[i] = {\n//             dataSourceTypeId: json[i].dataSourceTypeId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM dataSourceType WHERE dataSourceTypeId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into dataSourceType Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function getLastSyncDateForRealm(realmId) {\n//     const qry = new Query(`select * from lastSyncDate where id=${realmId}`);\n//     return idbCon.runSql(qry);\n// }\n// export function syncFundingSource(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].fundingSourceId).concat(\",\");\n//         data[i] = {\n//             fundingSourceId: json[i].fundingSourceId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM fundingSource WHERE fundingSourceId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into fundingSource Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncHealthArea(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].healthAreaId).concat(\",\");\n//         data[i] = {\n//             healthAreaId: json[i].healthAreaId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM healthArea WHERE healthAreaId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into healthArea Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncLogisticsUnit(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].logisticsUnitId).concat(\",\");\n//         data[i] = {\n//             logisticsUnitId: json[i].logisticsUnitId,\n//             active: (json[i].active).toString(),\n//             heightQty: json[i].heightQty,\n//             heightUnit: json[i].heightUnit,\n//             lengthQty: json[i].lengthQty,\n//             lengthUnit: json[i].lengthUnit,\n//             manufacturer: json[i].manufacturer,\n//             planningUnit: json[i].planningUnit,\n//             qtyInEuroOne: json[i].qtyInEuro1,\n//             qtyInEuroTwo: json[i].qtyInEuro2,\n//             qtyOfPlanningUnits: json[i].qtyOfPlanningUnits,\n//             unit: json[i].unit,\n//             weightQty: json[i].weightQty,\n//             weightUnit: json[i].weightUnit,\n//             widthQty: json[i].widthQty,\n//             widthUnit: json[i].widthUnit,\n//             label: json[i].label,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM logisticsUnit WHERE logisticsUnitId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into logisticsUnit Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncManufacturer(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].manufacturerId).concat(\",\");\n//         data[i] = {\n//             manufacturerId: json[i].manufacturerId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM manufacturer WHERE manufacturerId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into manufacturer Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncOrganisation(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].organisationId).concat(\",\");\n//         data[i] = {\n//             organisationId: json[i].organisationId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         console.log(\"delete in str org\", deleteInStr);\n//         var qry1 = new SqlWeb.Query(`DELETE FROM organisation WHERE organisationId IN (${deleteInStr})`)\n//         console.log(\"qry1\", qry1);\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into organisation Values='@values'\");\n//     console.log(\"Organisation qry\", qry)\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncPlanningUnit(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].planningUnitId).concat(\",\");\n//         data[i] = {\n//             planningUnitId: json[i].planningUnitId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId,\n//             productId: json[i].productId,\n//             price: json[i].price,\n//             qtyOfForecastingUnits: json[i].qtyOfForecastingUnits,\n//             unit: json[i].unit\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM planningUnit WHERE planningUnitId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into planningUnit Values='@values'\");\n//     qry.map(\"@values\", data);\n//     console.log(\"before planning unit\")\n//     var result = idbCon.runSql(qry);\n//     console.log(\"result\", result);\n//     return result;\n// }\n// export function syncProduct(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].productId).concat(\",\");\n//         data[i] = {\n//             productId: json[i].productId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId,\n//             forecastUnit: json[i].forecastUnit,\n//             genericLabel: json[i].genericLabel,\n//             productCategory: json[i].productCategory\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM product WHERE productId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into product Values='@values'\");\n//     qry.map(\"@values\", data);\n//     console.log(\"before product\")\n//     return idbCon.runSql(qry);\n// }\n// export function syncProductCategory(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].productCategoryId).concat(\",\");\n//         data[i] = {\n//             productCategoryId: json[i].productCategoryId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM productCategory WHERE productCategoryId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into productCategory Values='@values'\");\n//     qry.map(\"@values\", data);\n//     console.log(\"before pc\")\n//     return idbCon.runSql(qry);\n// }\n// export function syncRegion(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].regionId).concat(\",\");\n//         data[i] = {\n//             regionId: json[i].regionId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId,\n//             capacityCbm: json[i].capacityCbm\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM region WHERE regionId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into region Values='@values'\");\n//     qry.map(\"@values\", data);\n//     console.log(\"before region\")\n//     return idbCon.runSql(qry);\n// }\n// export function syncShipmentStatus(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].shipmentStatusId).concat(\",\");\n//         data[i] = {\n//             shipmentStatusId: json[i].shipmentStatusId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM shipmentStatus WHERE shipmentStatusId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into shipmentStatus Values='@values'\");\n//     qry.map(\"@values\", data);\n//     console.log(\"before ss\")\n//     return idbCon.runSql(qry);\n// }\n// export function syncShipmentStatusAllowed(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].shipmentStatusAllowedId).concat(\",\");\n//         data[i] = {\n//             nextShipmentStatusId: json[i].nextShipmentStatusId,\n//             shipmentStatusAllowedId: json[i].shipmentStatusAllowedId,\n//             shipmentStatusId: json[i].shipmentStatusId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM shipmentStatusAllowed WHERE shipmentStatusAllowedId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into shipmentStatusAllowed Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncUnit(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].unitId).concat(\",\");\n//         data[i] = {\n//             unitId: json[i].unitId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             unitCode: json[i].unitCode,\n//             unitType: json[i].unitType\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM unit WHERE unitId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into unit Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncUnitType(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].unitTypeId).concat(\",\");\n//         data[i] = {\n//             unitTypeId: json[i].unitTypeId,\n//             label: json[i].label\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM unitType WHERE unitTypeId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into unitType Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncSubFundingSource(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].subFundingSourceId).concat(\",\");\n//         data[i] = {\n//             subFundingSourceId: json[i].subFundingSourceId,\n//             label: json[i].label,\n//             active: (json[i].active).toString(),\n//             fundingSource: json[i].fundingSource,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM subFundingSource WHERE subFundingSourceId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into subFundingSource Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncCountry(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].countryId).concat(\",\");\n//         data[i] = {\n//             countryId: json[i].countryId,\n//             label: json[i].label,\n//             active: (json[i].active).toString(),\n//             currency: json[i].currency,\n//             language: json[i].language\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM country WHERE countryId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into country Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function syncLanguage(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].languageId).concat(\",\");\n//         data[i] = {\n//             languageId: json[i].languageId,\n//             languageName: json[i].languageName,\n//             active: (json[i].active).toString()\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM language WHERE languageId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into language Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n// export function updateLastSyncDate(lastSyncDate, realmId) {\n//     var qry = new SqlWeb.Query(`DELETE FROM lastSyncDate WHERE id IN (0,${realmId})`);\n//     idbCon.runSql(qry);\n//     var data = []\n//     data[0] = {\n//         id: 0,\n//         lastSyncDate: lastSyncDate\n//     }\n//     data[1] = {\n//         id: realmId,\n//         lastSyncDate: lastSyncDate\n//     }\n//     var qry1 = new SqlWeb.Query(\"insert into lastSyncDate Values='@values'\");\n//     qry1.map(\"@values\", data);\n//     return idbCon.runSql(qry1);\n// }\n// export function getProductCategoryList() {\n//     const qry = new Query(`select * from productCategory where active='true'`);\n//     // console.log\n//     var result = idbCon.runSql(qry);\n//     console.log(\"Result=======\", result);\n//     return result;\n// }\n// export function getProductListByProductCategory(categoryId) {\n//     const qry = new Query(`select * from product where active='true'`);\n//     console.log(qry)\n//     var result = idbCon.runSql(qry);\n//     console.log(\"Result=======\", result);\n//     return result;\n// }","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/CommonComponent/JsStoreFunctions.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import * as JsStore from 'jsstore';\n// import { IDataBase, DATA_TYPE, ITable } from 'jsstore';\n// import * as SqlWeb from \"sqlweb\";\n// // import {\n// //     Query\n// // } from \"sqlweb\";\n// import CryptoJS from 'crypto-js'\n// import { SECRET_KEY } from '../Constants.js'\n// import moment from \"moment\";\n// // This will ensure that we are using only one instance. \n// // Otherwise due to multiple instance multiple worker will be created.\n// JsStore.useSqlWeb(SqlWeb);\n// export const idbCon = new JsStore.Instance();\n// export const dbname = 'fasp';\n\n// const getDatabase = () => {\n//     const tblStudent = {\n//         name: 'programData',\n//         columns: {\n//             id: {\n//                 primaryKey: true\n//             },\n//             programId: {\n//                 notNull: true,\n//                 dataType: DATA_TYPE.Number\n//             },\n//             version: {\n//                 notNull: true,\n//                 dataType: DATA_TYPE.Number\n//             },\n//             programName: {\n//                 notNull: true,\n//                 dataType: DATA_TYPE.String\n//             },\n//             programData: {\n//                 dataType: DATA_TYPE.String,\n//                 notNull: true\n//             },\n//             userId: {\n//                 notNull: true,\n//                 dataType: DATA_TYPE.Number\n//             }\n//         }\n//     };\n//     const dataBase = {\n//         name: dbname,\n//         tables: [tblStudent]\n//     };\n//     return dataBase;\n// };\n\n// export const getDbQuery = () => {\n//     const db = `DEFINE DB fasp;`;\n//     const tblStudentQry = `DEFINE TABLE programData(\n//         id PRIMARYKEY,\n//         programId NUMBER NOTNULL ,\n//         version NOTNULL NUMBER,\n//         programName NOTNULL STRING,\n//         programData STRING NOTNULL,\n//         userId NUMBER NOTNULL\n//     );`\n//     const lastSyncDate = `DEFINE TABLE lastSyncDate(\n//         id PRIMARYKEY,\n//         lastSyncDate STRING\n//     );`\n//     const currency = `DEFINE TABLE currency (\n//     currencyId PRIMARYKEY,\n//     conversionRateToUsd number,\n//     currencyCode STRING,\n//     currencySymbol STRING,\n//     label object\n//      );`\n//     const dataSource = `DEFINE TABLE dataSource (\n//         dataSourceId PRIMARYKEY,\n//         active STRING,\n//         dataSourceType object,\n//         label object\n//          );`\n//     const dataSourceType = `DEFINE TABLE dataSourceType (\n//             dataSourceTypeId PRIMARYKEY,\n//             active STRING,\n//             label object\n//              );`\n\n//     const fundingSource = `DEFINE TABLE fundingSource (\n//                 fundingSourceId PRIMARYKEY,\n//                 active STRING,\n//                 label object,\n//                 realmId number\n//                  );`\n\n//     const healthArea = `DEFINE TABLE healthArea (\n//                     healthAreaId PRIMARYKEY,\n//                     active STRING,\n//                     label object,\n//                     realmId number\n//                      );`\n\n//     const lu = `DEFINE TABLE logisticsUnit (\n//         logisticsUnitId PRIMARYKEY,\n//         active STRING,\n//         heightQty number,\n//         heightUnit object,\n//         lengthQty number,\n//         lengthUnit object,\n//         manufacturer object,\n//         planningUnit object,\n//         qtyInEuroOne number,\n//         qtyInEuroTwo number,\n//         qtyOfPlanningUnits number,\n//         unit object,\n//         weightQty number,\n//         weightUnit object,\n//         widthQty number,\n//         widthUnit object,\n//         label object,\n//         realmId number\n//          );`\n\n//     const manufacturer = `DEFINE TABLE manufacturer (\n//         manufacturerId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         realmId number\n//          );`\n\n//     const organisation = `DEFINE TABLE organisation (\n//         organisationId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         realmId number\n//          );`\n\n//     const planningUnit = `DEFINE TABLE planningUnit (\n//         planningUnitId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         realmId number,\n//         price number,\n//         productId number,\n//         qtyOfForecastingUnits number,\n//         unit object\n//          );`\n\n//     const product = `DEFINE TABLE product (\n//         productId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         realmId number,\n//         forecastUnit object,\n//         genericLabel object,\n//         productCategory object\n//          );`\n\n//     const productCategory = `DEFINE TABLE productCategory (\n//         productCategoryId PRIMARYKEY,\n//         active STRING,\n//         label object\n//          );`\n\n//     const region = `DEFINE TABLE region (\n//         regionId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         realmId number,\n//         capacityCbm number\n//          );`\n\n//     const shipmentStatus = `DEFINE TABLE shipmentStatus (\n//         shipmentStatusId PRIMARYKEY,\n//         active STRING,\n//         label object\n//          );`\n\n//     const shipmentStatusAllowed = `DEFINE TABLE shipmentStatusAllowed (\n//         shipmentStatusAllowedId PRIMARYKEY,\n//         nextShipmentStatusId number,\n//         shipmentStatusId number\n//          );`\n\n//     const unit = `DEFINE TABLE unit (\n//         unitId PRIMARYKEY,\n//         active STRING,\n//         label object,\n//         unitCode string,\n//         unitType object\n//          );`\n\n//     const unitType = `DEFINE TABLE unitType (\n//         unitTypeId PRIMARYKEY,\n//         label object\n//          );`\n\n//     const subFundingSource = `DEFINE TABLE subFundingSource (\n//         subFundingSourceId PRIMARYKEY,\n//         label object,\n//         active STRING,\n//         fundingSource object,\n//         realmId number\n//          );`\n\n//     const country = `DEFINE TABLE country (\n//         countryId PRIMARYKEY,\n//         label object,\n//         active STRING,\n//         currency object,\n//         language object\n//          );`\n\n//     const language = `DEFINE TABLE language (\n//         languageId PRIMARYKEY,\n//         active STRING,\n//         languageName string\n//          );`\n\n//     const dbCreatequery = db + tblStudentQry + lastSyncDate + currency + dataSource +\n//         dataSourceType + fundingSource + healthArea\n//         + lu\n//         + manufacturer + organisation + planningUnit\n//         + product\n//         + productCategory\n//         + region\n//         + shipmentStatus + shipmentStatusAllowed\n//         + unit\n//         + unitType\n//         + subFundingSource + country + language;\n//     return dbCreatequery;\n// }\n\n// export const initJsStore = () => {\n//     const qry = getDbQuery();\n//     idbCon.runSql(qry).then(function () {\n//     }).catch(function (ex) {\n//         console.error(ex);\n//     })\n// };\n\n// export function saveProgram(programJson) {\n//     var curUser = 1;\n//     for (var i = 0; i < programJson.length; i++) {\n//         var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(programJson[i]), SECRET_KEY);\n//         var programName = CryptoJS.AES.encrypt(JSON.stringify(programJson[i].label), SECRET_KEY);\n//         const qry = new Query(`insert into programData \n//     values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n//     `);\n//         qry.map(\"@id\", programJson[i].programId + \"_v\" + programJson[i].programVersion + \"_uId_\" + curUser);\n//         qry.map(\"@programId\", programJson[i].programId);\n//         qry.map(\"@version\", programJson[i].programVersion);\n//         qry.map(\"@programName\", programName.toString());\n//         qry.map(\"@programData\", encryptedText.toString());\n//         qry.map(\"@userId\", curUser);\n//         idbCon.runSql(qry);\n//     }\n//     return 1;\n// }\n\n// export function getProgramDataByprogramIds(programIds) {\n//     const qry = new Query(`select * from programData where id In (${programIds})`);\n//     return idbCon.runSql(qry);\n// }\n\n// export function getProgramDataList() {\n//     console.log(\"in jsstore function program\")\n//     var curUser = 1;\n//     const qry = new Query(`select * from programData where userId=${curUser}`);\n//     console.log(\"after query build\");\n//     var result= idbCon.runSql(qry);\n//     console.log(\"result\",result+\"Moment\"+new Date());\n//     return result;\n// }\n\n// export function importProgram(programJson) {\n//     var curUser = 1;\n//     const qry = new Query(`insert into programData \n//     values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n//     `);\n//     qry.map(\"@id\", programJson.programId + \"_v\" + programJson.version + \"_uId_\" + curUser);\n//     qry.map(\"@programId\", programJson.programId);\n//     qry.map(\"@version\", programJson.version);\n//     qry.map(\"@programName\", programJson.programName);\n//     qry.map(\"@programData\", programJson.programData);\n//     qry.map(\"@userId\", curUser);\n//     idbCon.runSql(qry);\n//     return 1;\n// }\n\n// export function getLastSyncDateForApplicationMaster() {\n//     const qry = new Query(`select * from lastSyncDate where id=0`);\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncCurrency(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].currencyId).concat(\",\");\n//         data[i] = {\n//             currencyId: json[i].currencyId,\n//             conversionRateToUsd: json[i].conversionRateToUsd,\n//             label: json[i].label,\n//             currencyCode: json[i].currencyCode,\n//             currencySymbol: json[i].currencySymbol\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM currency WHERE currencyId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into currency Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncDataSource(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].dataSourceId).concat(\",\");\n//         data[i] = {\n//             dataSourceId: json[i].dataSourceId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             dataSourceType: json[i].dataSourceType\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM dataSource WHERE dataSourceId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into dataSource Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n\n// export function syncDataSourceType(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].dataSourceTypeId).concat(\",\");\n//         data[i] = {\n//             dataSourceTypeId: json[i].dataSourceTypeId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM dataSourceType WHERE dataSourceTypeId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into dataSourceType Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n\n// export function getLastSyncDateForRealm(realmId) {\n//     const qry = new Query(`select * from lastSyncDate where id=${realmId}`);\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncFundingSource(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].fundingSourceId).concat(\",\");\n//         data[i] = {\n//             fundingSourceId: json[i].fundingSourceId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM fundingSource WHERE fundingSourceId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into fundingSource Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncHealthArea(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].healthAreaId).concat(\",\");\n//         data[i] = {\n//             healthAreaId: json[i].healthAreaId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM healthArea WHERE healthAreaId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into healthArea Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncLogisticsUnit(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].logisticsUnitId).concat(\",\");\n//         data[i] = {\n//             logisticsUnitId: json[i].logisticsUnitId,\n//             active: (json[i].active).toString(),\n//             heightQty: json[i].heightQty,\n//             heightUnit: json[i].heightUnit,\n//             lengthQty: json[i].lengthQty,\n//             lengthUnit: json[i].lengthUnit,\n//             manufacturer: json[i].manufacturer,\n//             planningUnit: json[i].planningUnit,\n//             qtyInEuroOne: json[i].qtyInEuro1,\n//             qtyInEuroTwo: json[i].qtyInEuro2,\n//             qtyOfPlanningUnits: json[i].qtyOfPlanningUnits,\n//             unit: json[i].unit,\n//             weightQty: json[i].weightQty,\n//             weightUnit: json[i].weightUnit,\n//             widthQty: json[i].widthQty,\n//             widthUnit: json[i].widthUnit,\n//             label: json[i].label,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM logisticsUnit WHERE logisticsUnitId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into logisticsUnit Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncManufacturer(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].manufacturerId).concat(\",\");\n//         data[i] = {\n//             manufacturerId: json[i].manufacturerId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM manufacturer WHERE manufacturerId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into manufacturer Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncOrganisation(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].organisationId).concat(\",\");\n//         data[i] = {\n//             organisationId: json[i].organisationId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         console.log(\"delete in str org\", deleteInStr);\n//         var qry1 = new SqlWeb.Query(`DELETE FROM organisation WHERE organisationId IN (${deleteInStr})`)\n//         console.log(\"qry1\", qry1);\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into organisation Values='@values'\");\n//     console.log(\"Organisation qry\", qry)\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncPlanningUnit(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].planningUnitId).concat(\",\");\n//         data[i] = {\n//             planningUnitId: json[i].planningUnitId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId,\n//             productId: json[i].productId,\n//             price: json[i].price,\n//             qtyOfForecastingUnits: json[i].qtyOfForecastingUnits,\n//             unit: json[i].unit\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM planningUnit WHERE planningUnitId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into planningUnit Values='@values'\");\n//     qry.map(\"@values\", data);\n//     console.log(\"before planning unit\")\n//     var result = idbCon.runSql(qry);\n//     console.log(\"result\", result);\n//     return result;\n// }\n\n// export function syncProduct(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].productId).concat(\",\");\n//         data[i] = {\n//             productId: json[i].productId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId,\n//             forecastUnit: json[i].forecastUnit,\n//             genericLabel: json[i].genericLabel,\n//             productCategory: json[i].productCategory\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM product WHERE productId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into product Values='@values'\");\n//     qry.map(\"@values\", data);\n//     console.log(\"before product\")\n//     return idbCon.runSql(qry);\n// }\n\n\n// export function syncProductCategory(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].productCategoryId).concat(\",\");\n//         data[i] = {\n//             productCategoryId: json[i].productCategoryId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM productCategory WHERE productCategoryId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into productCategory Values='@values'\");\n//     qry.map(\"@values\", data);\n//     console.log(\"before pc\")\n//     return idbCon.runSql(qry);\n// }\n\n\n// export function syncRegion(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].regionId).concat(\",\");\n//         data[i] = {\n//             regionId: json[i].regionId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             realmId: json[i].realmId,\n//             capacityCbm: json[i].capacityCbm\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM region WHERE regionId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into region Values='@values'\");\n//     qry.map(\"@values\", data);\n//     console.log(\"before region\")\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncShipmentStatus(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].shipmentStatusId).concat(\",\");\n//         data[i] = {\n//             shipmentStatusId: json[i].shipmentStatusId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM shipmentStatus WHERE shipmentStatusId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into shipmentStatus Values='@values'\");\n//     qry.map(\"@values\", data);\n//     console.log(\"before ss\")\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncShipmentStatusAllowed(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].shipmentStatusAllowedId).concat(\",\");\n//         data[i] = {\n//             nextShipmentStatusId: json[i].nextShipmentStatusId,\n//             shipmentStatusAllowedId: json[i].shipmentStatusAllowedId,\n//             shipmentStatusId: json[i].shipmentStatusId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM shipmentStatusAllowed WHERE shipmentStatusAllowedId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into shipmentStatusAllowed Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncUnit(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].unitId).concat(\",\");\n//         data[i] = {\n//             unitId: json[i].unitId,\n//             active: (json[i].active).toString(),\n//             label: json[i].label,\n//             unitCode: json[i].unitCode,\n//             unitType: json[i].unitType\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM unit WHERE unitId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into unit Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n\n// export function syncUnitType(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].unitTypeId).concat(\",\");\n//         data[i] = {\n//             unitTypeId: json[i].unitTypeId,\n//             label: json[i].label\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM unitType WHERE unitTypeId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into unitType Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n\n// export function syncSubFundingSource(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].subFundingSourceId).concat(\",\");\n//         data[i] = {\n//             subFundingSourceId: json[i].subFundingSourceId,\n//             label: json[i].label,\n//             active: (json[i].active).toString(),\n//             fundingSource: json[i].fundingSource,\n//             realmId: json[i].realmId\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM subFundingSource WHERE subFundingSourceId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into subFundingSource Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncCountry(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].countryId).concat(\",\");\n//         data[i] = {\n//             countryId: json[i].countryId,\n//             label: json[i].label,\n//             active: (json[i].active).toString(),\n//             currency: json[i].currency,\n//             language: json[i].language\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM country WHERE countryId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into country Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n// export function syncLanguage(json) {\n//     var data = []\n//     var deleteInStr = \"\";\n//     for (var i = 0; i < json.length; i++) {\n//         deleteInStr = deleteInStr.concat(json[i].languageId).concat(\",\");\n//         data[i] = {\n//             languageId: json[i].languageId,\n//             languageName: json[i].languageName,\n//             active: (json[i].active).toString()\n//         }\n//     }\n//     if (json.length > 0) {\n//         var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n//         var qry1 = new SqlWeb.Query(`DELETE FROM language WHERE languageId IN (${deleteInStr})`)\n//         idbCon.runSql(qry1);\n//     }\n//     var qry = new SqlWeb.Query(\"insert into language Values='@values'\");\n//     qry.map(\"@values\", data);\n//     return idbCon.runSql(qry);\n// }\n\n// export function updateLastSyncDate(lastSyncDate, realmId) {\n//     var qry = new SqlWeb.Query(`DELETE FROM lastSyncDate WHERE id IN (0,${realmId})`);\n//     idbCon.runSql(qry);\n//     var data = []\n//     data[0] = {\n//         id: 0,\n//         lastSyncDate: lastSyncDate\n//     }\n//     data[1] = {\n//         id: realmId,\n//         lastSyncDate: lastSyncDate\n//     }\n//     var qry1 = new SqlWeb.Query(\"insert into lastSyncDate Values='@values'\");\n//     qry1.map(\"@values\", data);\n//     return idbCon.runSql(qry1);\n// }\n\n// export function getProductCategoryList() {\n//     const qry = new Query(`select * from productCategory where active='true'`);\n//     // console.log\n//     var result = idbCon.runSql(qry);\n//     console.log(\"Result=======\", result);\n//     return result;\n// }\n\n// export function getProductListByProductCategory(categoryId) {\n//     const qry = new Query(`select * from product where active='true'`);\n//     console.log(qry)\n//     var result = idbCon.runSql(qry);\n//     console.log(\"Result=======\", result);\n//     return result;\n// }"]},"metadata":{},"sourceType":"module"}