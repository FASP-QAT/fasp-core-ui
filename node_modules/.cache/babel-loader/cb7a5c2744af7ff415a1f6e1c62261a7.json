{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = NumberSchema;\n\nvar _inherits = _interopRequireDefault(require(\"./util/inherits\"));\n\nvar _mixed = _interopRequireDefault(require(\"./mixed\"));\n\nvar _locale = require(\"./locale\");\n\nvar _isAbsent = _interopRequireDefault(require(\"./util/isAbsent\"));\n\nvar isNaN = function isNaN(value) {\n  return value != +value;\n};\n\nvar isInteger = function isInteger(val) {\n  return (0, _isAbsent.default)(val) || val === (val | 0);\n};\n\nfunction NumberSchema() {\n  var _this = this;\n\n  if (!(this instanceof NumberSchema)) return new NumberSchema();\n\n  _mixed.default.call(this, {\n    type: 'number'\n  });\n\n  this.withMutation(function () {\n    _this.transform(function (value) {\n      var parsed = value;\n\n      if (typeof parsed === 'string') {\n        parsed = parsed.replace(/\\s/g, '');\n        if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings\n\n        parsed = +parsed;\n      }\n\n      if (this.isType(parsed)) return parsed;\n      return parseFloat(parsed);\n    });\n  });\n}\n\n(0, _inherits.default)(NumberSchema, _mixed.default, {\n  _typeCheck: function _typeCheck(value) {\n    if (value instanceof Number) value = value.valueOf();\n    return typeof value === 'number' && !isNaN(value);\n  },\n  min: function min(_min, message) {\n    if (message === void 0) {\n      message = _locale.number.min;\n    }\n\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min: _min\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value >= this.resolve(_min);\n      }\n    });\n  },\n  max: function max(_max, message) {\n    if (message === void 0) {\n      message = _locale.number.max;\n    }\n\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max: _max\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value <= this.resolve(_max);\n      }\n    });\n  },\n  lessThan: function lessThan(less, message) {\n    if (message === void 0) {\n      message = _locale.number.lessThan;\n    }\n\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        less: less\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value < this.resolve(less);\n      }\n    });\n  },\n  moreThan: function moreThan(more, message) {\n    if (message === void 0) {\n      message = _locale.number.moreThan;\n    }\n\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        more: more\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value > this.resolve(more);\n      }\n    });\n  },\n  positive: function positive(msg) {\n    if (msg === void 0) {\n      msg = _locale.number.positive;\n    }\n\n    return this.moreThan(0, msg);\n  },\n  negative: function negative(msg) {\n    if (msg === void 0) {\n      msg = _locale.number.negative;\n    }\n\n    return this.lessThan(0, msg);\n  },\n  integer: function integer(message) {\n    if (message === void 0) {\n      message = _locale.number.integer;\n    }\n\n    return this.test({\n      name: 'integer',\n      message: message,\n      test: isInteger\n    });\n  },\n  truncate: function truncate() {\n    return this.transform(function (value) {\n      return !(0, _isAbsent.default)(value) ? value | 0 : value;\n    });\n  },\n  round: function round(method) {\n    var avail = ['ceil', 'floor', 'round', 'trunc'];\n    method = method && method.toLowerCase() || 'round'; // this exists for symemtry with the new Math.trunc\n\n    if (method === 'trunc') return this.truncate();\n    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n    return this.transform(function (value) {\n      return !(0, _isAbsent.default)(value) ? Math[method](value) : value;\n    });\n  }\n});\nmodule.exports = exports[\"default\"];","map":{"version":3,"sources":["/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/yup/lib/number.js"],"names":["_interopRequireDefault","require","exports","__esModule","default","NumberSchema","_inherits","_mixed","_locale","_isAbsent","isNaN","value","isInteger","val","_this","call","type","withMutation","transform","parsed","replace","NaN","isType","parseFloat","_typeCheck","Number","valueOf","min","_min","message","number","test","name","exclusive","params","resolve","max","_max","lessThan","less","moreThan","more","positive","msg","negative","integer","truncate","round","method","avail","toLowerCase","indexOf","TypeError","join","Math","module"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = NumberSchema;\n\nvar _inherits = _interopRequireDefault(require(\"./util/inherits\"));\n\nvar _mixed = _interopRequireDefault(require(\"./mixed\"));\n\nvar _locale = require(\"./locale\");\n\nvar _isAbsent = _interopRequireDefault(require(\"./util/isAbsent\"));\n\nvar isNaN = function isNaN(value) {\n  return value != +value;\n};\n\nvar isInteger = function isInteger(val) {\n  return (0, _isAbsent.default)(val) || val === (val | 0);\n};\n\nfunction NumberSchema() {\n  var _this = this;\n\n  if (!(this instanceof NumberSchema)) return new NumberSchema();\n\n  _mixed.default.call(this, {\n    type: 'number'\n  });\n\n  this.withMutation(function () {\n    _this.transform(function (value) {\n      var parsed = value;\n\n      if (typeof parsed === 'string') {\n        parsed = parsed.replace(/\\s/g, '');\n        if (parsed === '') return NaN; // don't use parseFloat to avoid positives on alpha-numeric strings\n\n        parsed = +parsed;\n      }\n\n      if (this.isType(parsed)) return parsed;\n      return parseFloat(parsed);\n    });\n  });\n}\n\n(0, _inherits.default)(NumberSchema, _mixed.default, {\n  _typeCheck: function _typeCheck(value) {\n    if (value instanceof Number) value = value.valueOf();\n    return typeof value === 'number' && !isNaN(value);\n  },\n  min: function min(_min, message) {\n    if (message === void 0) {\n      message = _locale.number.min;\n    }\n\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        min: _min\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value >= this.resolve(_min);\n      }\n    });\n  },\n  max: function max(_max, message) {\n    if (message === void 0) {\n      message = _locale.number.max;\n    }\n\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        max: _max\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value <= this.resolve(_max);\n      }\n    });\n  },\n  lessThan: function lessThan(less, message) {\n    if (message === void 0) {\n      message = _locale.number.lessThan;\n    }\n\n    return this.test({\n      message: message,\n      name: 'max',\n      exclusive: true,\n      params: {\n        less: less\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value < this.resolve(less);\n      }\n    });\n  },\n  moreThan: function moreThan(more, message) {\n    if (message === void 0) {\n      message = _locale.number.moreThan;\n    }\n\n    return this.test({\n      message: message,\n      name: 'min',\n      exclusive: true,\n      params: {\n        more: more\n      },\n      test: function test(value) {\n        return (0, _isAbsent.default)(value) || value > this.resolve(more);\n      }\n    });\n  },\n  positive: function positive(msg) {\n    if (msg === void 0) {\n      msg = _locale.number.positive;\n    }\n\n    return this.moreThan(0, msg);\n  },\n  negative: function negative(msg) {\n    if (msg === void 0) {\n      msg = _locale.number.negative;\n    }\n\n    return this.lessThan(0, msg);\n  },\n  integer: function integer(message) {\n    if (message === void 0) {\n      message = _locale.number.integer;\n    }\n\n    return this.test({\n      name: 'integer',\n      message: message,\n      test: isInteger\n    });\n  },\n  truncate: function truncate() {\n    return this.transform(function (value) {\n      return !(0, _isAbsent.default)(value) ? value | 0 : value;\n    });\n  },\n  round: function round(method) {\n    var avail = ['ceil', 'floor', 'round', 'trunc'];\n    method = method && method.toLowerCase() || 'round'; // this exists for symemtry with the new Math.trunc\n\n    if (method === 'trunc') return this.truncate();\n    if (avail.indexOf(method.toLowerCase()) === -1) throw new TypeError('Only valid options for round() are: ' + avail.join(', '));\n    return this.transform(function (value) {\n      return !(0, _isAbsent.default)(value) ? Math[method](value) : value;\n    });\n  }\n});\nmodule.exports = exports[\"default\"];"]},"metadata":{},"sourceType":"script"}