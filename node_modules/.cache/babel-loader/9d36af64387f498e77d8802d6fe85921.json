{"ast":null,"code":"import stylesEqual from 'style-equal';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/* eslint-disable import/prefer-default-export */\n\n\nfunction type(value) {\n  if (value === null) return 'null';\n  if (Array.isArray(value)) return 'array';\n  return typeof value === 'undefined' ? 'undefined' : _typeof(value);\n}\n\nfunction elementsEqual(a, b) {\n  var typeOfA = type(a);\n  if (typeOfA !== type(b)) return false;\n\n  switch (typeOfA) {\n    case 'array':\n      if (a.length !== b.length) return false;\n\n      for (var i = 0; i < a.length; i++) {\n        if (!elementsEqual(a[i], b[i])) return false;\n      }\n\n      return true;\n\n    case 'object':\n      if (a.type !== b.type) return false;\n      if (a.key !== b.key) return false;\n      if (a.ref !== b.ref) return false;\n      return propsEqual(a.props, b.props);\n    // eslint-disable-line no-use-before-define\n\n    default:\n      return a === b;\n  }\n}\n\nfunction propsEqual(a, b) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var aKeys = Object.keys(a);\n  var aCount = 0;\n  var bCount = 0;\n\n  for (var i = 0, l = aKeys.length; i < l; i++) {\n    var key = aKeys[i];\n\n    if (!options.ignore || options.ignore.indexOf(key) === -1) {\n      // Compare `style` and `children` props later\n      if (key !== 'style' && key !== 'children' && a[key] !== b[key]) return false;\n      aCount += 1;\n    }\n  }\n\n  var bKeys = Object.keys(b);\n\n  for (var _i = 0, _l = bKeys.length; _i < _l; _i++) {\n    var _key = bKeys[_i];\n\n    if (!options.ignore || options.ignore.indexOf(_key) === -1) {\n      bCount += 1;\n    }\n  }\n\n  if (aCount !== bCount) return false; // NOTE: Kind of risky, but I'm assuming that a `style` prop is a React Native style,\n  // and using the `styleEqual` algorithm here.\n\n  if (!stylesEqual(a.style, b.style)) return false; // Compare children last\n\n  return elementsEqual(a.children, b.children);\n}\n\nexport { stylesEqual, propsEqual, elementsEqual };","map":{"version":3,"sources":["../src/helpers.js","../src/equal.js"],"names":["value","Array","typeOfA","type","a","b","i","elementsEqual","propsEqual","options","aKeys","Object","aCount","bCount","l","key","bKeys","stylesEqual"],"mappings":";;;;;;;AAAA;;;AAEO,SAAA,IAAA,CAAA,KAAA,EAAqB;MACpBA,KAAAA,KAAJ,I,EAAoB,OAAA,MAAA;MAChBC,KAAAA,CAAAA,OAAAA,CAAJ,KAAIA,C,EAAsB,OAAA,OAAA;gBAC1B,K,KAAA,W,GAAA,W,GAAA,OAAA,CAAA,KAAA,C;;;ACFG,SAAA,aAAA,CAAA,CAAA,EAAA,CAAA,EAA6B;MAC1BC,OAAAA,GAAUC,IAAAA,CAAhB,CAAgBA,C;MAEZD,OAAAA,KAAYC,IAAAA,CAAhB,CAAgBA,C,EAAS,OAAA,KAAA;;UAEzB,O;SACI,O;UACQC,CAAAA,CAAAA,MAAAA,KAAaC,CAAAA,CAAjB,M,EAA2B,OAAA,KAAA;;WACtB,IAAIC,CAAAA,GAAT,C,EAAgBA,CAAAA,GAAIF,CAAAA,CAApB,M,EAA8BE,CAA9B,E,EAAmC;YAC3B,CAACC,aAAAA,CAAcH,CAAAA,CAAdG,CAAcH,CAAdG,EAAoBF,CAAAA,CAAzB,CAAyBA,CAApBE,C,EAA2B,OAAA,KAAA;;;aAEpC,I;;SACJ,Q;UACQH,CAAAA,CAAAA,IAAAA,KAAWC,CAAAA,CAAf,I,EAAuB,OAAA,KAAA;UACnBD,CAAAA,CAAAA,GAAAA,KAAUC,CAAAA,CAAd,G,EAAqB,OAAA,KAAA;UACjBD,CAAAA,CAAAA,GAAAA,KAAUC,CAAAA,CAAd,G,EAAqB,OAAA,KAAA;aACdG,UAAAA,CAAWJ,CAAAA,CAAXI,KAAAA,EAAoBH,CAAAA,CAXnC,KAWeG,C;AAXf;;;aAaeJ,CAAAA,KAAP,C;;;;AAIL,SAAA,UAAA,CAAA,CAAA,EAAA,CAAA,EAAwC;MAAdK,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,E;MACjCC,KAAAA,GAAQC,MAAAA,CAAAA,IAAAA,CAAd,CAAcA,C;MACVC,MAAAA,GAAJ,C;MACIC,MAAAA,GAAJ,C;;OAEK,IAAIP,CAAAA,GAAJ,CAAA,EAAWQ,CAAAA,GAAIJ,KAAAA,CAApB,M,EAAkCJ,CAAAA,GAAlC,C,EAAyCA,CAAzC,E,EAA8C;QACpCS,GAAAA,GAAML,KAAAA,CAAZ,CAAYA,C;;QACR,CAACD,OAAAA,CAAD,MAAA,IAAmBA,OAAAA,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,GAAAA,MAAgC,CAAvD,C,EAA2D;;UAEnDM,GAAAA,KAAAA,OAAAA,IAAmBA,GAAAA,KAAnBA,UAAAA,IAAyCX,CAAAA,CAAAA,GAAAA,CAAAA,KAAWC,CAAAA,CAAxD,GAAwDA,C,EAAQ,OAAA,KAAA;gBAChE,C;;;;MAIFW,KAAAA,GAAQL,MAAAA,CAAAA,IAAAA,CAAd,CAAcA,C;;OAET,IAAIL,EAAAA,GAAJ,CAAA,EAAWQ,EAAAA,GAAIE,KAAAA,CAApB,M,EAAkCV,EAAAA,GAAlC,E,EAAyCA,EAAzC,E,EAA8C;QACpCS,IAAAA,GAAMC,KAAAA,CAAZ,EAAYA,C;;QACR,CAACP,OAAAA,CAAD,MAAA,IAAmBA,OAAAA,CAAAA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,MAAgC,CAAvD,C,EAA2D;gBACvD,C;;;;MAIJG,MAAAA,KAAJ,M,EAAuB,OAAA,KAAA,CAvBoB,C;;;MA2BvC,CAACK,WAAAA,CAAYb,CAAAA,CAAZa,KAAAA,EAAqBZ,CAAAA,CAA1B,KAAKY,C,EAA+B,OAAA,KAAA,CA3BO,C;;SA8BpCV,aAAAA,CAAcH,CAAAA,CAAdG,QAAAA,EAA0BF,CAAAA,CAAjC,QAAOE,C","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nexport function type(value) {\n    if (value === null) return 'null';\n    if (Array.isArray(value)) return 'array';\n    return typeof value;\n}\n","import stylesEqual from 'style-equal';\nimport {type} from './helpers';\n\nexport function elementsEqual(a, b) {\n    const typeOfA = type(a);\n\n    if (typeOfA !== type(b)) return false;\n\n    switch (typeOfA) {\n        case 'array':\n            if (a.length !== b.length) return false;\n            for (let i = 0; i < a.length; i++) {\n                if (!elementsEqual(a[i], b[i])) return false;\n            }\n            return true;\n        case 'object':\n            if (a.type !== b.type) return false;\n            if (a.key !== b.key) return false;\n            if (a.ref !== b.ref) return false;\n            return propsEqual(a.props, b.props); // eslint-disable-line no-use-before-define\n        default:\n            return a === b;\n    }\n}\n\nexport function propsEqual(a, b, options = {}) {\n    const aKeys = Object.keys(a);\n    let aCount = 0;\n    let bCount = 0;\n\n    for (let i = 0, l = aKeys.length; i < l; i++) {\n        const key = aKeys[i];\n        if (!options.ignore || options.ignore.indexOf(key) === -1) {\n            // Compare `style` and `children` props later\n            if (key !== 'style' && key !== 'children' && a[key] !== b[key]) return false;\n            aCount += 1;\n        }\n    }\n\n    const bKeys = Object.keys(b);\n\n    for (let i = 0, l = bKeys.length; i < l; i++) {\n        const key = bKeys[i];\n        if (!options.ignore || options.ignore.indexOf(key) === -1) {\n            bCount += 1;\n        }\n    }\n\n    if (aCount !== bCount) return false;\n\n    // NOTE: Kind of risky, but I'm assuming that a `style` prop is a React Native style,\n    // and using the `styleEqual` algorithm here.\n    if (!stylesEqual(a.style, b.style)) return false;\n\n    // Compare children last\n    return elementsEqual(a.children, b.children);\n}\n"]},"metadata":{},"sourceType":"module"}