{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { Online } from \"react-detect-offline\";\nimport jwt_decode from 'jwt-decode';\nimport { API_URL } from '../../Constants.js';\nimport CryptoJS from 'crypto-js';\nimport { SECRET_KEY } from '../../Constants.js';\nimport bcrypt from 'bcryptjs';\nvar myDt;\n\nvar AuthenticationService = /*#__PURE__*/function () {\n  function AuthenticationService() {\n    _classCallCheck(this, AuthenticationService);\n  }\n\n  _createClass(AuthenticationService, [{\n    key: \"isUserLoggedIn\",\n    value: function isUserLoggedIn(username, password) {\n      var decryptedPassword = \"\";\n\n      for (var i = 0; i < localStorage.length; i++) {\n        var value = localStorage.getItem(localStorage.key(i));\n        var decryptedUsername = CryptoJS.AES.decrypt(value.toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n\n        if (decryptedUsername == username) {\n          var key = localStorage.key(i).substring(9, 10);\n          localStorage.setItem(\"tempUser\", key);\n          decryptedPassword = CryptoJS.AES.decrypt(localStorage.getItem(\"password-\" + key).toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n        }\n      }\n\n      return decryptedPassword;\n    }\n  }, {\n    key: \"getLoggedInUsername\",\n    value: function getLoggedInUsername() {\n      var decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      var decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      var decoded = jwt_decode(decryptedToken);\n      return decoded.sub;\n    }\n  }, {\n    key: \"getLoggedInUserId\",\n    value: function getLoggedInUserId() {\n      var decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      return decryptedCurUser;\n    }\n  }, {\n    key: \"getLanguageId\",\n    value: function getLanguageId() {\n      var decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8); // console.log(\"decryptedCurUser---\" + decryptedCurUser);\n\n      var decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      var decoded = jwt_decode(decryptedToken);\n      return decoded.user.language.languageId;\n    }\n  }, {\n    key: \"getRealmId\",\n    value: function getRealmId() {\n      var decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      console.log(\"decryptedCurUser---\" + decryptedCurUser);\n      var decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      var decoded = jwt_decode(decryptedToken);\n      console.log(\"Decoded\", decoded);\n      return decoded.user.realm.realmId;\n    }\n  }, {\n    key: \"checkTypeOfSession\",\n    value: function checkTypeOfSession() {\n      var typeOfSession = localStorage.getItem('typeOfSession'); // console.log(\"typeofsession---\" + typeOfSession);\n      // console.log(\"network----\" + navigator.onLine);\n\n      if (typeOfSession === 'Online' && navigator.onLine || typeOfSession === 'Offline' && !navigator.onLine) {\n        console.log(\"true\");\n        return true;\n      } else {\n        console.log(\"false\");\n        return false;\n      }\n    }\n  }, {\n    key: \"checkIfDifferentUserIsLoggedIn\",\n    value: function checkIfDifferentUserIsLoggedIn(newUsername) {\n      // console.log(\"token username---\" + newUsername);\n      var usernameStored = localStorage.getItem('username'); // console.log(\"usernameStored---\" + usernameStored);\n\n      if (usernameStored !== null && usernameStored !== \"\") {\n        var usernameDecrypted = CryptoJS.AES.decrypt(usernameStored, \"\".concat(SECRET_KEY));\n        var originalText = usernameDecrypted.toString(CryptoJS.enc.Utf8); // console.log(\"usernameDecrypted---\" + originalText);\n\n        if (originalText !== newUsername) {\n          if (window.confirm(\"Are you sure you want to overrride already logged in user's details?\")) {\n            return true;\n          } else {\n            return false;\n          }\n        }\n\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }, {\n    key: \"checkIfTokenExpired\",\n    value: function checkIfTokenExpired() {\n      var decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      var decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      var decoded = jwt_decode(decryptedToken); // console.log(decoded);\n\n      var tokenExpiryTime = new Date(decoded.exp * 1000);\n      var curDate = new Date(); // console.log(new Date(decoded.exp * 1000));\n      // console.log(\"cur date---\" + curDate);\n\n      if (new Date(decoded.exp * 1000) > new Date()) {\n        console.log(\"Token not expired\");\n        return true;\n      } else {\n        console.log(\"Token expired\");\n        return false;\n      }\n    }\n  }, {\n    key: \"checkSessionTimeOut\",\n    value: function checkSessionTimeOut() {\n      var decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      var decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      var decoded = jwt_decode(decryptedToken); // console.log(\"decoded---\", decoded);\n      // console.log(\"Session expires on---\" + decoded.user.sessionExpiresOn);\n\n      return decoded.user.sessionExpiresOn;\n    } // refreshToken() {\n    //     let token = localStorage.getItem('token');\n    //     console.log(\"token---\" + token);\n    //     this.setupAxiosInterceptors();\n    //     return axios.get(`${API_URL}/refresh`, {}).then(response => {\n    //         console.log(\"response----------------\", response)\n    //     }).catch(\n    //         error => {\n    //             console.log(\"error----------\", error);\n    //         })\n    // }\n\n  }, {\n    key: \"setupAxiosInterceptors\",\n    value: function setupAxiosInterceptors() {\n      // console.log(localStorage.getItem('curUser'));\n      var decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      var decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), \"\".concat(SECRET_KEY)).toString(CryptoJS.enc.Utf8);\n      var basicAuthHeader = 'Bearer ' + decryptedToken; // console.log(\"headers=\" + basicAuthHeader);\n\n      axios.interceptors.request.use( // if (this.isUserLoggedIn) {\n      function (config) {\n        config.headers.authorization = basicAuthHeader;\n        return config;\n      } // }\n      );\n    }\n  }, {\n    key: \"storeTokenInIndexedDb\",\n    value: function storeTokenInIndexedDb(token, decodedObj) {\n      var userObj = {\n        token: token,\n        typeOfSession: \"Online\",\n        userId: decodedObj.userId\n      };\n      var userId = {\n        userId: decodedObj.userId\n      };\n\n      if (!('indexedDB' in window)) {\n        alert('This browser does not support IndexedDB');\n      } else {\n        var db;\n        var customerObjectStore;\n        var openRequest = indexedDB.open('fasp', 1);\n\n        openRequest.onupgradeneeded = function (e) {\n          var db = e.target.result;\n\n          if (!db.objectStoreNames.contains('programData')) {\n            customerObjectStore = db.createObjectStore('programData', {\n              keyPath: 'id',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('lastSyncDate')) {\n            customerObjectStore = db.createObjectStore('lastSyncDate', {\n              keyPath: 'id',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('language')) {\n            customerObjectStore = db.createObjectStore('language', {\n              keyPath: 'languageId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('country')) {\n            customerObjectStore = db.createObjectStore('country', {\n              keyPath: 'countryId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('currency')) {\n            customerObjectStore = db.createObjectStore('currency', {\n              keyPath: 'currencyId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('unit')) {\n            customerObjectStore = db.createObjectStore('unit', {\n              keyPath: 'unitId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('unitType')) {\n            customerObjectStore = db.createObjectStore('unitType', {\n              keyPath: 'unitTypeId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('organisation')) {\n            customerObjectStore = db.createObjectStore('organisation', {\n              keyPath: 'organisationId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('healthArea')) {\n            customerObjectStore = db.createObjectStore('healthArea', {\n              keyPath: 'healthAreaId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('region')) {\n            customerObjectStore = db.createObjectStore('region', {\n              keyPath: 'regionId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('fundingSource')) {\n            customerObjectStore = db.createObjectStore('fundingSource', {\n              keyPath: 'fundingSourceId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('subFundingSource')) {\n            customerObjectStore = db.createObjectStore('subFundingSource', {\n              keyPath: 'subFundingSourceId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('product')) {\n            customerObjectStore = db.createObjectStore('product', {\n              keyPath: 'productId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('productCategory')) {\n            customerObjectStore = db.createObjectStore('productCategory', {\n              keyPath: 'productCategoryId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('dataSource')) {\n            customerObjectStore = db.createObjectStore('dataSource', {\n              keyPath: 'dataSourceId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('dataSourceType')) {\n            customerObjectStore = db.createObjectStore('dataSourceType', {\n              keyPath: 'dataSourceTypeId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('shipmentStatus')) {\n            customerObjectStore = db.createObjectStore('shipmentStatus', {\n              keyPath: 'shipmentStatusId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('shipmentStatusAllowed')) {\n            customerObjectStore = db.createObjectStore('shipmentStatusAllowed', {\n              keyPath: 'shipmentStatusAllowedId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('manufacturer')) {\n            customerObjectStore = db.createObjectStore('manufacturer', {\n              keyPath: 'manufacturerId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('logisticsUnit')) {\n            customerObjectStore = db.createObjectStore('logisticsUnit', {\n              keyPath: 'logisticsUnitId',\n              autoIncrement: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('planningUnit')) {\n            customerObjectStore = db.createObjectStore('planningUnit', {\n              keyPath: 'planningUnitId',\n              autoIncrement: true\n            });\n          }\n        }.bind(this);\n\n        openRequest.onsuccess = function (e) {\n          db = e.target.result;\n          var transaction = db.transaction(['user'], 'readwrite');\n          var user = transaction.objectStore('user');\n          var result;\n          result = user.delete(decodedObj.userId);\n\n          result.onsuccess = function (event) {\n            result = user.add(userObj);\n\n            result.onerror = function (event) {};\n\n            result.onsuccess = function (event) {};\n          };\n\n          result.onerror = function (event) {};\n\n          var transaction1 = db.transaction(['curuser'], 'readwrite');\n          var curuser = transaction1.objectStore('curuser');\n          result = curuser.clear();\n\n          result.onsuccess = function (event) {\n            result = curuser.add(userId);\n\n            result.onerror = function (event) {};\n\n            result.onsuccess = function (event) {};\n          };\n\n          result.onerror = function (event) {};\n        }.bind(this);\n      }\n    }\n  }, {\n    key: \"getLoggedInUserDetails\",\n    value: function getLoggedInUserDetails() {\n      if (!('indexedDB' in window)) {\n        alert('This browser does not support IndexedDB');\n      } else {\n        var db;\n        var customerObjectStore;\n        var userObj = 0;\n        var openRequest = indexedDB.open('fasp', 1);\n\n        openRequest.onupgradeneeded = function (e) {\n          db = e.target.result;\n\n          if (!db.objectStoreNames.contains('user')) {\n            customerObjectStore = db.createObjectStore('user', {\n              keyPath: 'userId',\n              autoIncrement: true\n            });\n            customerObjectStore.createIndex(\"userId\", \"userId\", {\n              unique: true\n            });\n          }\n\n          if (!db.objectStoreNames.contains('curuser')) {\n            customerObjectStore = db.createObjectStore('curuser', {\n              keyPath: 'userId'\n            });\n            customerObjectStore.createIndex(\"userId\", \"userId\", {\n              unique: true\n            });\n          }\n        }.bind(this);\n\n        openRequest.onsuccess = function (e) {\n          db = e.target.result;\n          var result;\n          var transaction1 = db.transaction(['curuser'], 'readwrite');\n          var curuser = transaction1.objectStore('curuser');\n          result = curuser.getAll();\n\n          result.onsuccess = function (event) {\n            var user = db.transaction(['user'], 'readwrite').objectStore('user');\n            result = user.get(result.result[0].userId);\n\n            result.onerror = function (event) {};\n\n            result.onsuccess = function (event) {\n              userObj = result.result;\n              console.log(\"userObj---\", userObj);\n              return userObj;\n            };\n          };\n\n          result.onerror = function (event) {};\n        }.bind(this);\n      }\n\n      return userObj;\n    }\n  }]);\n\n  return AuthenticationService;\n}();\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/common/AuthenticationService.js"],"names":["axios","Online","jwt_decode","API_URL","CryptoJS","SECRET_KEY","bcrypt","myDt","AuthenticationService","username","password","decryptedPassword","i","localStorage","length","value","getItem","key","decryptedUsername","AES","decrypt","toString","enc","Utf8","substring","setItem","decryptedCurUser","decryptedToken","decoded","sub","user","language","languageId","console","log","realm","realmId","typeOfSession","navigator","onLine","newUsername","usernameStored","usernameDecrypted","originalText","window","confirm","tokenExpiryTime","Date","exp","curDate","sessionExpiresOn","basicAuthHeader","interceptors","request","use","config","headers","authorization","token","decodedObj","userObj","userId","alert","db","customerObjectStore","openRequest","indexedDB","open","onupgradeneeded","e","target","result","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","bind","onsuccess","transaction","objectStore","delete","event","add","onerror","transaction1","curuser","clear","createIndex","unique","getAll","get"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { Online } from \"react-detect-offline\";\nimport jwt_decode from 'jwt-decode'\nimport { API_URL } from '../../Constants.js'\nimport CryptoJS from 'crypto-js'\nimport { SECRET_KEY } from '../../Constants.js'\nimport bcrypt from 'bcryptjs';\n\nlet myDt;\nclass AuthenticationService {\n\n    isUserLoggedIn(username, password) {\n        var decryptedPassword = \"\";\n        for (var i = 0; i < localStorage.length; i++) {\n            var value = localStorage.getItem(localStorage.key(i));\n            let decryptedUsername = CryptoJS.AES.decrypt(value.toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n            if (decryptedUsername == username) {\n                var key = localStorage.key(i).substring(9, 10);\n                localStorage.setItem(\"tempUser\", key);\n                decryptedPassword = CryptoJS.AES.decrypt(localStorage.getItem(\"password-\" + key).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n            }\n        }\n        return decryptedPassword;\n    }\n\n    getLoggedInUsername() {\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        let decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8)\n        var decoded = jwt_decode(decryptedToken);\n        return decoded.sub;\n    }\n\n    getLoggedInUserId() {\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        return decryptedCurUser;\n    }\n\n    getLanguageId() {\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        // console.log(\"decryptedCurUser---\" + decryptedCurUser);\n        let decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8)\n        var decoded = jwt_decode(decryptedToken);\n        return decoded.user.language.languageId;\n    }\n\n    getRealmId(){\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        console.log(\"decryptedCurUser---\" + decryptedCurUser);\n        let decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8)\n        var decoded = jwt_decode(decryptedToken);\n        console.log(\"Decoded\",decoded);\n        return decoded.user.realm.realmId;\n    }\n\n    checkTypeOfSession() {\n        let typeOfSession = localStorage.getItem('typeOfSession');\n        // console.log(\"typeofsession---\" + typeOfSession);\n        // console.log(\"network----\" + navigator.onLine);\n        if ((typeOfSession === 'Online' && navigator.onLine) || (typeOfSession === 'Offline' && !navigator.onLine)) {\n            console.log(\"true\");\n            return true;\n        } else {\n            console.log(\"false\");\n            return false;\n\n\n\n        }\n    }\n\n    checkIfDifferentUserIsLoggedIn(newUsername) {\n        // console.log(\"token username---\" + newUsername);\n        let usernameStored = localStorage.getItem('username');\n        // console.log(\"usernameStored---\" + usernameStored);\n        if (usernameStored !== null && usernameStored !== \"\") {\n            var usernameDecrypted = CryptoJS.AES.decrypt(usernameStored, `${SECRET_KEY}`)\n            var originalText = usernameDecrypted.toString(CryptoJS.enc.Utf8);\n            // console.log(\"usernameDecrypted---\" + originalText);\n            if (originalText !== newUsername) {\n                if (window.confirm(\"Are you sure you want to overrride already logged in user's details?\")) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    checkIfTokenExpired() {\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        let decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8)\n        var decoded = jwt_decode(decryptedToken);\n        // console.log(decoded);\n        let tokenExpiryTime = new Date(decoded.exp * 1000);\n        var curDate = new Date();\n        // console.log(new Date(decoded.exp * 1000));\n        // console.log(\"cur date---\" + curDate);\n\n        if (new Date(decoded.exp * 1000) > new Date()) {\n            console.log(\"Token not expired\");\n            return true;\n        } else {\n            console.log(\"Token expired\");\n            return false;\n        }\n    }\n\n    checkSessionTimeOut() {\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        let decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8)\n        var decoded = jwt_decode(decryptedToken);\n        // console.log(\"decoded---\", decoded);\n        // console.log(\"Session expires on---\" + decoded.user.sessionExpiresOn);\n        return decoded.user.sessionExpiresOn;\n    }\n\n    // refreshToken() {\n    //     let token = localStorage.getItem('token');\n    //     console.log(\"token---\" + token);\n    //     this.setupAxiosInterceptors();\n    //     return axios.get(`${API_URL}/refresh`, {}).then(response => {\n    //         console.log(\"response----------------\", response)\n    //     }).catch(\n    //         error => {\n    //             console.log(\"error----------\", error);\n    //         })\n    // }\n\n    setupAxiosInterceptors() {\n        // console.log(localStorage.getItem('curUser'));\n        let decryptedCurUser = CryptoJS.AES.decrypt(localStorage.getItem('curUser').toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8);\n        let decryptedToken = CryptoJS.AES.decrypt(localStorage.getItem('token-' + decryptedCurUser).toString(), `${SECRET_KEY}`).toString(CryptoJS.enc.Utf8)\n        let basicAuthHeader = 'Bearer ' + decryptedToken\n        // console.log(\"headers=\" + basicAuthHeader);\n        axios.interceptors.request.use(\n            // if (this.isUserLoggedIn) {\n            (config) => {\n                config.headers.authorization = basicAuthHeader\n                return config;\n            }\n            // }\n        )\n\n    }\n    storeTokenInIndexedDb(token, decodedObj) {\n        let userObj = {\n            token: token,\n            typeOfSession: \"Online\",\n            userId: decodedObj.userId\n        }\n        let userId = {\n            userId: decodedObj.userId\n        }\n        if (!('indexedDB' in window)) {\n            alert('This browser does not support IndexedDB');\n        } else {\n            var db;\n            var customerObjectStore;\n            var openRequest = indexedDB.open('fasp', 1);\n\n            openRequest.onupgradeneeded = function (e) {\n                var db = e.target.result;\n                if (!db.objectStoreNames.contains('programData')) {\n                    customerObjectStore = db.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('lastSyncDate')) {\n                    customerObjectStore = db.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('language')) {\n                    customerObjectStore = db.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('country')) {\n                    customerObjectStore = db.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('currency')) {\n                    customerObjectStore = db.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('unit')) {\n                    customerObjectStore = db.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('unitType')) {\n                    customerObjectStore = db.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('organisation')) {\n                    customerObjectStore = db.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('healthArea')) {\n                    customerObjectStore = db.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('region')) {\n                    customerObjectStore = db.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('fundingSource')) {\n                    customerObjectStore = db.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('subFundingSource')) {\n                    customerObjectStore = db.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('product')) {\n                    customerObjectStore = db.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('productCategory')) {\n                    customerObjectStore = db.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('dataSource')) {\n                    customerObjectStore = db.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('dataSourceType')) {\n                    customerObjectStore = db.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('shipmentStatus')) {\n                    customerObjectStore = db.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('shipmentStatusAllowed')) {\n                    customerObjectStore = db.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('manufacturer')) {\n                    customerObjectStore = db.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('logisticsUnit')) {\n                    customerObjectStore = db.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n                }\n                if (!db.objectStoreNames.contains('planningUnit')) {\n                    customerObjectStore = db.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n                }\n            }.bind(this);\n\n            openRequest.onsuccess = function (e) {\n                db = e.target.result;\n                var transaction = db.transaction(['user'], 'readwrite');\n                var user = transaction.objectStore('user');\n                var result;\n                result = user.delete(decodedObj.userId);\n\n                result.onsuccess = function (event) {\n                    result = user.add(userObj);\n                    result.onerror = function (event) {\n                    };\n\n                    result.onsuccess = function (event) {\n                    };\n                };\n                result.onerror = function (event) {\n                };\n\n\n                var transaction1 = db.transaction(['curuser'], 'readwrite');\n                var curuser = transaction1.objectStore('curuser');\n                result = curuser.clear();\n                result.onsuccess = function (event) {\n                    result = curuser.add(userId);\n                    result.onerror = function (event) {\n                    };\n\n                    result.onsuccess = function (event) {\n                    };\n                };\n                result.onerror = function (event) {\n                };\n\n            }.bind(this);\n\n        }\n    }\n    getLoggedInUserDetails() {\n        if (!('indexedDB' in window)) {\n            alert('This browser does not support IndexedDB');\n        } else {\n            var db;\n            var customerObjectStore;\n            var userObj = 0;\n            var openRequest = indexedDB.open('fasp', 1);\n\n            openRequest.onupgradeneeded = function (e) {\n                db = e.target.result;\n                if (!db.objectStoreNames.contains('user')) {\n                    customerObjectStore = db.createObjectStore('user', { keyPath: 'userId', autoIncrement: true });\n                    customerObjectStore.createIndex(\"userId\", \"userId\", { unique: true });\n                }\n                if (!db.objectStoreNames.contains('curuser')) {\n                    customerObjectStore = db.createObjectStore('curuser', { keyPath: 'userId' });\n                    customerObjectStore.createIndex(\"userId\", \"userId\", { unique: true });\n                }\n            }.bind(this);\n\n            openRequest.onsuccess = function (e) {\n                db = e.target.result;\n                var result;\n                var transaction1 = db.transaction(['curuser'], 'readwrite');\n                var curuser = transaction1.objectStore('curuser');\n                result = curuser.getAll();\n                result.onsuccess = function (event) {\n                    var user = db.transaction(['user'], 'readwrite').objectStore('user');\n                    result = user.get(result.result[0].userId);\n                    result.onerror = function (event) {\n                    };\n\n                    result.onsuccess = function (event) {\n                        userObj = result.result;\n                        console.log(\"userObj---\", userObj);\n                        return userObj;\n                    };\n                };\n                result.onerror = function (event) {\n                };\n\n            }.bind(this);\n\n        }\n        return userObj;\n    }\n\n}\n\n\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}