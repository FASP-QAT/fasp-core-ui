{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n\nvar external = require(\"./external\");\n\nvar utf8 = require('./utf8');\n\nvar utils = require('./utils');\n\nvar ZipEntries = require('./zipEntries');\n\nvar Crc32Probe = require('./stream/Crc32Probe');\n\nvar nodejsUtils = require(\"./nodejsUtils\");\n/**\n * Check the CRC32 of an entry.\n * @param {ZipEntry} zipEntry the zip entry to check.\n * @return {Promise} the result.\n */\n\n\nfunction checkEntryCRC32(zipEntry) {\n  return new external.Promise(function (resolve, reject) {\n    var worker = zipEntry.decompressed.getContentWorker().pipe(new Crc32Probe());\n    worker.on(\"error\", function (e) {\n      reject(e);\n    }).on(\"end\", function () {\n      if (worker.streamInfo.crc32 !== zipEntry.decompressed.crc32) {\n        reject(new Error(\"Corrupted zip : CRC32 mismatch\"));\n      } else {\n        resolve();\n      }\n    }).resume();\n  });\n}\n\nmodule.exports = function (data, options) {\n  var zip = this;\n  options = utils.extend(options || {}, {\n    base64: false,\n    checkCRC32: false,\n    optimizedBinaryString: false,\n    createFolders: false,\n    decodeFileName: utf8.utf8decode\n  });\n\n  if (nodejsUtils.isNode && nodejsUtils.isStream(data)) {\n    return external.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\"));\n  }\n\n  return utils.prepareContent(\"the loaded zip file\", data, true, options.optimizedBinaryString, options.base64).then(function (data) {\n    var zipEntries = new ZipEntries(options);\n    zipEntries.load(data);\n    return zipEntries;\n  }).then(function checkCRC32(zipEntries) {\n    var promises = [external.Promise.resolve(zipEntries)];\n    var files = zipEntries.files;\n\n    if (options.checkCRC32) {\n      for (var i = 0; i < files.length; i++) {\n        promises.push(checkEntryCRC32(files[i]));\n      }\n    }\n\n    return external.Promise.all(promises);\n  }).then(function addFiles(results) {\n    var zipEntries = results.shift();\n    var files = zipEntries.files;\n\n    for (var i = 0; i < files.length; i++) {\n      var input = files[i];\n      zip.file(input.fileNameStr, input.decompressed, {\n        binary: true,\n        optimizedBinaryString: true,\n        date: input.date,\n        dir: input.dir,\n        comment: input.fileCommentStr.length ? input.fileCommentStr : null,\n        unixPermissions: input.unixPermissions,\n        dosPermissions: input.dosPermissions,\n        createFolders: options.createFolders\n      });\n    }\n\n    if (zipEntries.zipComment.length) {\n      zip.comment = zipEntries.zipComment;\n    }\n\n    return zip;\n  });\n};","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/node_modules/jszip/lib/load.js"],"names":["utils","require","external","utf8","ZipEntries","Crc32Probe","nodejsUtils","checkEntryCRC32","zipEntry","Promise","resolve","reject","worker","decompressed","getContentWorker","pipe","on","e","streamInfo","crc32","Error","resume","module","exports","data","options","zip","extend","base64","checkCRC32","optimizedBinaryString","createFolders","decodeFileName","utf8decode","isNode","isStream","prepareContent","then","zipEntries","load","promises","files","i","length","push","all","addFiles","results","shift","input","file","fileNameStr","binary","date","dir","comment","fileCommentStr","unixPermissions","dosPermissions","zipComment"],"mappings":"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","sourcesContent":["'use strict';\nvar utils = require('./utils');\nvar external = require(\"./external\");\nvar utf8 = require('./utf8');\nvar utils = require('./utils');\nvar ZipEntries = require('./zipEntries');\nvar Crc32Probe = require('./stream/Crc32Probe');\nvar nodejsUtils = require(\"./nodejsUtils\");\n\n/**\n * Check the CRC32 of an entry.\n * @param {ZipEntry} zipEntry the zip entry to check.\n * @return {Promise} the result.\n */\nfunction checkEntryCRC32(zipEntry) {\n    return new external.Promise(function (resolve, reject) {\n        var worker = zipEntry.decompressed.getContentWorker().pipe(new Crc32Probe());\n        worker.on(\"error\", function (e) {\n            reject(e);\n        })\n        .on(\"end\", function () {\n            if (worker.streamInfo.crc32 !== zipEntry.decompressed.crc32) {\n                reject(new Error(\"Corrupted zip : CRC32 mismatch\"));\n            } else {\n                resolve();\n            }\n        })\n        .resume();\n    });\n}\n\nmodule.exports = function(data, options) {\n    var zip = this;\n    options = utils.extend(options || {}, {\n        base64: false,\n        checkCRC32: false,\n        optimizedBinaryString: false,\n        createFolders: false,\n        decodeFileName: utf8.utf8decode\n    });\n\n    if (nodejsUtils.isNode && nodejsUtils.isStream(data)) {\n        return external.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\"));\n    }\n\n    return utils.prepareContent(\"the loaded zip file\", data, true, options.optimizedBinaryString, options.base64)\n    .then(function(data) {\n        var zipEntries = new ZipEntries(options);\n        zipEntries.load(data);\n        return zipEntries;\n    }).then(function checkCRC32(zipEntries) {\n        var promises = [external.Promise.resolve(zipEntries)];\n        var files = zipEntries.files;\n        if (options.checkCRC32) {\n            for (var i = 0; i < files.length; i++) {\n                promises.push(checkEntryCRC32(files[i]));\n            }\n        }\n        return external.Promise.all(promises);\n    }).then(function addFiles(results) {\n        var zipEntries = results.shift();\n        var files = zipEntries.files;\n        for (var i = 0; i < files.length; i++) {\n            var input = files[i];\n            zip.file(input.fileNameStr, input.decompressed, {\n                binary: true,\n                optimizedBinaryString: true,\n                date: input.date,\n                dir: input.dir,\n                comment : input.fileCommentStr.length ? input.fileCommentStr : null,\n                unixPermissions : input.unixPermissions,\n                dosPermissions : input.dosPermissions,\n                createFolders: options.createFolders\n            });\n        }\n        if (zipEntries.zipComment.length) {\n            zip.comment = zipEntries.zipComment;\n        }\n\n        return zip;\n    });\n};\n"]},"metadata":{},"sourceType":"script"}