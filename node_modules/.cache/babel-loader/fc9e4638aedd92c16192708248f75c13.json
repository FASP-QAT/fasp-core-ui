{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/realmCountry/AddRealmCountryComponent.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport RealmService from \"../../api/RealmService\";\nimport CountryService from \"../../api/CountryService\";\nimport RealmCountryService from \"../../api/RealmCountryService\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport i18n from '../../i18n';\nvar initialValues = {\n  realmId: [],\n  procurementAgentCode: \"\",\n  procurementAgentName: \"\",\n  submittedToApprovedLeadTime: \"\"\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    realmId: Yup.string().required(i18n.t('static.realmcountry.validrealm')),\n    procurementAgentCode: Yup.string().required(i18n.t('static.realmcountry.validcode')),\n    procurementAgentName: Yup.string().required(i18n.t('static.realmcountry.validname')),\n    submittedToApprovedLeadTime: Yup.string().required(i18n.t('static.realmcountry.validsubmittoapprove'))\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar AddRealmCountryComponent = /*#__PURE__*/function (_Component) {\n  _inherits(AddRealmCountryComponent, _Component);\n\n  function AddRealmCountryComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddRealmCountryComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddRealmCountryComponent).call(this, props));\n    _this.state = {\n      realms: [],\n      countries: [],\n      procurementAgent: {\n        realm: {},\n        label: {}\n      },\n      message: ''\n    };\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    _this.dataChange = _this.dataChange.bind(_assertThisInitialized(_this));\n    _this.Capitalize = _this.Capitalize.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AddRealmCountryComponent, [{\n    key: \"Capitalize\",\n    value: function Capitalize(str) {\n      console.log(\"capitalize\");\n\n      if (str != null && str != \"\") {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n      } else {\n        return \"\";\n      }\n    }\n  }, {\n    key: \"dataChange\",\n    value: function dataChange(event) {\n      var procurementAgent = this.state.procurementAgent;\n\n      if (event.target.name == \"realmId\") {\n        procurementAgent.realm.realmId = event.target.value;\n      }\n\n      if (event.target.name == \"procurementAgentCode\") {\n        procurementAgent.procurementAgentCode = event.target.value;\n      }\n\n      if (event.target.name == \"procurementAgentName\") {\n        procurementAgent.label.label_en = event.target.value;\n      }\n\n      if (event.target.name == \"submittedToApprovedLeadTime\") {\n        procurementAgent.submittedToApprovedLeadTime = event.target.value;\n      }\n\n      this.setState({\n        procurementAgent: procurementAgent\n      }, function () {});\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        realmId: true,\n        procurementAgentCode: true,\n        procurementAgentName: true,\n        submittedToApprovedLeadTime: true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('procurementAgentForm', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      AuthenticationService.setupAxiosInterceptors();\n      RealmService.getRealmListAll().then(function (response) {\n        _this2.setState({\n          realms: response.data.data\n        });\n      }).catch(function (error) {\n        switch (error.message) {\n          case \"Network Error\":\n            _this2.setState({\n              message: error.message\n            });\n\n            break;\n\n          default:\n            _this2.setState({\n              message: error.response.data.message\n            });\n\n            break;\n        }\n      });\n      CountryService.getCountryListAll().then(function (response) {\n        console.log(\"countries---\", response.data.data);\n\n        _this2.setState({\n          countries: response.data.data\n        });\n      }).catch(function (error) {\n        switch (error.message) {\n          case \"Network Error\":\n            _this2.setState({\n              message: error.message\n            });\n\n            break;\n\n          default:\n            _this2.setState({\n              message: error.response.data.message\n            });\n\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var realms = this.state.realms;\n      var countries = this.state.countries;\n      var realmList = realms.length > 0 && realms.map(function (item, i) {\n        return React.createElement(\"option\", {\n          key: i,\n          value: item.realmId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, item.label.label_en);\n      }, this); // let countryList = countries.length > 0\n      //     && countries.map((item, i) => {\n      //         return (\n      //             <option key={i} value={item.countryuId}>\n      //                 {item.label.label_en}\n      //             </option>\n      //         )\n      //     }, this);\n\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, this.state.message), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Add Procurement Agent\"), ' '), React.createElement(Formik, {\n        initialValues: initialValues,\n        validate: validate(validationSchema),\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting,\n              setErrors = _ref.setErrors;\n          console.log(\"this.state.procurementAgent---\", _this3.state.procurementAgent);\n          RealmCountryService.addRealmCountry(_this3.state.procurementAgent).then(function (response) {\n            if (response.data.status == \"Success\") {\n              _this3.props.history.push(\"/procurementAgent/listProcurementAgent/\".concat(response.data.message));\n            } else {\n              _this3.setState({\n                message: response.data.message\n              });\n            }\n          }).catch(function (error) {\n            switch (error.message) {\n              case \"Network Error\":\n                _this3.setState({\n                  message: error.message\n                });\n\n                break;\n\n              default:\n                _this3.setState({\n                  message: error.response.data.message\n                });\n\n                break;\n            }\n          });\n        },\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"procurementAgentForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 252\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 253\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 254\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"realmId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 255\n            },\n            __self: this\n          }, \"Realm\"), React.createElement(Input, {\n            type: \"select\",\n            name: \"realmId\",\n            id: \"realmId\",\n            bsSize: \"lg\",\n            valid: !errors.realmId,\n            invalid: touched.realmId && !!errors.realmId,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 256\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267\n            },\n            __self: this\n          }, \"Please select\"), realmList), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270\n            },\n            __self: this\n          }, errors.realmId)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"countryId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273\n            },\n            __self: this\n          }, \"Country\"), React.createElement(Input, {\n            type: \"select\",\n            name: \"countryId\",\n            id: \"countryId\",\n            bsSize: \"lg\",\n            valid: !errors.countryId,\n            invalid: touched.countryId && !!errors.countryId,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285\n            },\n            __self: this\n          }, \"Please select\"), realmList), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 288\n            },\n            __self: this\n          }, errors.countryId)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 290\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"procurementAgentCode\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 291\n            },\n            __self: this\n          }, \"Procurement Agent Code\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"procurementAgentCode\",\n            id: \"procurementAgentCode\",\n            valid: !errors.procurementAgentCode,\n            invalid: touched.procurementAgentCode && !!errors.procurementAgentCode,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            maxLength: 6,\n            value: _this3.Capitalize(_this3.state.procurementAgent.procurementAgentCode),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 292\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 303\n            },\n            __self: this\n          }, errors.procurementAgentCode)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 305\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"procurementAgentName\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 306\n            },\n            __self: this\n          }, \"Procurement Agent Name\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"procurementAgentName\",\n            id: \"procurementAgentName\",\n            valid: !errors.procurementAgentName,\n            invalid: touched.procurementAgentName && !!errors.procurementAgentName,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            value: _this3.Capitalize(_this3.state.procurementAgent.label.label_en),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 307\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 317\n            },\n            __self: this\n          }, errors.procurementAgentName)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 319\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"submittedToApprovedLeadTime\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 320\n            },\n            __self: this\n          }, \"Submitted To Approved Lead Time\"), React.createElement(Input, {\n            type: \"number\",\n            name: \"submittedToApprovedLeadTime\",\n            id: \"submittedToApprovedLeadTime\",\n            valid: !errors.submittedToApprovedLeadTime,\n            invalid: touched.submittedToApprovedLeadTime && !!errors.submittedToApprovedLeadTime,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            min: 1,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 321\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 331\n            },\n            __self: this\n          }, errors.submittedToApprovedLeadTime))), React.createElement(CardFooter, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 334\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 335\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"submit\",\n            color: \"success\",\n            className: \"mr-1\",\n            onClick: function onClick() {\n              return _this3.touchAll(setTouched, errors);\n            },\n            disabled: !isValid,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 336\n            },\n            __self: this\n          }, \"Submit\"), React.createElement(Button, {\n            type: \"reset\",\n            color: \"danger\",\n            className: \"mr-1\",\n            onClick: _this3.cancelClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 337\n            },\n            __self: this\n          }, \"Cancel\"))));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/procurementAgent/listProcurementAgent/\" + i18n.t('static.program.actioncancelled'));\n    }\n  }]);\n\n  return AddRealmCountryComponent;\n}(Component);\n\nexport default AddRealmCountryComponent;","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/realmCountry/AddRealmCountryComponent.js"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","Formik","Yup","RealmService","CountryService","RealmCountryService","AuthenticationService","i18n","initialValues","realmId","procurementAgentCode","procurementAgentName","submittedToApprovedLeadTime","validationSchema","values","object","shape","string","required","t","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","AddRealmCountryComponent","props","state","realms","countries","procurementAgent","realm","label","message","cancelClicked","bind","dataChange","Capitalize","str","console","log","charAt","toUpperCase","slice","event","target","name","value","label_en","setState","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","setupAxiosInterceptors","getRealmListAll","then","response","data","catch","getCountryListAll","realmList","map","item","flexBasis","setSubmitting","setErrors","addRealmCountry","status","history","push","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","e","countryId","touchAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\n\nimport RealmService from \"../../api/RealmService\";\nimport CountryService from \"../../api/CountryService\";\nimport RealmCountryService from \"../../api/RealmCountryService\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport i18n from '../../i18n';\n\nconst initialValues = {\n    realmId: [],\n    procurementAgentCode: \"\",\n    procurementAgentName: \"\",\n    submittedToApprovedLeadTime: \"\"\n}\n\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        realmId: Yup.string()\n            .required( i18n.t('static.realmcountry.validrealm')),\n        procurementAgentCode: Yup.string()\n            .required( i18n.t('static.realmcountry.validcode')),\n        procurementAgentName: Yup.string()\n            .required( i18n.t('static.realmcountry.validname')),\n        submittedToApprovedLeadTime: Yup.string()\n            .required( i18n.t('static.realmcountry.validsubmittoapprove'))\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\nclass AddRealmCountryComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            realms: [],\n            countries: [],\n            procurementAgent: {\n                realm: {\n                },\n                label: {\n\n                }\n            },\n            message: ''\n        }\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n        this.Capitalize = this.Capitalize.bind(this);\n    }\n\n    Capitalize(str) {\n        console.log(\"capitalize\");\n        if (str != null && str != \"\") {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        } else {\n            return \"\";\n        }\n    }\n\n\n    dataChange(event) {\n        let { procurementAgent } = this.state;\n        if (event.target.name == \"realmId\") {\n            procurementAgent.realm.realmId = event.target.value;\n        }\n        if (event.target.name == \"procurementAgentCode\") {\n            procurementAgent.procurementAgentCode = event.target.value;\n        }\n        if (event.target.name == \"procurementAgentName\") {\n            procurementAgent.label.label_en = event.target.value;\n        }\n        if (event.target.name == \"submittedToApprovedLeadTime\") {\n            procurementAgent.submittedToApprovedLeadTime = event.target.value;\n        }\n\n\n        this.setState({\n            procurementAgent\n        },\n            () => { });\n    };\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            realmId: true,\n            procurementAgentCode: true,\n            procurementAgentName: true,\n            submittedToApprovedLeadTime: true\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('procurementAgentForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        RealmService.getRealmListAll()\n            .then(response => {\n                this.setState({\n                    realms: response.data.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        CountryService.getCountryListAll()\n            .then(response => {\n                console.log(\"countries---\",response.data.data);\n                this.setState({\n                    countries: response.data.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    render() {\n        const { realms } = this.state;\n        const { countries } = this.state;\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {item.label.label_en}\n                    </option>\n                )\n            }, this);\n        \n        // let countryList = countries.length > 0\n        //     && countries.map((item, i) => {\n        //         return (\n        //             <option key={i} value={item.countryuId}>\n        //                 {item.label.label_en}\n        //             </option>\n        //         )\n        //     }, this);\n        return (\n            <div className=\"animated fadeIn\">\n                <h5>{this.state.message}</h5>\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>Add Procurement Agent</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                initialValues={initialValues}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {\n                                    console.log(\"this.state.procurementAgent---\", this.state.procurementAgent);\n                                    RealmCountryService.addRealmCountry(this.state.procurementAgent)\n                                        .then(response => {\n                                            if (response.data.status == \"Success\") {\n                                                this.props.history.push(`/procurementAgent/listProcurementAgent/${response.data.message}`)\n                                            } else {\n                                                this.setState({\n                                                    message: response.data.message\n                                                })\n                                            }\n                                        })\n                                        .catch(\n                                            error => {\n                                                switch (error.message) {\n                                                    case \"Network Error\":\n                                                        this.setState({\n                                                            message: error.message\n                                                        })\n                                                        break\n                                                    default:\n                                                        this.setState({\n                                                            message: error.response.data.message\n                                                        })\n                                                        break\n                                                }\n                                            }\n                                        );\n                                }}\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='procurementAgentForm'>\n                                                <CardBody>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"realmId\">Realm</Label>\n                                                        <Input\n                                                            type=\"select\"\n                                                            name=\"realmId\"\n                                                            id=\"realmId\"\n                                                            bsSize=\"lg\"\n                                                            valid={!errors.realmId}\n                                                            invalid={touched.realmId && !!errors.realmId}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                        >\n                                                            <option value=\"\">Please select</option>\n                                                            {realmList}\n                                                        </Input>\n                                                        <FormFeedback>{errors.realmId}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"countryId\">Country</Label>\n                                                        <Input\n                                                            type=\"select\"\n                                                            name=\"countryId\"\n                                                            id=\"countryId\"\n                                                            bsSize=\"lg\"\n                                                            valid={!errors.countryId}\n                                                            invalid={touched.countryId && !!errors.countryId}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                        >\n                                                            <option value=\"\">Please select</option>\n                                                            {realmList}\n                                                        </Input>\n                                                        <FormFeedback>{errors.countryId}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"procurementAgentCode\">Procurement Agent Code</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"procurementAgentCode\"\n                                                            id=\"procurementAgentCode\"\n                                                            valid={!errors.procurementAgentCode}\n                                                            invalid={touched.procurementAgentCode && !!errors.procurementAgentCode}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            maxLength={6}\n                                                            value={this.Capitalize(this.state.procurementAgent.procurementAgentCode)}\n                                                        />\n                                                        <FormFeedback>{errors.procurementAgentCode}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"procurementAgentName\">Procurement Agent Name</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"procurementAgentName\"\n                                                            id=\"procurementAgentName\"\n                                                            valid={!errors.procurementAgentName}\n                                                            invalid={touched.procurementAgentName && !!errors.procurementAgentName}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            value={this.Capitalize(this.state.procurementAgent.label.label_en)}\n                                                        />\n                                                        <FormFeedback>{errors.procurementAgentName}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"submittedToApprovedLeadTime\">Submitted To Approved Lead Time</Label>\n                                                        <Input type=\"number\"\n                                                            name=\"submittedToApprovedLeadTime\"\n                                                            id=\"submittedToApprovedLeadTime\"\n                                                            valid={!errors.submittedToApprovedLeadTime}\n                                                            invalid={touched.submittedToApprovedLeadTime && !!errors.submittedToApprovedLeadTime}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            min={1}\n                                                        />\n                                                        <FormFeedback>{errors.submittedToApprovedLeadTime}</FormFeedback>\n                                                    </FormGroup>\n                                                </CardBody>\n                                                <CardFooter>\n                                                    <FormGroup>\n                                                        <Button type=\"submit\" color=\"success\" className=\"mr-1\" onClick={() => this.touchAll(setTouched, errors)} disabled={!isValid}>Submit</Button>\n                                                        <Button type=\"reset\" color=\"danger\" className=\"mr-1\" onClick={this.cancelClicked}>Cancel</Button>\n                                                    </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n\n                                        )} />\n\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n    cancelClicked() {\n        this.props.history.push(`/procurementAgent/listProcurementAgent/` +i18n.t('static.program.actioncancelled'))\n    }\n}\n\nexport default AddRealmCountryComponent;\n"]},"metadata":{},"sourceType":"module"}