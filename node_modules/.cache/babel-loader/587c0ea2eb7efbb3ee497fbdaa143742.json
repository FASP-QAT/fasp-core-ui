{"ast":null,"code":"import { useContext } from 'react';\nimport { getI18n, getHasUsedI18nextProvider, I18nContext } from './context';\nexport function useSSR(initialI18nStore, initialLanguage) {\n  var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var i18nFromProps = props.i18n;\n  var ReactI18nContext = useContext(I18nContext);\n\n  var _ref = getHasUsedI18nextProvider() ? ReactI18nContext || {} : {},\n      i18nFromContext = _ref.i18n;\n\n  var i18n = i18nFromProps || i18nFromContext || getI18n(); // opt out if is a cloned instance, eg. created by i18next-express-middleware on request\n  // -> do not set initial stuff on server side\n\n  if (i18n.options && i18n.options.isClone) return; // nextjs / SSR: getting data from next.js or other ssr stack\n\n  if (initialI18nStore && !i18n.initializedStoreOnce) {\n    i18n.services.resourceStore.data = initialI18nStore; // add namespaces to the config - so a languageChange call loads all namespaces needed\n\n    i18n.options.ns = Object.values(initialI18nStore).reduce(function (mem, lngResources) {\n      Object.keys(lngResources).forEach(function (ns) {\n        if (mem.indexOf(ns) < 0) mem.push(ns);\n      });\n      return mem;\n    }, i18n.options.ns);\n    i18n.initializedStoreOnce = true;\n    i18n.isInitialized = true;\n  }\n\n  if (initialLanguage && !i18n.initializedLanguageOnce) {\n    i18n.changeLanguage(initialLanguage);\n    i18n.initializedLanguageOnce = true;\n  }\n}","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/node_modules/react-i18next/dist/es/useSSR.js"],"names":["useContext","getI18n","getHasUsedI18nextProvider","I18nContext","useSSR","initialI18nStore","initialLanguage","props","arguments","length","undefined","i18nFromProps","i18n","ReactI18nContext","_ref","i18nFromContext","options","isClone","initializedStoreOnce","services","resourceStore","data","ns","Object","values","reduce","mem","lngResources","keys","forEach","indexOf","push","isInitialized","initializedLanguageOnce","changeLanguage"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,OAAT,EAAkBC,yBAAlB,EAA6CC,WAA7C,QAAgE,WAAhE;AACA,OAAO,SAASC,MAAT,CAAgBC,gBAAhB,EAAkCC,eAAlC,EAAmD;AACxD,MAAIC,KAAK,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAhF;AACA,MAAIG,aAAa,GAAGJ,KAAK,CAACK,IAA1B;AACA,MAAIC,gBAAgB,GAAGb,UAAU,CAACG,WAAD,CAAjC;;AAEA,MAAIW,IAAI,GAAGZ,yBAAyB,KAAKW,gBAAgB,IAAI,EAAzB,GAA8B,EAAlE;AAAA,MACIE,eAAe,GAAGD,IAAI,CAACF,IAD3B;;AAGA,MAAIA,IAAI,GAAGD,aAAa,IAAII,eAAjB,IAAoCd,OAAO,EAAtD,CARwD,CAQE;AAC1D;;AAEA,MAAIW,IAAI,CAACI,OAAL,IAAgBJ,IAAI,CAACI,OAAL,CAAaC,OAAjC,EAA0C,OAXc,CAWN;;AAElD,MAAIZ,gBAAgB,IAAI,CAACO,IAAI,CAACM,oBAA9B,EAAoD;AAClDN,IAAAA,IAAI,CAACO,QAAL,CAAcC,aAAd,CAA4BC,IAA5B,GAAmChB,gBAAnC,CADkD,CACG;;AAErDO,IAAAA,IAAI,CAACI,OAAL,CAAaM,EAAb,GAAkBC,MAAM,CAACC,MAAP,CAAcnB,gBAAd,EAAgCoB,MAAhC,CAAuC,UAAUC,GAAV,EAAeC,YAAf,EAA6B;AACpFJ,MAAAA,MAAM,CAACK,IAAP,CAAYD,YAAZ,EAA0BE,OAA1B,CAAkC,UAAUP,EAAV,EAAc;AAC9C,YAAII,GAAG,CAACI,OAAJ,CAAYR,EAAZ,IAAkB,CAAtB,EAAyBI,GAAG,CAACK,IAAJ,CAAST,EAAT;AAC1B,OAFD;AAGA,aAAOI,GAAP;AACD,KALiB,EAKfd,IAAI,CAACI,OAAL,CAAaM,EALE,CAAlB;AAMAV,IAAAA,IAAI,CAACM,oBAAL,GAA4B,IAA5B;AACAN,IAAAA,IAAI,CAACoB,aAAL,GAAqB,IAArB;AACD;;AAED,MAAI1B,eAAe,IAAI,CAACM,IAAI,CAACqB,uBAA7B,EAAsD;AACpDrB,IAAAA,IAAI,CAACsB,cAAL,CAAoB5B,eAApB;AACAM,IAAAA,IAAI,CAACqB,uBAAL,GAA+B,IAA/B;AACD;AACF","sourcesContent":["import { useContext } from 'react';\nimport { getI18n, getHasUsedI18nextProvider, I18nContext } from './context';\nexport function useSSR(initialI18nStore, initialLanguage) {\n  var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var i18nFromProps = props.i18n;\n  var ReactI18nContext = useContext(I18nContext);\n\n  var _ref = getHasUsedI18nextProvider() ? ReactI18nContext || {} : {},\n      i18nFromContext = _ref.i18n;\n\n  var i18n = i18nFromProps || i18nFromContext || getI18n(); // opt out if is a cloned instance, eg. created by i18next-express-middleware on request\n  // -> do not set initial stuff on server side\n\n  if (i18n.options && i18n.options.isClone) return; // nextjs / SSR: getting data from next.js or other ssr stack\n\n  if (initialI18nStore && !i18n.initializedStoreOnce) {\n    i18n.services.resourceStore.data = initialI18nStore; // add namespaces to the config - so a languageChange call loads all namespaces needed\n\n    i18n.options.ns = Object.values(initialI18nStore).reduce(function (mem, lngResources) {\n      Object.keys(lngResources).forEach(function (ns) {\n        if (mem.indexOf(ns) < 0) mem.push(ns);\n      });\n      return mem;\n    }, i18n.options.ns);\n    i18n.initializedStoreOnce = true;\n    i18n.isInitialized = true;\n  }\n\n  if (initialLanguage && !i18n.initializedLanguageOnce) {\n    i18n.changeLanguage(initialLanguage);\n    i18n.initializedLanguageOnce = true;\n  }\n}"]},"metadata":{},"sourceType":"module"}