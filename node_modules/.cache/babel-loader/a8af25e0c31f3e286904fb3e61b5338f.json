{"ast":null,"code":"import _objectDestructuringEmpty from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\nimport _classCallCheck from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/views/Consumption/ConsumptionDetails.js\";\nimport React from \"react\";\nimport ReactDOM from 'react-dom';\nimport jexcel from 'jexcel'; // import \"./style.css\";\n\nimport \"../../../node_modules/jexcel/dist/jexcel.css\";\nimport * as JsStoreFunctions from \"../../CommonComponent/JsStoreFunctions.js\";\nimport { Card, CardBody, CardHeader, Label, Input, FormGroup, CardFooter, Button, Col, Form, FormFeedback, Row } from 'reactstrap';\nimport { Formik } from 'formik';\nimport CryptoJS from 'crypto-js';\nimport { SECRET_KEY } from '../../Constants.js';\n\nvar ConsumptionDetails = /*#__PURE__*/function (_React$Component) {\n  _inherits(ConsumptionDetails, _React$Component);\n\n  function ConsumptionDetails(props) {\n    var _this;\n\n    _classCallCheck(this, ConsumptionDetails);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConsumptionDetails).call(this, props));\n\n    _this.componentDidMount = function () {// JsStoreFunctions.getProgramDataList().then(response => {\n      //     var proList=[];\n      //     for (var i = 0; i < response.length; i++) {\n      //         var bytes = CryptoJS.AES.decrypt(response[i].programName, SECRET_KEY);\n      //         var programName = bytes.toString(CryptoJS.enc.Utf8);\n      //         var programJson = {\n      //             name: programName.toString() + \"~v\" + response[i].version,\n      //             id: response[i].id\n      //         }\n      //         proList[i] = programJson\n      //     }\n      //     this.setState({\n      //         programList: proList\n      //     })\n      // }).catch(error => {\n      //     console.log(\"Error occurred\")\n      // })\n      // JsStoreFunctions.getProductCategoryList().then(response => {\n      //     this.setState({\n      //         categoryList: response\n      //     })\n      // }).catch(error => {\n      //     console.log(\"Error occurred\")\n      // })\n    };\n\n    _this.addRow = function () {// document.getElementById(\"saveButtonDiv\").style.display = \"block\";\n      // this.el.insertRow();\n    };\n\n    _this.saveData = function () {// var validation = this.checkValidation();\n      // if (validation == true) {\n      //     console.log(\"after check validation\")\n      //     var tableJson = this.el.getJson();\n      //     var db1;\n      //     var storeOS;\n      //     var openRequest = indexedDB.open('fasp', 1);\n      //     openRequest.onupgradeneeded = function (e) {\n      //         var db1 = e.target.result;\n      //         if (!db1.objectStoreNames.contains('programData')) {\n      //             storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('lastSyncDate')) {\n      //             storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('language')) {\n      //             storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('country')) {\n      //             storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('currency')) {\n      //             storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('unit')) {\n      //             storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('unitType')) {\n      //             storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('organisation')) {\n      //             storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('healthArea')) {\n      //             storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('region')) {\n      //             storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('fundingSource')) {\n      //             storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('subFundingSource')) {\n      //             storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('product')) {\n      //             storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('productCategory')) {\n      //             storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('dataSource')) {\n      //             storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('dataSourceType')) {\n      //             storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('shipmentStatus')) {\n      //             storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n      //             storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('manufacturer')) {\n      //             storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('logisticsUnit')) {\n      //             storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('planningUnit')) {\n      //             storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n      //         }\n      //     };\n      //     openRequest.onsuccess = function (e) {\n      //         db1 = e.target.result;\n      //         var transaction = db1.transaction(['programData'], 'readwrite');\n      //         var programTransaction = transaction.objectStore('programData');\n      //         var programRequest = programTransaction.get(this.state.programId);\n      //         programRequest.onsuccess = function (event) {\n      //             var programDataBytes = CryptoJS.AES.decrypt(programRequest.result.programData, SECRET_KEY);\n      //             var programData = programDataBytes.toString(CryptoJS.enc.Utf8);\n      //             var programJson = JSON.parse(programData);\n      //             var programProductList = programJson.programProductList;\n      //             var consumptionDataList = [];\n      //             var consumptionDataArr = [];\n      //             for (var i = 0; i < programProductList.length; i++) {\n      //                 if (programProductList[i].product.productId == this.state.productId) {\n      //                     consumptionDataList = programProductList[i].product.consumptionData;\n      //                 }\n      //             }\n      //             for (var i = 0; i < consumptionDataList.length; i++) {\n      //                 var map = new Map(Object.entries(tableJson[i]))\n      //                 consumptionDataList[i].startDate = map.get(\"0\");\n      //                 consumptionDataList[i].stopDate = map.get(\"1\");\n      //                 consumptionDataList[i].region.regionId = map.get(\"2\");\n      //                 consumptionDataList[i].daysOfStockOut = parseInt(map.get(\"3\"));\n      //                 consumptionDataList[i].dataSource.dataSourceId = map.get(\"4\");\n      //                 consumptionDataList[i].logisticsUnit.logisticsUnitId = map.get(\"5\");\n      //                 consumptionDataList[i].planningUnit.planningUnitId = map.get(\"6\");\n      //                 consumptionDataList[i].packSize = map.get(\"7\");\n      //                 consumptionDataList[i].logisticsUnit.qtyOfPlanningUnits = map.get(\"8\");\n      //                 consumptionDataList[i].logisticsUnit.planningUnit.qtyOfForecastingUnits = map.get(\"9\");\n      //                 consumptionDataList[i].planningUnit.qtyOfForecastingUnits = map.get(\"10\");\n      //                 consumptionDataList[i].consumptionQty = map.get(\"11\");\n      //             }\n      //             for (var i = consumptionDataList.length; i < tableJson.length; i++) {\n      //                 var map = new Map(Object.entries(tableJson[i]))\n      //                 var json = {\n      //                     startDate: map.get(\"0\"),\n      //                     stopDate: map.get(\"1\"),\n      //                     region: {\n      //                         regionId: map.get(\"2\")\n      //                     },\n      //                     daysOfStockOut: map.get(\"3\"),\n      //                     dataSource: {\n      //                         dataSourceId: map.get(\"4\")\n      //                     },\n      //                     logisticsUnit: {\n      //                         logisticsUnitId: map.get(\"5\"),\n      //                         qtyOfPlanningUnits: map.get(\"8\"),\n      //                         planningUnit: {\n      //                             qtyOfForecastingUnits: map.get(\"9\")\n      //                         }\n      //                     },\n      //                     planningUnit: {\n      //                         planningUnitId: map.get(\"6\"),\n      //                         qtyOfForecastingUnits: map.get(\"10\")\n      //                     },\n      //                     packSize: map.get(\"7\"),\n      //                     consumptionQty: map.get(\"11\")\n      //                 }\n      //                 consumptionDataList[i] = json;\n      //             }\n      //             var productFound = 0;\n      //             for (var i = 0; i < programProductList.length; i++) {\n      //                 if (programProductList[i].product.productId == this.state.productId) {\n      //                     productFound = 1;\n      //                     programProductList[i].product.consumptionData = consumptionDataList;\n      //                 }\n      //             }\n      //             if (productFound == 0) {\n      //                 var length = programProductList.length;\n      //                 programProductList[length] = {\n      //                     product: {}\n      //                 }\n      //                 programProductList[length].product = {\n      //                     productId: this.state.productId,\n      //                     consumptionData: consumptionDataList\n      //                 }\n      //             }\n      //             programJson.programProductList = programProductList;\n      //             programRequest.result.programData = (CryptoJS.AES.encrypt(JSON.stringify(programJson), SECRET_KEY)).toString();\n      //             var putRequest = programTransaction.put(programRequest.result);\n      //             putRequest.onerror = function (event) {\n      //                 // Handle errors!\n      //             };\n      //             putRequest.onsuccess = function (event) {\n      //                 $(\"#saveButtonDiv\").hide();\n      //                 this.setState({\n      //                     message: `${CONSUMPTION_SAVE_SUCCESS}`,\n      //                     changedFlag: 0\n      //                 })\n      //             }.bind(this)\n      //         }.bind(this)\n      //     }.bind(this)\n      // } else {\n      //     this.setState({\n      //         message: `${INVALID_DATA}`\n      //     })\n      // }\n    };\n\n    _this.changed = function (instance, cell, x, y, value) {//     $(\"#saveButtonDiv\").show();\n      //     this.setState({\n      //         changedFlag: 1\n      //     })\n      //     if (x == 0) {\n      //         var col = (\"A\").concat(parseInt(y) + 1);\n      //         console.log(col);\n      //         if (value == \"\") {\n      //             console.log(\"in if\")\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setStyle(col, \"background-color\", \"yellow\");\n      //             this.el.setComments(col, `${REQUIRED_MSG}`);\n      //         } else {\n      //             console.log(\"in else\")\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setComments(col, \"\");\n      //         }\n      //     }\n      //     if (x == 1) {\n      //         var col = (\"B\").concat(parseInt(y) + 1);\n      //         if (value == \"\") {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setStyle(col, \"background-color\", \"yellow\");\n      //             this.el.setComments(col, `${REQUIRED_MSG}`);\n      //         } else {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setComments(col, \"\");\n      //         }\n      //         if (value != \"\" && Date.parse(this.el.getValueFromCoords(0, y)) > Date.parse(value)) {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setStyle(col, \"background-color\", \"yellow\");\n      //             this.el.setComments(col, `${STOP_DATE_GREATER}`);\n      //         } else {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setComments(col, \"\");\n      //         }\n      //     }\n      //     if (x == 3) {\n      //         var col = (\"D\").concat(parseInt(y) + 1);\n      //         if (value >= 0) {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setComments(col, \"\");\n      //         } else {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setStyle(col, \"background-color\", \"yellow\");\n      //             this.el.setComments(col, `${NUMERIC_ONLY}`);\n      //         }\n      //     }\n      //     if (x == 11) {\n      //         var col = (\"L\").concat(parseInt(y) + 1);\n      //         if (value > 0 && value != \"\") {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setComments(col, \"\");\n      //         } else {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setStyle(col, \"background-color\", \"yellow\");\n      //             this.el.setComments(col, `${NUMERIC_VALUE_GREATER_THAN_0}`);\n      //         }\n      //     }\n      //     var logisticsUnitData = {}\n      //     var planningUnitData = {}\n      //     var elInstance = this.el;\n      //     if (x == 11 && elInstance.getValueFromCoords(5, y) > 0) {\n      //         var qtyInTermsOfForecastUnit = parseFloat(elInstance.getValueFromCoords(8, y) * elInstance.getValueFromCoords(9, y) * elInstance.getValueFromCoords(11, y));\n      //         elInstance.setValueFromCoords(12, y, qtyInTermsOfForecastUnit, true)\n      //     }\n      //     if (x == 11 && elInstance.getValueFromCoords(6, y) > 0) {\n      //         var qtyInTermsOfForecastUnit = parseFloat(elInstance.getValueFromCoords(7, y) * elInstance.getValueFromCoords(10, y) * elInstance.getValueFromCoords(11, y));\n      //         elInstance.setValueFromCoords(12, y, qtyInTermsOfForecastUnit, true)\n      //     }\n      //     if (x == 7 && value > 0) {\n      //         elInstance.setValueFromCoords(5, y, \"\", true)\n      //         if (elInstance.getValueFromCoords(6, y) > 0 && elInstance.getValueFromCoords(11, y) > 0) {\n      //             var qtyInTermsOfForecastUnit = parseFloat(elInstance.getValueFromCoords(7, y) * elInstance.getValueFromCoords(10, y) * elInstance.getValueFromCoords(11, y));\n      //             elInstance.setValueFromCoords(12, y, qtyInTermsOfForecastUnit, true)\n      //         }\n      //     }\n      //     if (x == 5 && value != \"\" && value != 0) {\n      //         var col = (\"F\").concat(parseInt(y) + 1);\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setComments(col, \"\");\n      //         var col = (\"G\").concat(parseInt(y) + 1);\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setComments(col, \"\");\n      //         var db1;\n      //         var storeOS;\n      //         var openRequest = indexedDB.open('fasp', 1);\n      //         openRequest.onupgradeneeded = function (e) {\n      //             var db1 = e.target.result;\n      //             if (!db1.objectStoreNames.contains('programData')) {\n      //                 storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('lastSyncDate')) {\n      //                 storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('language')) {\n      //                 storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('country')) {\n      //                 storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('currency')) {\n      //                 storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('unit')) {\n      //                 storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('unitType')) {\n      //                 storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('organisation')) {\n      //                 storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('healthArea')) {\n      //                 storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('region')) {\n      //                 storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('fundingSource')) {\n      //                 storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('subFundingSource')) {\n      //                 storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('product')) {\n      //                 storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('productCategory')) {\n      //                 storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('dataSource')) {\n      //                 storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('dataSourceType')) {\n      //                 storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('shipmentStatus')) {\n      //                 storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n      //                 storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('manufacturer')) {\n      //                 storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('logisticsUnit')) {\n      //                 storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('planningUnit')) {\n      //                 storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n      //             }\n      //         };\n      //         openRequest.onsuccess = function (e) {\n      //             db1 = e.target.result;\n      //             var luTransaction = db1.transaction(['logisticsUnit'], 'readwrite');\n      //             var luObjectStore = luTransaction.objectStore('logisticsUnit');\n      //             var luRequest = luObjectStore.get(parseInt(value));\n      //             luRequest.onsuccess = function (e) {\n      //                 logisticsUnitData = luRequest.result;\n      //                 elInstance.setValueFromCoords(6, y, \"\", true)\n      //                 elInstance.setValueFromCoords(7, y, \"\", true)\n      //                 elInstance.setValueFromCoords(8, y, logisticsUnitData.qtyOfPlanningUnits, true)\n      //                 elInstance.setValueFromCoords(9, y, logisticsUnitData.planningUnit.qtyOfForecastingUnits, true)\n      //                 if (elInstance.getValueFromCoords(11, y) > 0) {\n      //                     var qtyInTermsOfForecastUnit = parseFloat(logisticsUnitData.qtyOfPlanningUnits * logisticsUnitData.planningUnit.qtyOfForecastingUnits * elInstance.getValueFromCoords(11, y));\n      //                     elInstance.setValueFromCoords(12, y, qtyInTermsOfForecastUnit, true)\n      //                 }\n      //             }\n      //         }\n      //     } else if (x == 5 && elInstance.getValueFromCoords(6, y) == \"\") {\n      //         var col = (\"F\").concat(parseInt(y) + 1);\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setStyle(col, \"background-color\", \"yellow\");\n      //         this.el.setComments(col, `${EITHER_LU_OR_PU}`);\n      //     }\n      //     if (x == 6 && value != \"\" && value != 0) {\n      //         var col = (\"G\").concat(parseInt(y) + 1);\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setComments(col, \"\");\n      //         var col = (\"F\").concat(parseInt(y) + 1);\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setComments(col, \"\");\n      //         var db1;\n      //         var storeOS;\n      //         var openRequest = indexedDB.open('fasp', 1);\n      //         openRequest.onupgradeneeded = function (e) {\n      //             var db1 = e.target.result;\n      //             if (!db1.objectStoreNames.contains('programData')) {\n      //                 storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('lastSyncDate')) {\n      //                 storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('language')) {\n      //                 storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('country')) {\n      //                 storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('currency')) {\n      //                 storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('unit')) {\n      //                 storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('unitType')) {\n      //                 storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('organisation')) {\n      //                 storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('healthArea')) {\n      //                 storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('region')) {\n      //                 storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('fundingSource')) {\n      //                 storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('subFundingSource')) {\n      //                 storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('product')) {\n      //                 storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('productCategory')) {\n      //                 storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('dataSource')) {\n      //                 storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('dataSourceType')) {\n      //                 storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('shipmentStatus')) {\n      //                 storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n      //                 storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('manufacturer')) {\n      //                 storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('logisticsUnit')) {\n      //                 storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n      //             }\n      //             if (!db1.objectStoreNames.contains('planningUnit')) {\n      //                 storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n      //             }\n      //         };\n      //         openRequest.onsuccess = function (e) {\n      //             db1 = e.target.result;\n      //             var puTransaction = db1.transaction(['planningUnit'], 'readwrite');\n      //             var puObjectStore = puTransaction.objectStore('planningUnit');\n      //             var puRequest = puObjectStore.get(parseInt(value));\n      //             puRequest.onsuccess = function (e) {\n      //                 planningUnitData = puRequest.result;\n      //                 elInstance.setValueFromCoords(5, y, \"\", true)\n      //                 elInstance.setValueFromCoords(10, y, planningUnitData.qtyOfForecastingUnits, true)\n      //                 if (elInstance.getValueFromCoords(11, y) > 0) {\n      //                     var qtyInTermsOfForecastUnit = parseFloat(planningUnitData.qtyOfForecastingUnits * elInstance.getValueFromCoords(7, y) * elInstance.getValueFromCoords(11, y));\n      //                     elInstance.setValueFromCoords(12, y, qtyInTermsOfForecastUnit, true)\n      //                 }\n      //             }\n      //         }\n      //     } else if (x == 6 && elInstance.getValueFromCoords(5, y) == \"\") {\n      //         var col = (\"G\").concat(parseInt(y) + 1);\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setStyle(col, \"background-color\", \"yellow\");\n      //         this.el.setComments(col, `${EITHER_LU_OR_PU}`);\n      //     }\n      //     if (x == 7) {\n      //         var col = (\"H\").concat(parseInt(y) + 1);\n      //         if (value > 0 && value != \"\" && elInstance.getValueFromCoords(5, y) == \"\") {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setComments(col, \"\");\n      //         } else if (elInstance.getValueFromCoords(5, y) == \"\") {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setStyle(col, \"background-color\", \"yellow\");\n      //             this.el.setComments(col, `${NUMERIC_VALUE_GREATER_THAN_0}`);\n      //         }\n      //     }\n    }.bind(_assertThisInitialized(_this));\n\n    _this.options = props.options;\n    _this.state = {\n      programList: [],\n      categoryList: [],\n      productList: [],\n      consumptionDataList: [],\n      changedFlag: []\n    };\n    _this.getProductList = _this.getProductList.bind(_assertThisInitialized(_this));\n    _this.getConsumptionData = _this.getConsumptionData.bind(_assertThisInitialized(_this));\n    _this.saveData = _this.saveData.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ConsumptionDetails, [{\n    key: \"checkValidation\",\n    value: function checkValidation() {// var valid = true;\n      // var json = this.el.getJson();\n      // console.log(json)\n      // for (var y = 0; y < json.length; y++) {\n      //     var col = (\"A\").concat(parseInt(y) + 1);\n      //     var value = this.el.getValueFromCoords(0, y);\n      //     if (value == \"Invalid date\" || value == \"\") {\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setStyle(col, \"background-color\", \"yellow\");\n      //         this.el.setComments(col, `${REQUIRED_MSG}`);\n      //         valid = false;\n      //     } else {\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setComments(col, \"\");\n      //     }\n      //     var col = (\"B\").concat(parseInt(y) + 1);\n      //     var value = this.el.getValueFromCoords(1, y);\n      //     if (value == \"Invalid date\" || value == \"\") {\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setStyle(col, \"background-color\", \"yellow\");\n      //         this.el.setComments(col, `${REQUIRED_MSG}`);\n      //         valid = false;\n      //     } else {\n      //         if (Date.parse(this.el.getValueFromCoords(0, y)) > Date.parse(value)) {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setStyle(col, \"background-color\", \"yellow\");\n      //             this.el.setComments(col, `${STOP_DATE_GREATER}`);\n      //             valid = false;\n      //         } else {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setComments(col, \"\");\n      //         }\n      //     }\n      //     var col = (\"C\").concat(parseInt(y) + 1);\n      //     var value = this.el.getValueFromCoords(2, y);\n      //     if (value == \"\") {\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setStyle(col, \"background-color\", \"yellow\");\n      //         this.el.setComments(col, `${REQUIRED_MSG}`);\n      //         valid = false;\n      //     } else {\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setComments(col, \"\");\n      //     }\n      //     var col = (\"D\").concat(parseInt(y) + 1);\n      //     var value = this.el.getValueFromCoords(3, y);\n      //     console.log(value);\n      //     if (value === \"\") {\n      //         console.log(\"in value is blank\");\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setStyle(col, \"background-color\", \"yellow\");\n      //         this.el.setComments(col, `${REQUIRED_MSG}`);\n      //         valid = false;\n      //     } else {\n      //         if (value >= 0) {\n      //             console.log(\"in value greater than 0\")\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setComments(col, \"\");\n      //         } else {\n      //             console.log(\"in else for days of stock out\");\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setStyle(col, \"background-color\", \"yellow\");\n      //             this.el.setComments(col, `${NUMERIC_ONLY}`);\n      //             valid = false;\n      //         }\n      //     }\n      //     var col = (\"E\").concat(parseInt(y) + 1);\n      //     var value = this.el.getValueFromCoords(4, y);\n      //     if (value == \"\") {\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setStyle(col, \"background-color\", \"yellow\");\n      //         this.el.setComments(col, `${REQUIRED_MSG}`);\n      //         valid = false;\n      //     } else {\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setComments(col, \"\");\n      //     }\n      //     var col1 = (\"F\").concat(parseInt(y) + 1);\n      //     var value1 = this.el.getValueFromCoords(5, y);\n      //     var col2 = (\"G\").concat(parseInt(y) + 1);\n      //     var value2 = this.el.getValueFromCoords(6, y);\n      //     if (value1 == \"\" && value2 == \"\") {\n      //         this.el.setStyle(col1, \"background-color\", \"transparent\");\n      //         this.el.setStyle(col1, \"background-color\", \"yellow\");\n      //         this.el.setComments(col1, `${EITHER_LU_OR_PU}`);\n      //         this.el.setStyle(col2, \"background-color\", \"transparent\");\n      //         this.el.setStyle(col2, \"background-color\", \"yellow\");\n      //         this.el.setComments(col2, `${EITHER_LU_OR_PU}`);\n      //         valid = false;\n      //     } else {\n      //         this.el.setStyle(col1, \"background-color\", \"transparent\");\n      //         this.el.setComments(col1, \"\");\n      //         this.el.setStyle(col2, \"background-color\", \"transparent\");\n      //         this.el.setComments(col2, \"\");\n      //     }\n      //     var col = (\"H\").concat(parseInt(y) + 1);\n      //     var value = this.el.getValueFromCoords(7, y);\n      //     if (value2 > 0) {\n      //         if (value == \"\") {\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setStyle(col, \"background-color\", \"yellow\");\n      //             this.el.setComments(col, `${REQUIRED_MSG}`);\n      //             valid = false;\n      //         } else {\n      //             if (value > 0) {\n      //                 console.log(\"in value greater than 0\")\n      //                 this.el.setStyle(col, \"background-color\", \"transparent\");\n      //                 this.el.setComments(col, \"\");\n      //             } else {\n      //                 console.log(\"in else for days of stock out\");\n      //                 this.el.setStyle(col, \"background-color\", \"transparent\");\n      //                 this.el.setStyle(col, \"background-color\", \"yellow\");\n      //                 this.el.setComments(col, `${NUMERIC_VALUE_GREATER_THAN_0}`);\n      //                 valid = false;\n      //             }\n      //         }\n      //     }\n      //     var col = (\"L\").concat(parseInt(y) + 1);\n      //     var value = this.el.getValueFromCoords(11, y);\n      //     console.log(value);\n      //     if (value === \"\") {\n      //         console.log(\"in value is blank\");\n      //         this.el.setStyle(col, \"background-color\", \"transparent\");\n      //         this.el.setStyle(col, \"background-color\", \"yellow\");\n      //         this.el.setComments(col, `${REQUIRED_MSG}`);\n      //         valid = false;\n      //     } else {\n      //         if (value > 0) {\n      //             console.log(\"in value greater than 0\")\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setComments(col, \"\");\n      //         } else {\n      //             console.log(\"in else for days of stock out\");\n      //             this.el.setStyle(col, \"background-color\", \"transparent\");\n      //             this.el.setStyle(col, \"background-color\", \"yellow\");\n      //             this.el.setComments(col, `${NUMERIC_VALUE_GREATER_THAN_0}`);\n      //             valid = false;\n      //         }\n      //     }\n      // }\n      // return valid;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // const lan = 'en';\n      // const { programList } = this.state;\n      // let programs = programList.length > 0\n      //     && programList.map((item, i) => {\n      //         return (\n      //             // {this.getText(dataSource.label,lan)}\n      //             <option key={i} value={item.programId}>{this.getText(item.programName, lan)}</option>\n      //         )\n      //     }, this);\n      // const { categoryList } = this.state;\n      // let categoryItems = categoryList.length > 0\n      //     && categoryList.map((item, i) => {\n      //         return (\n      //             <option key={i} value={item.id}>{item.name}</option>\n      //         )\n      //     }, this);\n      // const { productList } = this.state;\n      // let productItems = productList.length > 0\n      //     && productList.map((item, i) => {\n      //         return (\n      //             <option key={i} value={item.id}>{item.name}</option>\n      //         )\n      //     }, this);\n      return React.createElement(React.Fragment, null, React.createElement(Col, {\n        xs: \"12\",\n        sm: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420\n        },\n        __self: this\n      }, React.createElement(Formik, {\n        render: function render(_ref) {\n          _objectDestructuringEmpty(_ref);\n\n          return React.createElement(Form, {\n            name: \"simpleForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 425\n            },\n            __self: this\n          }, React.createElement(CardHeader, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 426\n            },\n            __self: this\n          }, React.createElement(\"strong\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 427\n            },\n            __self: this\n          }, \"Consumption details\")), React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 429\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 430\n            },\n            __self: this\n          }, React.createElement(Col, {\n            xs: \"8\",\n            sm: \"8\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 432\n            },\n            __self: this\n          }, React.createElement(Row, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 433\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 434\n            },\n            __self: this\n          }, React.createElement(Col, {\n            md: \"4\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 435\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"select\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 436\n            },\n            __self: this\n          }, \"Program\"), React.createElement(Input, {\n            type: \"select\",\n            value: _this2.state.programId,\n            name: \"programId\",\n            id: \"programId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 439\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"0\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 442\n            },\n            __self: this\n          }, \"Please select\")))), React.createElement(Col, {\n            md: \"2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 447\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"button\",\n            onClick: function onClick() {\n              return _this2.formSubmit();\n            },\n            size: \"sm\",\n            color: \"primary\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 448\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-dot-circle-o\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 448\n            },\n            __self: this\n          }), \"Go\")))))));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      })))) // <div>\n      //     <div class=\"row\">\n      //         <div class=\"col-md-12\">\n      //             <div class=\"panel panel-default\">\n      //                 <div class=\"panel-heading\">\n      //                     <h3 class=\"panel-title\">{TITLE_CONSUMPTION_DETAILS}</h3>\n      //                 </div>\n      //                 <div class=\"panel-body\">\n      //                     {this.state.message}\n      //                     <div id=\"filter\">\n      //                         <div class=\"panel panel-warning\">\n      //                             <div class=\"panel-body\">\n      //                                 <form name=\"form1\" id=\"form1\">\n      //                                     <div class=\"row\">\n      //                                         <div class=\"col-md-2\">\n      //                                             <div class=\"form-group\">\n      //                                                 {PROGRAM} : <select id=\"programId\" name=\"programId\">\n      //                                                     {programItems}\n      //                                                 </select>\n      //                                             </div>\n      //                                         </div>\n      //                                         <div class=\"col-md-2\">\n      //                                             <div class=\"form-group\">\n      //                                                 {CATEGORY} : <select id=\"categoryId\" name=\"categoryId\" onChange={this.getProductList}>\n      //                                                     {categoryItems}\n      //                                                 </select>\n      //                                             </div>\n      //                                         </div>\n      //                                         <div class=\"col-md-2\">\n      //                                             <div class=\"form-group\">\n      //                                                 {PRODUCT} : <select id=\"productId\" name=\"productId\">\n      //                                                     {productItems}\n      //                                                 </select>\n      //                                             </div>\n      //                                         </div>\n      //                                         <div class=\"col-md-2 btn-filter\">\n      //                                             <button type=\"button\" class=\"btn-info btn-sm\" name=\"btnSubmit\" onClick={this.getConsumptionData}>{BTN_GO}</button>\n      //                                         </div>\n      //                                     </div>\n      //                                 </form>\n      //                             </div>\n      //                         </div>\n      //                     </div>\n      //                     <br />\n      //                     <br />\n      //                     <div id=\"consumptionId\">{this.options}</div>\n      //                     <div />\n      //                     <br />\n      //                     <input\n      //                         type=\"button\"\n      //                         value={ADD_ROW}\n      //                         onClick={() => this.addRow()}\n      //                     />\n      //                     <div id=\"saveButtonDiv\" style={{ \"display\": \"none\" }}>\n      //                         <input\n      //                             type=\"button\"\n      //                             value={BTN_SAVE}\n      //                             onClick={() => this.saveData()}\n      //                         />\n      //                     </div>\n      //                 </div>\n      //             </div>\n      //         </div>\n      //     </div>\n      // </div>\n      ;\n    }\n  }, {\n    key: \"getProductList\",\n    value: function getProductList(event) {// var db1;\n      // var storeOS;\n      // var openRequest = indexedDB.open('fasp', 1);\n      // openRequest.onupgradeneeded = function (e) {\n      //     var db1 = e.target.result;\n      //     if (!db1.objectStoreNames.contains('programData')) {\n      //         storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('lastSyncDate')) {\n      //         storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('language')) {\n      //         storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('country')) {\n      //         storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('currency')) {\n      //         storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('unit')) {\n      //         storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('unitType')) {\n      //         storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('organisation')) {\n      //         storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('healthArea')) {\n      //         storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('region')) {\n      //         storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('fundingSource')) {\n      //         storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('subFundingSource')) {\n      //         storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('product')) {\n      //         storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('productCategory')) {\n      //         storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('dataSource')) {\n      //         storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('dataSourceType')) {\n      //         storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('shipmentStatus')) {\n      //         storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n      //         storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('manufacturer')) {\n      //         storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('logisticsUnit')) {\n      //         storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n      //     }\n      //     if (!db1.objectStoreNames.contains('planningUnit')) {\n      //         storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n      //     }\n      // };\n      // openRequest.onsuccess = function (e) {\n      //     db1 = e.target.result;\n      //     var productTransaction = db1.transaction(['product'], 'readwrite');\n      //     var productOs = productTransaction.objectStore('product');\n      //     var productRequest = productOs.getAll();\n      //     var proList = []\n      //     productRequest.onerror = function (event) {\n      //         // Handle errors!\n      //     };\n      //     productRequest.onsuccess = function (event) {\n      //         var myResult = [];\n      //         myResult = productRequest.result;\n      //         for (var i = 0; i < myResult.length; i++) {\n      //             if (myResult[i].productCategory.productCategoryId == $(\"#categoryId\").val()) {\n      //                 var productJson = {\n      //                     name: myResult[i].label.labelEn,\n      //                     id: myResult[i].productId\n      //                 }\n      //                 proList[i] = productJson\n      //             }\n      //         }\n      //         this.setState({\n      //             productList: proList\n      //         })\n      //     }.bind(this);\n      // }.bind(this)\n      // event.target.value    \n    }\n  }, {\n    key: \"getConsumptionData\",\n    value: function getConsumptionData() {// this.setState({\n      //     productId: $(\"#productId\").val(),\n      //     productCategoryId: $(\"#categoryId\").val(),\n      //     programId: $(\"#programId\").val()\n      // })\n      // if (this.state.changedFlag == 1) {\n      //     alert(`${CLICK_SAVE_TO_CONTINUE}`)\n      // } else {\n      //     this.el = jexcel(ReactDOM.findDOMNode(this).children[0].children[0].children[0].children[1].children[3], '');\n      //     this.el.destroy();\n      //     var db1;\n      //     var storeOS;\n      //     var openRequest = indexedDB.open('fasp', 1);\n      //     openRequest.onupgradeneeded = function (e) {\n      //         var db1 = e.target.result;\n      //         if (!db1.objectStoreNames.contains('programData')) {\n      //             storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('lastSyncDate')) {\n      //             storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('language')) {\n      //             storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('country')) {\n      //             storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('currency')) {\n      //             storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('unit')) {\n      //             storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('unitType')) {\n      //             storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('organisation')) {\n      //             storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('healthArea')) {\n      //             storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('region')) {\n      //             storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('fundingSource')) {\n      //             storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('subFundingSource')) {\n      //             storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('product')) {\n      //             storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('productCategory')) {\n      //             storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('dataSource')) {\n      //             storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('dataSourceType')) {\n      //             storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('shipmentStatus')) {\n      //             storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n      //             storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('manufacturer')) {\n      //             storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('logisticsUnit')) {\n      //             storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n      //         }\n      //         if (!db1.objectStoreNames.contains('planningUnit')) {\n      //             storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n      //         }\n      //     };\n      //     openRequest.onsuccess = function (e) {\n      //         db1 = e.target.result;\n      //         var transaction = db1.transaction(['programData'], 'readwrite');\n      //         var programTransaction = transaction.objectStore('programData');\n      //         var programRequest = programTransaction.get(this.state.programId);\n      //         programRequest.onsuccess = function (event) {\n      //             var programDataBytes = CryptoJS.AES.decrypt(programRequest.result.programData, SECRET_KEY);\n      //             var programData = programDataBytes.toString(CryptoJS.enc.Utf8);\n      //             var programJson = JSON.parse(programData);\n      //             var programProductList = programJson.programProductList;\n      //             var consumptionDataList = [];\n      //             var consumptionDataArr = [];\n      //             for (var i = 0; i < programProductList.length; i++) {\n      //                 if (programProductList[i].product.productId == this.state.productId) {\n      //                     consumptionDataList = programProductList[i].product.consumptionData;\n      //                 }\n      //             }\n      //             this.setState({\n      //                 consumptionDataList: consumptionDataList\n      //             })\n      //             var data = [];\n      //             if (consumptionDataList.length == 0) {\n      //                 data = [];\n      //                 consumptionDataArr[0] = data;\n      //             }\n      //             for (var j = 0; j < consumptionDataList.length; j++) {\n      //                 data = [];\n      //                 data[0] = moment(consumptionDataList[j].startDate).format('YYYY-MM-DD');// A\n      //                 data[1] = moment(consumptionDataList[j].stopDate).format('YYYY-MM-DD');//B\n      //                 data[2] = consumptionDataList[j].region.regionId;//C\n      //                 data[3] = consumptionDataList[j].daysOfStockOut;//D\n      //                 data[4] = consumptionDataList[j].dataSource.dataSourceId;//E\n      //                 data[5] = consumptionDataList[j].logisticsUnit.logisticsUnitId;//F\n      //                 data[6] = consumptionDataList[j].planningUnit.planningUnitId;//G\n      //                 data[7] = consumptionDataList[j].packSize;//H\n      //                 data[8] = consumptionDataList[j].logisticsUnit.qtyOfPlanningUnits;//I\n      //                 data[9] = consumptionDataList[j].logisticsUnit.planningUnit.qtyOfForecastingUnits;//J\n      //                 data[10] = consumptionDataList[j].planningUnit.qtyOfForecastingUnits;//K\n      //                 data[11] = consumptionDataList[j].consumptionQty;//L\n      //                 data[12] = `=IF(F${j + 1}!=0,I${j + 1}*J${j + 1}*L${j + 1},H${j + 1}*K${j + 1}*L${j + 1})`\n      //                 consumptionDataArr[j] = data;\n      //             }\n      //             var regionTransaction = db1.transaction(['region'], 'readwrite');\n      //             var regionOs = regionTransaction.objectStore('region');\n      //             var regList = []\n      //             var regionRequest = regionOs.getAll();\n      //             regionRequest.onsuccess = function (event) {\n      //                 var regionResult = [];\n      //                 regionResult = regionRequest.result;\n      //                 for (var k = 0; k < regionResult.length; k++) {\n      //                     var regionJson = {\n      //                         name: regionResult[k].label.labelEn,\n      //                         id: regionResult[k].regionId\n      //                     }\n      //                     regList[k] = regionJson\n      //                 }\n      //                 var dataSourceTransaction = db1.transaction(['dataSource'], 'readwrite');\n      //                 var dataSourceOs = dataSourceTransaction.objectStore('dataSource');\n      //                 var dataSourceList = []\n      //                 var dataSourceRequest = dataSourceOs.getAll();\n      //                 dataSourceRequest.onsuccess = function (event) {\n      //                     var dataSourceResult = [];\n      //                     dataSourceResult = dataSourceRequest.result;\n      //                     for (var k = 0; k < dataSourceResult.length; k++) {\n      //                         var dataSourceJson = {\n      //                             name: dataSourceResult[k].label.labelEn,\n      //                             id: dataSourceResult[k].dataSourceId\n      //                         }\n      //                         dataSourceList[k] = dataSourceJson\n      //                     }\n      //                     var logisticsUnitTransaction = db1.transaction(['logisticsUnit'], 'readwrite');\n      //                     var logisticsUnitOs = logisticsUnitTransaction.objectStore('logisticsUnit');\n      //                     var logisticsUnitList = []\n      //                     var logisticsUnitRequest = logisticsUnitOs.getAll();\n      //                     logisticsUnitRequest.onsuccess = function (event) {\n      //                         var logisticsUnitResult = [];\n      //                         logisticsUnitResult = logisticsUnitRequest.result;\n      //                         var logisticsUnitListLength = 0;\n      //                         var planningUnitListLength = 0;\n      //                         var nothingSelectedJson = {\n      //                             name: \"\",\n      //                             id: 0\n      //                         }\n      //                         logisticsUnitList[logisticsUnitListLength] = nothingSelectedJson;\n      //                         console.log(\"Logistics unit\", logisticsUnitResult);\n      //                         for (var k = 0; k < logisticsUnitResult.length; k++) {\n      //                             if (logisticsUnitResult[k].planningUnit.productId == this.state.productId) {\n      //                                 logisticsUnitListLength++;\n      //                                 var logisticsUnitJson = {\n      //                                     name: logisticsUnitResult[k].label.labelEn,\n      //                                     id: logisticsUnitResult[k].logisticsUnitId\n      //                                 }\n      //                                 logisticsUnitList[logisticsUnitListLength] = logisticsUnitJson\n      //                             }\n      //                         }\n      //                         console.log(\"Logistics unit list\", logisticsUnitList.length);\n      //                         var planningUnitTransaction = db1.transaction(['planningUnit'], 'readwrite');\n      //                         var planningUnitOs = planningUnitTransaction.objectStore('planningUnit');\n      //                         var planningUnitList = []\n      //                         var planningUnitRequest = planningUnitOs.getAll();\n      //                         planningUnitRequest.onsuccess = function (event) {\n      //                             var planningUnitResult = [];\n      //                             planningUnitResult = planningUnitRequest.result;\n      //                             var nothingSelectedJson = {\n      //                                 name: \"\",\n      //                                 id: 0\n      //                             }\n      //                             planningUnitList[planningUnitListLength] = nothingSelectedJson;\n      //                             for (var k = 0; k < planningUnitResult.length; k++) {\n      //                                 if (planningUnitResult[k].productId == this.state.productId) {\n      //                                     planningUnitListLength++;\n      //                                     var planningUnitJson = {\n      //                                         name: planningUnitResult[k].label.labelEn,\n      //                                         id: planningUnitResult[k].planningUnitId\n      //                                     }\n      //                                     planningUnitList[planningUnitListLength] = planningUnitJson\n      //                                 }\n      //                             }\n      //                             var options = {\n      //                                 data: consumptionDataArr,\n      //                                 colHeaders: [\n      //                                     `${START_DATE}`,\n      //                                     `${STOP_DATE}`,\n      //                                     `${REGION}`,\n      //                                     `${DAYS_OF_STOCK_OUT}`,\n      //                                     `${DATA_SOURCE}`,\n      //                                     `${LOGISTICS_UNIT}`,\n      //                                     `${PLANNING_UNIT}`,\n      //                                     `${PACK_SIZE}`,\n      //                                     `${QUANTITY_OF_PLANNING_UNIT}`,\n      //                                     `${QUANTITY_OF_FORECAST_UNIT_FOR_LU}`,\n      //                                     `${QUANTITY_OF_FORECAST_UNIT_FOR_PU}`,\n      //                                     `${QUANTITY}`,\n      //                                     `${QUANTITY_IN_TERMS_OF_FORECAST_UNIT}`\n      //                                 ],\n      //                                 colWidths: [80, 80, 120, 100, 80, 200, 200, 80, 80, 80, 80, 80, 80],\n      //                                 columns: [\n      //                                     { type: 'calendar', options: { format: 'DD/MM/YYYY' } },\n      //                                     { type: 'calendar', options: { format: 'DD/MM/YYYY' } },\n      //                                     { type: 'dropdown', source: regList },\n      //                                     { type: 'numeric' },\n      //                                     { type: 'dropdown', source: dataSourceList },\n      //                                     { type: 'dropdown', source: logisticsUnitList },\n      //                                     { type: 'dropdown', source: planningUnitList },\n      //                                     { type: 'numeric' },\n      //                                     { type: 'hidden' },\n      //                                     { type: 'hidden' },\n      //                                     { type: 'hidden' },\n      //                                     { type: 'numeric' },\n      //                                     { type: 'numeric', readOnly: true },\n      //                                 ],\n      //                                 pagination: 10,\n      //                                 search: true,\n      //                                 columnSorting: true,\n      //                                 tableOverflow: true,\n      //                                 wordWrap: true,\n      //                                 paginationOptions: [25, 50, 75, 100],\n      //                                 allowInsertColumn: false,\n      //                                 allowManualInsertColumn: false,\n      //                                 onchange: this.changed,\n      //                                 allowDeleteRow: false\n      //                             };\n      //                             // this.setState({ \n      //                             // el: jexcel(ReactDOM.findDOMNode(this).children[0].children[0].children[0].children[1].children[3], options)\n      //                             // })\n      //                             this.el = jexcel(ReactDOM.findDOMNode(this).children[0].children[0].children[0].children[1].children[3], options);\n      //                         }.bind(this)\n      //                     }.bind(this)\n      //                 }.bind(this)\n      //             }.bind(this)\n      //         }.bind(this)\n      //     }.bind(this);\n      // }\n    }\n  }]);\n\n  return ConsumptionDetails;\n}(React.Component);\n\nexport { ConsumptionDetails as default };","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/views/Consumption/ConsumptionDetails.js"],"names":["React","ReactDOM","jexcel","JsStoreFunctions","Card","CardBody","CardHeader","Label","Input","FormGroup","CardFooter","Button","Col","Form","FormFeedback","Row","Formik","CryptoJS","SECRET_KEY","ConsumptionDetails","props","componentDidMount","addRow","saveData","changed","instance","cell","x","y","value","bind","options","state","programList","categoryList","productList","consumptionDataList","changedFlag","getProductList","getConsumptionData","programId","formSubmit","event","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB,C,CACA;;AACA,OAAO,8CAAP;AACA,OAAO,KAAKC,gBAAZ,MAAkC,2CAAlC;AACA,SACIC,IADJ,EACUC,QADV,EACoBC,UADpB,EAEIC,KAFJ,EAEWC,KAFX,EAEkBC,SAFlB,EAGIC,UAHJ,EAGgBC,MAHhB,EAGwBC,GAHxB,EAG6BC,IAH7B,EAIMC,YAJN,EAIoBC,GAJpB,QAKO,YALP;AAMA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,UAAT,QAA2B,oBAA3B;;IAEqBC,kB;;;AAEjB,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,4FAAMA,KAAN;;AADe,UAenBC,iBAfmB,GAeC,YAAY,CAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAzCkB;;AAAA,UA2CnBC,MA3CmB,GA2CV,YAAY,CACjB;AACA;AACH,KA9CkB;;AAAA,UAsMnBC,QAtMmB,GAsMR,YAAY,CACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAnXkB;;AAAA,UAw2BnBC,OAx2BmB,GAw2BT,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,CAA1B,EAA6BC,CAA7B,EAAgCC,KAAhC,EAAupSS,CAoSRC,IApSQ,+BAx2BS;;AAEf,UAAKC,OAAL,GAAeX,KAAK,CAACW,OAArB;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,EADJ;AAETC,MAAAA,YAAY,EAAE,EAFL;AAGTC,MAAAA,WAAW,EAAE,EAHJ;AAITC,MAAAA,mBAAmB,EAAE,EAJZ;AAKTC,MAAAA,WAAW,EAAE;AALJ,KAAb;AAOA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBR,IAApB,+BAAtB;AACA,UAAKS,kBAAL,GAA0B,MAAKA,kBAAL,CAAwBT,IAAxB,+BAA1B;AACA,UAAKP,QAAL,GAAgB,MAAKA,QAAL,CAAcO,IAAd,+BAAhB;AAZe;AAalB;;;;sCAmCiB,CACdiLQ;AAAA;;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aACI,0CACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,IAAR;AAAa,QAAA,EAAE,EAAC,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AACI,QAAA,MAAM,EACF;AAAA;;AAAA,iBAEQ,oBAAC,IAAD;AAAM,YAAA,IAAI,EAAC,YAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCADJ,CADJ,EAII,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAEI,oBAAC,GAAD;AAAK,YAAA,EAAE,EAAC,GAAR;AAAY,YAAA,EAAE,EAAC,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,GAAD;AAAK,YAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,KAAD;AAAO,YAAA,OAAO,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADJ,EAII,oBAAC,KAAD;AAAO,YAAA,IAAI,EAAC,QAAZ;AACI,YAAA,KAAK,EAAE,MAAI,CAACE,KAAL,CAAWQ,SADtB;AAEI,YAAA,IAAI,EAAC,WAFT;AAEqB,YAAA,EAAE,EAAC,WAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAGI;AAAQ,YAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAHJ,CAJJ,CADJ,CADJ,EAcI,oBAAC,GAAD;AAAK,YAAA,EAAE,EAAC,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACI,oBAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,OAAO,EAAE;AAAA,qBAAM,MAAI,CAACC,UAAL,EAAN;AAAA,aAA/B;AAAwD,YAAA,IAAI,EAAC,IAA7D;AAAkE,YAAA,KAAK,EAAC,SAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAkF;AAAG,YAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAlF,OADJ,CAdJ,CADJ,CAFJ,CADJ,CAJJ,CAFR;AAAA,SAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CADJ,CADJ,CA6CI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9GJ;AAgHH;;;mCAEcC,K,EAAO,CAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;;yCAEoB,CACjx2B2C1C,KAAK,CAAC2C,S;;SAAjCxB,kB","sourcesContent":["import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport jexcel from 'jexcel';\n// import \"./style.css\";\nimport \"../../../node_modules/jexcel/dist/jexcel.css\";\nimport * as JsStoreFunctions from \"../../CommonComponent/JsStoreFunctions.js\";\nimport {\n    Card, CardBody, CardHeader,\n    Label, Input, FormGroup,\n    CardFooter, Button, Col, Form\n    , FormFeedback, Row\n} from 'reactstrap';\nimport { Formik } from 'formik';\nimport CryptoJS from 'crypto-js'\nimport { SECRET_KEY } from '../../Constants.js'\n\nexport default class ConsumptionDetails extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.options = props.options;\n        this.state = {\n            programList: [],\n            categoryList: [],\n            productList: [],\n            consumptionDataList: [],\n            changedFlag: []\n        }\n        this.getProductList = this.getProductList.bind(this);\n        this.getConsumptionData = this.getConsumptionData.bind(this);\n        this.saveData = this.saveData.bind(this)\n    }\n\n    componentDidMount = function () {\n        // JsStoreFunctions.getProgramDataList().then(response => {\n        //     var proList=[];\n        //     for (var i = 0; i < response.length; i++) {\n        //         var bytes = CryptoJS.AES.decrypt(response[i].programName, SECRET_KEY);\n        //         var programName = bytes.toString(CryptoJS.enc.Utf8);\n        //         var programJson = {\n        //             name: programName.toString() + \"~v\" + response[i].version,\n        //             id: response[i].id\n        //         }\n        //         proList[i] = programJson\n        //     }\n        //     this.setState({\n        //         programList: proList\n        //     })\n        // }).catch(error => {\n        //     console.log(\"Error occurred\")\n        // })\n\n        // JsStoreFunctions.getProductCategoryList().then(response => {\n        //     this.setState({\n        //         categoryList: response\n        //     })\n        // }).catch(error => {\n        //     console.log(\"Error occurred\")\n        // })\n    };\n\n    addRow = function () {\n        // document.getElementById(\"saveButtonDiv\").style.display = \"block\";\n        // this.el.insertRow();\n    };\n\n    checkValidation() {\n        // var valid = true;\n        // var json = this.el.getJson();\n        // console.log(json)\n        // for (var y = 0; y < json.length; y++) {\n        //     var col = (\"A\").concat(parseInt(y) + 1);\n        //     var value = this.el.getValueFromCoords(0, y);\n        //     if (value == \"Invalid date\" || value == \"\") {\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setStyle(col, \"background-color\", \"yellow\");\n        //         this.el.setComments(col, `${REQUIRED_MSG}`);\n        //         valid = false;\n        //     } else {\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setComments(col, \"\");\n        //     }\n\n        //     var col = (\"B\").concat(parseInt(y) + 1);\n        //     var value = this.el.getValueFromCoords(1, y);\n        //     if (value == \"Invalid date\" || value == \"\") {\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setStyle(col, \"background-color\", \"yellow\");\n        //         this.el.setComments(col, `${REQUIRED_MSG}`);\n        //         valid = false;\n        //     } else {\n        //         if (Date.parse(this.el.getValueFromCoords(0, y)) > Date.parse(value)) {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setStyle(col, \"background-color\", \"yellow\");\n        //             this.el.setComments(col, `${STOP_DATE_GREATER}`);\n        //             valid = false;\n        //         } else {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setComments(col, \"\");\n        //         }\n        //     }\n\n        //     var col = (\"C\").concat(parseInt(y) + 1);\n        //     var value = this.el.getValueFromCoords(2, y);\n        //     if (value == \"\") {\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setStyle(col, \"background-color\", \"yellow\");\n        //         this.el.setComments(col, `${REQUIRED_MSG}`);\n        //         valid = false;\n        //     } else {\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setComments(col, \"\");\n        //     }\n\n        //     var col = (\"D\").concat(parseInt(y) + 1);\n        //     var value = this.el.getValueFromCoords(3, y);\n        //     console.log(value);\n        //     if (value === \"\") {\n        //         console.log(\"in value is blank\");\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setStyle(col, \"background-color\", \"yellow\");\n        //         this.el.setComments(col, `${REQUIRED_MSG}`);\n        //         valid = false;\n        //     } else {\n        //         if (value >= 0) {\n        //             console.log(\"in value greater than 0\")\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setComments(col, \"\");\n        //         } else {\n        //             console.log(\"in else for days of stock out\");\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setStyle(col, \"background-color\", \"yellow\");\n        //             this.el.setComments(col, `${NUMERIC_ONLY}`);\n        //             valid = false;\n        //         }\n        //     }\n        //     var col = (\"E\").concat(parseInt(y) + 1);\n        //     var value = this.el.getValueFromCoords(4, y);\n        //     if (value == \"\") {\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setStyle(col, \"background-color\", \"yellow\");\n        //         this.el.setComments(col, `${REQUIRED_MSG}`);\n        //         valid = false;\n        //     } else {\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setComments(col, \"\");\n        //     }\n\n        //     var col1 = (\"F\").concat(parseInt(y) + 1);\n        //     var value1 = this.el.getValueFromCoords(5, y);\n\n        //     var col2 = (\"G\").concat(parseInt(y) + 1);\n        //     var value2 = this.el.getValueFromCoords(6, y);\n        //     if (value1 == \"\" && value2 == \"\") {\n        //         this.el.setStyle(col1, \"background-color\", \"transparent\");\n        //         this.el.setStyle(col1, \"background-color\", \"yellow\");\n        //         this.el.setComments(col1, `${EITHER_LU_OR_PU}`);\n        //         this.el.setStyle(col2, \"background-color\", \"transparent\");\n        //         this.el.setStyle(col2, \"background-color\", \"yellow\");\n        //         this.el.setComments(col2, `${EITHER_LU_OR_PU}`);\n        //         valid = false;\n        //     } else {\n        //         this.el.setStyle(col1, \"background-color\", \"transparent\");\n        //         this.el.setComments(col1, \"\");\n        //         this.el.setStyle(col2, \"background-color\", \"transparent\");\n        //         this.el.setComments(col2, \"\");\n        //     }\n\n        //     var col = (\"H\").concat(parseInt(y) + 1);\n        //     var value = this.el.getValueFromCoords(7, y);\n        //     if (value2 > 0) {\n        //         if (value == \"\") {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setStyle(col, \"background-color\", \"yellow\");\n        //             this.el.setComments(col, `${REQUIRED_MSG}`);\n        //             valid = false;\n        //         } else {\n        //             if (value > 0) {\n        //                 console.log(\"in value greater than 0\")\n        //                 this.el.setStyle(col, \"background-color\", \"transparent\");\n        //                 this.el.setComments(col, \"\");\n        //             } else {\n        //                 console.log(\"in else for days of stock out\");\n        //                 this.el.setStyle(col, \"background-color\", \"transparent\");\n        //                 this.el.setStyle(col, \"background-color\", \"yellow\");\n        //                 this.el.setComments(col, `${NUMERIC_VALUE_GREATER_THAN_0}`);\n        //                 valid = false;\n        //             }\n        //         }\n        //     }\n        //     var col = (\"L\").concat(parseInt(y) + 1);\n        //     var value = this.el.getValueFromCoords(11, y);\n        //     console.log(value);\n        //     if (value === \"\") {\n        //         console.log(\"in value is blank\");\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setStyle(col, \"background-color\", \"yellow\");\n        //         this.el.setComments(col, `${REQUIRED_MSG}`);\n        //         valid = false;\n        //     } else {\n        //         if (value > 0) {\n        //             console.log(\"in value greater than 0\")\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setComments(col, \"\");\n        //         } else {\n        //             console.log(\"in else for days of stock out\");\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setStyle(col, \"background-color\", \"yellow\");\n        //             this.el.setComments(col, `${NUMERIC_VALUE_GREATER_THAN_0}`);\n        //             valid = false;\n        //         }\n        //     }\n        // }\n        // return valid;\n    }\n\n    saveData = function () {\n        // var validation = this.checkValidation();\n        // if (validation == true) {\n        //     console.log(\"after check validation\")\n        //     var tableJson = this.el.getJson();\n        //     var db1;\n        //     var storeOS;\n        //     var openRequest = indexedDB.open('fasp', 1);\n        //     openRequest.onupgradeneeded = function (e) {\n        //         var db1 = e.target.result;\n        //         if (!db1.objectStoreNames.contains('programData')) {\n        //             storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('lastSyncDate')) {\n        //             storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('language')) {\n        //             storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('country')) {\n        //             storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('currency')) {\n        //             storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('unit')) {\n        //             storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('unitType')) {\n        //             storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('organisation')) {\n        //             storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('healthArea')) {\n        //             storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('region')) {\n        //             storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('fundingSource')) {\n        //             storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('subFundingSource')) {\n        //             storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('product')) {\n        //             storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('productCategory')) {\n        //             storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('dataSource')) {\n        //             storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('dataSourceType')) {\n        //             storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('shipmentStatus')) {\n        //             storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n        //             storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('manufacturer')) {\n        //             storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('logisticsUnit')) {\n        //             storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('planningUnit')) {\n        //             storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n        //         }\n        //     };\n        //     openRequest.onsuccess = function (e) {\n        //         db1 = e.target.result;\n        //         var transaction = db1.transaction(['programData'], 'readwrite');\n        //         var programTransaction = transaction.objectStore('programData');\n        //         var programRequest = programTransaction.get(this.state.programId);\n        //         programRequest.onsuccess = function (event) {\n        //             var programDataBytes = CryptoJS.AES.decrypt(programRequest.result.programData, SECRET_KEY);\n        //             var programData = programDataBytes.toString(CryptoJS.enc.Utf8);\n        //             var programJson = JSON.parse(programData);\n        //             var programProductList = programJson.programProductList;\n        //             var consumptionDataList = [];\n        //             var consumptionDataArr = [];\n        //             for (var i = 0; i < programProductList.length; i++) {\n        //                 if (programProductList[i].product.productId == this.state.productId) {\n        //                     consumptionDataList = programProductList[i].product.consumptionData;\n        //                 }\n        //             }\n        //             for (var i = 0; i < consumptionDataList.length; i++) {\n        //                 var map = new Map(Object.entries(tableJson[i]))\n        //                 consumptionDataList[i].startDate = map.get(\"0\");\n        //                 consumptionDataList[i].stopDate = map.get(\"1\");\n        //                 consumptionDataList[i].region.regionId = map.get(\"2\");\n        //                 consumptionDataList[i].daysOfStockOut = parseInt(map.get(\"3\"));\n        //                 consumptionDataList[i].dataSource.dataSourceId = map.get(\"4\");\n        //                 consumptionDataList[i].logisticsUnit.logisticsUnitId = map.get(\"5\");\n        //                 consumptionDataList[i].planningUnit.planningUnitId = map.get(\"6\");\n        //                 consumptionDataList[i].packSize = map.get(\"7\");\n        //                 consumptionDataList[i].logisticsUnit.qtyOfPlanningUnits = map.get(\"8\");\n        //                 consumptionDataList[i].logisticsUnit.planningUnit.qtyOfForecastingUnits = map.get(\"9\");\n        //                 consumptionDataList[i].planningUnit.qtyOfForecastingUnits = map.get(\"10\");\n        //                 consumptionDataList[i].consumptionQty = map.get(\"11\");\n        //             }\n        //             for (var i = consumptionDataList.length; i < tableJson.length; i++) {\n        //                 var map = new Map(Object.entries(tableJson[i]))\n        //                 var json = {\n        //                     startDate: map.get(\"0\"),\n        //                     stopDate: map.get(\"1\"),\n        //                     region: {\n        //                         regionId: map.get(\"2\")\n        //                     },\n        //                     daysOfStockOut: map.get(\"3\"),\n        //                     dataSource: {\n        //                         dataSourceId: map.get(\"4\")\n        //                     },\n        //                     logisticsUnit: {\n        //                         logisticsUnitId: map.get(\"5\"),\n        //                         qtyOfPlanningUnits: map.get(\"8\"),\n        //                         planningUnit: {\n        //                             qtyOfForecastingUnits: map.get(\"9\")\n        //                         }\n        //                     },\n        //                     planningUnit: {\n        //                         planningUnitId: map.get(\"6\"),\n        //                         qtyOfForecastingUnits: map.get(\"10\")\n        //                     },\n        //                     packSize: map.get(\"7\"),\n        //                     consumptionQty: map.get(\"11\")\n        //                 }\n        //                 consumptionDataList[i] = json;\n        //             }\n        //             var productFound = 0;\n        //             for (var i = 0; i < programProductList.length; i++) {\n        //                 if (programProductList[i].product.productId == this.state.productId) {\n        //                     productFound = 1;\n        //                     programProductList[i].product.consumptionData = consumptionDataList;\n        //                 }\n        //             }\n        //             if (productFound == 0) {\n        //                 var length = programProductList.length;\n        //                 programProductList[length] = {\n        //                     product: {}\n        //                 }\n        //                 programProductList[length].product = {\n        //                     productId: this.state.productId,\n        //                     consumptionData: consumptionDataList\n        //                 }\n\n        //             }\n        //             programJson.programProductList = programProductList;\n        //             programRequest.result.programData = (CryptoJS.AES.encrypt(JSON.stringify(programJson), SECRET_KEY)).toString();\n        //             var putRequest = programTransaction.put(programRequest.result);\n\n        //             putRequest.onerror = function (event) {\n        //                 // Handle errors!\n        //             };\n        //             putRequest.onsuccess = function (event) {\n        //                 $(\"#saveButtonDiv\").hide();\n        //                 this.setState({\n        //                     message: `${CONSUMPTION_SAVE_SUCCESS}`,\n        //                     changedFlag: 0\n        //                 })\n        //             }.bind(this)\n        //         }.bind(this)\n        //     }.bind(this)\n        // } else {\n        //     this.setState({\n        //         message: `${INVALID_DATA}`\n        //     })\n        // }\n    };\n\n    render() {\n        // const lan = 'en';\n        // const { programList } = this.state;\n        // let programs = programList.length > 0\n        //     && programList.map((item, i) => {\n        //         return (\n        //             // {this.getText(dataSource.label,lan)}\n        //             <option key={i} value={item.programId}>{this.getText(item.programName, lan)}</option>\n        //         )\n        //     }, this);\n\n        // const { categoryList } = this.state;\n        // let categoryItems = categoryList.length > 0\n        //     && categoryList.map((item, i) => {\n        //         return (\n        //             <option key={i} value={item.id}>{item.name}</option>\n        //         )\n        //     }, this);\n        // const { productList } = this.state;\n        // let productItems = productList.length > 0\n        //     && productList.map((item, i) => {\n        //         return (\n        //             <option key={i} value={item.id}>{item.name}</option>\n        //         )\n        //     }, this);\n        return (\n            <>\n                <Col xs=\"12\" sm=\"12\">\n                    <Card>\n                        <Formik\n                            render={\n                                ({\n                                }) => (\n                                        <Form name='simpleForm'>\n                                            <CardHeader>\n                                                <strong>Consumption details</strong>\n                                            </CardHeader>\n                                            <CardBody>\n                                                <CardBody>\n\n                                                    <Col xs=\"8\" sm=\"8\">\n                                                        <Row>\n                                                            <FormGroup >\n                                                                <Col md=\"4\">\n                                                                    <Label htmlFor=\"select\">Program</Label>\n                                                                    {/* </Col> */}\n                                                                    {/* <Col xs=\"12\" md=\"9\"> */}\n                                                                    <Input type=\"select\"\n                                                                        value={this.state.programId}\n                                                                        name=\"programId\" id=\"programId\">\n                                                                        <option value=\"0\">Please select</option>\n                                                                        {/* {programs} */}\n                                                                    </Input>\n                                                                </Col>\n                                                            </FormGroup>\n                                                            <Col md=\"2\">\n                                                                <Button type=\"button\" onClick={() => this.formSubmit()} size=\"sm\" color=\"primary\"><i className=\"fa fa-dot-circle-o\"></i>Go</Button>\n                                                            </Col>\n\n                                                        </Row>\n                                                    </Col>\n                                                </CardBody>\n\n                                            </CardBody>\n                                        </Form>\n                                    )} />\n                    </Card>\n                </Col>\n            </>\n\n            // <div>\n            //     <div class=\"row\">\n            //         <div class=\"col-md-12\">\n            //             <div class=\"panel panel-default\">\n            //                 <div class=\"panel-heading\">\n            //                     <h3 class=\"panel-title\">{TITLE_CONSUMPTION_DETAILS}</h3>\n            //                 </div>\n            //                 <div class=\"panel-body\">\n            //                     {this.state.message}\n            //                     <div id=\"filter\">\n            //                         <div class=\"panel panel-warning\">\n            //                             <div class=\"panel-body\">\n            //                                 <form name=\"form1\" id=\"form1\">\n            //                                     <div class=\"row\">\n            //                                         <div class=\"col-md-2\">\n            //                                             <div class=\"form-group\">\n            //                                                 {PROGRAM} : <select id=\"programId\" name=\"programId\">\n            //                                                     {programItems}\n            //                                                 </select>\n            //                                             </div>\n            //                                         </div>\n            //                                         <div class=\"col-md-2\">\n            //                                             <div class=\"form-group\">\n            //                                                 {CATEGORY} : <select id=\"categoryId\" name=\"categoryId\" onChange={this.getProductList}>\n            //                                                     {categoryItems}\n            //                                                 </select>\n            //                                             </div>\n            //                                         </div>\n            //                                         <div class=\"col-md-2\">\n            //                                             <div class=\"form-group\">\n            //                                                 {PRODUCT} : <select id=\"productId\" name=\"productId\">\n            //                                                     {productItems}\n            //                                                 </select>\n            //                                             </div>\n            //                                         </div>\n\n            //                                         <div class=\"col-md-2 btn-filter\">\n            //                                             <button type=\"button\" class=\"btn-info btn-sm\" name=\"btnSubmit\" onClick={this.getConsumptionData}>{BTN_GO}</button>\n            //                                         </div>\n            //                                     </div>\n            //                                 </form>\n            //                             </div>\n            //                         </div>\n            //                     </div>\n            //                     <br />\n            //                     <br />\n            //                     <div id=\"consumptionId\">{this.options}</div>\n            //                     <div />\n            //                     <br />\n            //                     <input\n            //                         type=\"button\"\n            //                         value={ADD_ROW}\n            //                         onClick={() => this.addRow()}\n            //                     />\n            //                     <div id=\"saveButtonDiv\" style={{ \"display\": \"none\" }}>\n            //                         <input\n            //                             type=\"button\"\n            //                             value={BTN_SAVE}\n            //                             onClick={() => this.saveData()}\n            //                         />\n            //                     </div>\n            //                 </div>\n            //             </div>\n            //         </div>\n            //     </div>\n            // </div>\n        );\n    }\n\n    getProductList(event) {\n        // var db1;\n        // var storeOS;\n        // var openRequest = indexedDB.open('fasp', 1);\n        // openRequest.onupgradeneeded = function (e) {\n        //     var db1 = e.target.result;\n        //     if (!db1.objectStoreNames.contains('programData')) {\n        //         storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('lastSyncDate')) {\n        //         storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('language')) {\n        //         storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('country')) {\n        //         storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('currency')) {\n        //         storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('unit')) {\n        //         storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('unitType')) {\n        //         storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('organisation')) {\n        //         storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('healthArea')) {\n        //         storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('region')) {\n        //         storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('fundingSource')) {\n        //         storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('subFundingSource')) {\n        //         storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('product')) {\n        //         storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('productCategory')) {\n        //         storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('dataSource')) {\n        //         storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('dataSourceType')) {\n        //         storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('shipmentStatus')) {\n        //         storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n        //         storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('manufacturer')) {\n        //         storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('logisticsUnit')) {\n        //         storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n        //     }\n        //     if (!db1.objectStoreNames.contains('planningUnit')) {\n        //         storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n        //     }\n        // };\n        // openRequest.onsuccess = function (e) {\n        //     db1 = e.target.result;\n        //     var productTransaction = db1.transaction(['product'], 'readwrite');\n        //     var productOs = productTransaction.objectStore('product');\n        //     var productRequest = productOs.getAll();\n        //     var proList = []\n        //     productRequest.onerror = function (event) {\n        //         // Handle errors!\n        //     };\n        //     productRequest.onsuccess = function (event) {\n        //         var myResult = [];\n        //         myResult = productRequest.result;\n        //         for (var i = 0; i < myResult.length; i++) {\n        //             if (myResult[i].productCategory.productCategoryId == $(\"#categoryId\").val()) {\n        //                 var productJson = {\n        //                     name: myResult[i].label.labelEn,\n        //                     id: myResult[i].productId\n        //                 }\n        //                 proList[i] = productJson\n        //             }\n        //         }\n        //         this.setState({\n        //             productList: proList\n        //         })\n        //     }.bind(this);\n        // }.bind(this)\n        // event.target.value    \n    }\n\n    getConsumptionData() {\n        // this.setState({\n        //     productId: $(\"#productId\").val(),\n        //     productCategoryId: $(\"#categoryId\").val(),\n        //     programId: $(\"#programId\").val()\n        // })\n        // if (this.state.changedFlag == 1) {\n        //     alert(`${CLICK_SAVE_TO_CONTINUE}`)\n        // } else {\n        //     this.el = jexcel(ReactDOM.findDOMNode(this).children[0].children[0].children[0].children[1].children[3], '');\n        //     this.el.destroy();\n        //     var db1;\n        //     var storeOS;\n        //     var openRequest = indexedDB.open('fasp', 1);\n        //     openRequest.onupgradeneeded = function (e) {\n        //         var db1 = e.target.result;\n        //         if (!db1.objectStoreNames.contains('programData')) {\n        //             storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('lastSyncDate')) {\n        //             storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('language')) {\n        //             storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('country')) {\n        //             storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('currency')) {\n        //             storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('unit')) {\n        //             storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('unitType')) {\n        //             storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('organisation')) {\n        //             storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('healthArea')) {\n        //             storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('region')) {\n        //             storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('fundingSource')) {\n        //             storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('subFundingSource')) {\n        //             storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('product')) {\n        //             storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('productCategory')) {\n        //             storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('dataSource')) {\n        //             storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('dataSourceType')) {\n        //             storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('shipmentStatus')) {\n        //             storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n        //             storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('manufacturer')) {\n        //             storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('logisticsUnit')) {\n        //             storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n        //         }\n        //         if (!db1.objectStoreNames.contains('planningUnit')) {\n        //             storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n        //         }\n        //     };\n        //     openRequest.onsuccess = function (e) {\n        //         db1 = e.target.result;\n        //         var transaction = db1.transaction(['programData'], 'readwrite');\n        //         var programTransaction = transaction.objectStore('programData');\n        //         var programRequest = programTransaction.get(this.state.programId);\n        //         programRequest.onsuccess = function (event) {\n        //             var programDataBytes = CryptoJS.AES.decrypt(programRequest.result.programData, SECRET_KEY);\n        //             var programData = programDataBytes.toString(CryptoJS.enc.Utf8);\n        //             var programJson = JSON.parse(programData);\n        //             var programProductList = programJson.programProductList;\n        //             var consumptionDataList = [];\n        //             var consumptionDataArr = [];\n        //             for (var i = 0; i < programProductList.length; i++) {\n        //                 if (programProductList[i].product.productId == this.state.productId) {\n        //                     consumptionDataList = programProductList[i].product.consumptionData;\n        //                 }\n        //             }\n        //             this.setState({\n        //                 consumptionDataList: consumptionDataList\n        //             })\n        //             var data = [];\n        //             if (consumptionDataList.length == 0) {\n        //                 data = [];\n        //                 consumptionDataArr[0] = data;\n        //             }\n        //             for (var j = 0; j < consumptionDataList.length; j++) {\n        //                 data = [];\n        //                 data[0] = moment(consumptionDataList[j].startDate).format('YYYY-MM-DD');// A\n        //                 data[1] = moment(consumptionDataList[j].stopDate).format('YYYY-MM-DD');//B\n        //                 data[2] = consumptionDataList[j].region.regionId;//C\n        //                 data[3] = consumptionDataList[j].daysOfStockOut;//D\n        //                 data[4] = consumptionDataList[j].dataSource.dataSourceId;//E\n        //                 data[5] = consumptionDataList[j].logisticsUnit.logisticsUnitId;//F\n        //                 data[6] = consumptionDataList[j].planningUnit.planningUnitId;//G\n        //                 data[7] = consumptionDataList[j].packSize;//H\n        //                 data[8] = consumptionDataList[j].logisticsUnit.qtyOfPlanningUnits;//I\n        //                 data[9] = consumptionDataList[j].logisticsUnit.planningUnit.qtyOfForecastingUnits;//J\n        //                 data[10] = consumptionDataList[j].planningUnit.qtyOfForecastingUnits;//K\n        //                 data[11] = consumptionDataList[j].consumptionQty;//L\n        //                 data[12] = `=IF(F${j + 1}!=0,I${j + 1}*J${j + 1}*L${j + 1},H${j + 1}*K${j + 1}*L${j + 1})`\n        //                 consumptionDataArr[j] = data;\n        //             }\n        //             var regionTransaction = db1.transaction(['region'], 'readwrite');\n        //             var regionOs = regionTransaction.objectStore('region');\n        //             var regList = []\n        //             var regionRequest = regionOs.getAll();\n        //             regionRequest.onsuccess = function (event) {\n        //                 var regionResult = [];\n        //                 regionResult = regionRequest.result;\n        //                 for (var k = 0; k < regionResult.length; k++) {\n        //                     var regionJson = {\n        //                         name: regionResult[k].label.labelEn,\n        //                         id: regionResult[k].regionId\n        //                     }\n        //                     regList[k] = regionJson\n        //                 }\n\n\n        //                 var dataSourceTransaction = db1.transaction(['dataSource'], 'readwrite');\n        //                 var dataSourceOs = dataSourceTransaction.objectStore('dataSource');\n        //                 var dataSourceList = []\n        //                 var dataSourceRequest = dataSourceOs.getAll();\n        //                 dataSourceRequest.onsuccess = function (event) {\n        //                     var dataSourceResult = [];\n        //                     dataSourceResult = dataSourceRequest.result;\n        //                     for (var k = 0; k < dataSourceResult.length; k++) {\n        //                         var dataSourceJson = {\n        //                             name: dataSourceResult[k].label.labelEn,\n        //                             id: dataSourceResult[k].dataSourceId\n        //                         }\n        //                         dataSourceList[k] = dataSourceJson\n        //                     }\n\n        //                     var logisticsUnitTransaction = db1.transaction(['logisticsUnit'], 'readwrite');\n        //                     var logisticsUnitOs = logisticsUnitTransaction.objectStore('logisticsUnit');\n        //                     var logisticsUnitList = []\n        //                     var logisticsUnitRequest = logisticsUnitOs.getAll();\n        //                     logisticsUnitRequest.onsuccess = function (event) {\n        //                         var logisticsUnitResult = [];\n        //                         logisticsUnitResult = logisticsUnitRequest.result;\n        //                         var logisticsUnitListLength = 0;\n        //                         var planningUnitListLength = 0;\n        //                         var nothingSelectedJson = {\n        //                             name: \"\",\n        //                             id: 0\n        //                         }\n        //                         logisticsUnitList[logisticsUnitListLength] = nothingSelectedJson;\n        //                         console.log(\"Logistics unit\", logisticsUnitResult);\n        //                         for (var k = 0; k < logisticsUnitResult.length; k++) {\n        //                             if (logisticsUnitResult[k].planningUnit.productId == this.state.productId) {\n        //                                 logisticsUnitListLength++;\n        //                                 var logisticsUnitJson = {\n        //                                     name: logisticsUnitResult[k].label.labelEn,\n        //                                     id: logisticsUnitResult[k].logisticsUnitId\n        //                                 }\n        //                                 logisticsUnitList[logisticsUnitListLength] = logisticsUnitJson\n        //                             }\n        //                         }\n        //                         console.log(\"Logistics unit list\", logisticsUnitList.length);\n        //                         var planningUnitTransaction = db1.transaction(['planningUnit'], 'readwrite');\n        //                         var planningUnitOs = planningUnitTransaction.objectStore('planningUnit');\n        //                         var planningUnitList = []\n        //                         var planningUnitRequest = planningUnitOs.getAll();\n        //                         planningUnitRequest.onsuccess = function (event) {\n        //                             var planningUnitResult = [];\n        //                             planningUnitResult = planningUnitRequest.result;\n        //                             var nothingSelectedJson = {\n        //                                 name: \"\",\n        //                                 id: 0\n        //                             }\n        //                             planningUnitList[planningUnitListLength] = nothingSelectedJson;\n        //                             for (var k = 0; k < planningUnitResult.length; k++) {\n        //                                 if (planningUnitResult[k].productId == this.state.productId) {\n        //                                     planningUnitListLength++;\n        //                                     var planningUnitJson = {\n        //                                         name: planningUnitResult[k].label.labelEn,\n        //                                         id: planningUnitResult[k].planningUnitId\n        //                                     }\n        //                                     planningUnitList[planningUnitListLength] = planningUnitJson\n        //                                 }\n        //                             }\n\n        //                             var options = {\n        //                                 data: consumptionDataArr,\n        //                                 colHeaders: [\n        //                                     `${START_DATE}`,\n        //                                     `${STOP_DATE}`,\n        //                                     `${REGION}`,\n        //                                     `${DAYS_OF_STOCK_OUT}`,\n        //                                     `${DATA_SOURCE}`,\n        //                                     `${LOGISTICS_UNIT}`,\n        //                                     `${PLANNING_UNIT}`,\n        //                                     `${PACK_SIZE}`,\n        //                                     `${QUANTITY_OF_PLANNING_UNIT}`,\n        //                                     `${QUANTITY_OF_FORECAST_UNIT_FOR_LU}`,\n        //                                     `${QUANTITY_OF_FORECAST_UNIT_FOR_PU}`,\n        //                                     `${QUANTITY}`,\n        //                                     `${QUANTITY_IN_TERMS_OF_FORECAST_UNIT}`\n        //                                 ],\n        //                                 colWidths: [80, 80, 120, 100, 80, 200, 200, 80, 80, 80, 80, 80, 80],\n        //                                 columns: [\n        //                                     { type: 'calendar', options: { format: 'DD/MM/YYYY' } },\n        //                                     { type: 'calendar', options: { format: 'DD/MM/YYYY' } },\n        //                                     { type: 'dropdown', source: regList },\n        //                                     { type: 'numeric' },\n        //                                     { type: 'dropdown', source: dataSourceList },\n        //                                     { type: 'dropdown', source: logisticsUnitList },\n        //                                     { type: 'dropdown', source: planningUnitList },\n        //                                     { type: 'numeric' },\n        //                                     { type: 'hidden' },\n        //                                     { type: 'hidden' },\n        //                                     { type: 'hidden' },\n        //                                     { type: 'numeric' },\n        //                                     { type: 'numeric', readOnly: true },\n        //                                 ],\n        //                                 pagination: 10,\n        //                                 search: true,\n        //                                 columnSorting: true,\n        //                                 tableOverflow: true,\n        //                                 wordWrap: true,\n        //                                 paginationOptions: [25, 50, 75, 100],\n        //                                 allowInsertColumn: false,\n        //                                 allowManualInsertColumn: false,\n        //                                 onchange: this.changed,\n        //                                 allowDeleteRow: false\n        //                             };\n        //                             // this.setState({ \n        //                             // el: jexcel(ReactDOM.findDOMNode(this).children[0].children[0].children[0].children[1].children[3], options)\n        //                             // })\n        //                             this.el = jexcel(ReactDOM.findDOMNode(this).children[0].children[0].children[0].children[1].children[3], options);\n\n\n        //                         }.bind(this)\n        //                     }.bind(this)\n        //                 }.bind(this)\n        //             }.bind(this)\n        //         }.bind(this)\n        //     }.bind(this);\n        // }\n    }\n\n    changed = function (instance, cell, x, y, value) {\n        //     $(\"#saveButtonDiv\").show();\n        //     this.setState({\n        //         changedFlag: 1\n        //     })\n        //     if (x == 0) {\n        //         var col = (\"A\").concat(parseInt(y) + 1);\n        //         console.log(col);\n        //         if (value == \"\") {\n        //             console.log(\"in if\")\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setStyle(col, \"background-color\", \"yellow\");\n        //             this.el.setComments(col, `${REQUIRED_MSG}`);\n        //         } else {\n        //             console.log(\"in else\")\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setComments(col, \"\");\n        //         }\n        //     }\n\n        //     if (x == 1) {\n        //         var col = (\"B\").concat(parseInt(y) + 1);\n        //         if (value == \"\") {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setStyle(col, \"background-color\", \"yellow\");\n        //             this.el.setComments(col, `${REQUIRED_MSG}`);\n        //         } else {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setComments(col, \"\");\n        //         }\n\n        //         if (value != \"\" && Date.parse(this.el.getValueFromCoords(0, y)) > Date.parse(value)) {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setStyle(col, \"background-color\", \"yellow\");\n        //             this.el.setComments(col, `${STOP_DATE_GREATER}`);\n        //         } else {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setComments(col, \"\");\n        //         }\n        //     }\n\n        //     if (x == 3) {\n        //         var col = (\"D\").concat(parseInt(y) + 1);\n        //         if (value >= 0) {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setComments(col, \"\");\n        //         } else {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setStyle(col, \"background-color\", \"yellow\");\n        //             this.el.setComments(col, `${NUMERIC_ONLY}`);\n        //         }\n        //     }\n        //     if (x == 11) {\n        //         var col = (\"L\").concat(parseInt(y) + 1);\n        //         if (value > 0 && value != \"\") {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setComments(col, \"\");\n        //         } else {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setStyle(col, \"background-color\", \"yellow\");\n        //             this.el.setComments(col, `${NUMERIC_VALUE_GREATER_THAN_0}`);\n        //         }\n        //     }\n        //     var logisticsUnitData = {}\n        //     var planningUnitData = {}\n        //     var elInstance = this.el;\n        //     if (x == 11 && elInstance.getValueFromCoords(5, y) > 0) {\n        //         var qtyInTermsOfForecastUnit = parseFloat(elInstance.getValueFromCoords(8, y) * elInstance.getValueFromCoords(9, y) * elInstance.getValueFromCoords(11, y));\n        //         elInstance.setValueFromCoords(12, y, qtyInTermsOfForecastUnit, true)\n        //     }\n        //     if (x == 11 && elInstance.getValueFromCoords(6, y) > 0) {\n        //         var qtyInTermsOfForecastUnit = parseFloat(elInstance.getValueFromCoords(7, y) * elInstance.getValueFromCoords(10, y) * elInstance.getValueFromCoords(11, y));\n        //         elInstance.setValueFromCoords(12, y, qtyInTermsOfForecastUnit, true)\n        //     }\n        //     if (x == 7 && value > 0) {\n        //         elInstance.setValueFromCoords(5, y, \"\", true)\n        //         if (elInstance.getValueFromCoords(6, y) > 0 && elInstance.getValueFromCoords(11, y) > 0) {\n        //             var qtyInTermsOfForecastUnit = parseFloat(elInstance.getValueFromCoords(7, y) * elInstance.getValueFromCoords(10, y) * elInstance.getValueFromCoords(11, y));\n        //             elInstance.setValueFromCoords(12, y, qtyInTermsOfForecastUnit, true)\n        //         }\n        //     }\n\n        //     if (x == 5 && value != \"\" && value != 0) {\n        //         var col = (\"F\").concat(parseInt(y) + 1);\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setComments(col, \"\");\n        //         var col = (\"G\").concat(parseInt(y) + 1);\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setComments(col, \"\");\n        //         var db1;\n        //         var storeOS;\n        //         var openRequest = indexedDB.open('fasp', 1);\n        //         openRequest.onupgradeneeded = function (e) {\n        //             var db1 = e.target.result;\n        //             if (!db1.objectStoreNames.contains('programData')) {\n        //                 storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('lastSyncDate')) {\n        //                 storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('language')) {\n        //                 storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('country')) {\n        //                 storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('currency')) {\n        //                 storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('unit')) {\n        //                 storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('unitType')) {\n        //                 storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('organisation')) {\n        //                 storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('healthArea')) {\n        //                 storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('region')) {\n        //                 storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('fundingSource')) {\n        //                 storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('subFundingSource')) {\n        //                 storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('product')) {\n        //                 storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('productCategory')) {\n        //                 storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('dataSource')) {\n        //                 storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('dataSourceType')) {\n        //                 storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('shipmentStatus')) {\n        //                 storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n        //                 storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('manufacturer')) {\n        //                 storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('logisticsUnit')) {\n        //                 storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('planningUnit')) {\n        //                 storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n        //             }\n        //         };\n        //         openRequest.onsuccess = function (e) {\n        //             db1 = e.target.result;\n        //             var luTransaction = db1.transaction(['logisticsUnit'], 'readwrite');\n        //             var luObjectStore = luTransaction.objectStore('logisticsUnit');\n        //             var luRequest = luObjectStore.get(parseInt(value));\n        //             luRequest.onsuccess = function (e) {\n        //                 logisticsUnitData = luRequest.result;\n        //                 elInstance.setValueFromCoords(6, y, \"\", true)\n        //                 elInstance.setValueFromCoords(7, y, \"\", true)\n        //                 elInstance.setValueFromCoords(8, y, logisticsUnitData.qtyOfPlanningUnits, true)\n        //                 elInstance.setValueFromCoords(9, y, logisticsUnitData.planningUnit.qtyOfForecastingUnits, true)\n        //                 if (elInstance.getValueFromCoords(11, y) > 0) {\n        //                     var qtyInTermsOfForecastUnit = parseFloat(logisticsUnitData.qtyOfPlanningUnits * logisticsUnitData.planningUnit.qtyOfForecastingUnits * elInstance.getValueFromCoords(11, y));\n        //                     elInstance.setValueFromCoords(12, y, qtyInTermsOfForecastUnit, true)\n        //                 }\n        //             }\n        //         }\n\n        //     } else if (x == 5 && elInstance.getValueFromCoords(6, y) == \"\") {\n        //         var col = (\"F\").concat(parseInt(y) + 1);\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setStyle(col, \"background-color\", \"yellow\");\n        //         this.el.setComments(col, `${EITHER_LU_OR_PU}`);\n        //     }\n        //     if (x == 6 && value != \"\" && value != 0) {\n        //         var col = (\"G\").concat(parseInt(y) + 1);\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setComments(col, \"\");\n        //         var col = (\"F\").concat(parseInt(y) + 1);\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setComments(col, \"\");\n        //         var db1;\n        //         var storeOS;\n        //         var openRequest = indexedDB.open('fasp', 1);\n        //         openRequest.onupgradeneeded = function (e) {\n        //             var db1 = e.target.result;\n        //             if (!db1.objectStoreNames.contains('programData')) {\n        //                 storeOS = db1.createObjectStore('programData', { keyPath: 'id', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('lastSyncDate')) {\n        //                 storeOS = db1.createObjectStore('lastSyncDate', { keyPath: 'id', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('language')) {\n        //                 storeOS = db1.createObjectStore('language', { keyPath: 'languageId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('country')) {\n        //                 storeOS = db1.createObjectStore('country', { keyPath: 'countryId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('currency')) {\n        //                 storeOS = db1.createObjectStore('currency', { keyPath: 'currencyId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('unit')) {\n        //                 storeOS = db1.createObjectStore('unit', { keyPath: 'unitId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('unitType')) {\n        //                 storeOS = db1.createObjectStore('unitType', { keyPath: 'unitTypeId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('organisation')) {\n        //                 storeOS = db1.createObjectStore('organisation', { keyPath: 'organisationId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('healthArea')) {\n        //                 storeOS = db1.createObjectStore('healthArea', { keyPath: 'healthAreaId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('region')) {\n        //                 storeOS = db1.createObjectStore('region', { keyPath: 'regionId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('fundingSource')) {\n        //                 storeOS = db1.createObjectStore('fundingSource', { keyPath: 'fundingSourceId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('subFundingSource')) {\n        //                 storeOS = db1.createObjectStore('subFundingSource', { keyPath: 'subFundingSourceId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('product')) {\n        //                 storeOS = db1.createObjectStore('product', { keyPath: 'productId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('productCategory')) {\n        //                 storeOS = db1.createObjectStore('productCategory', { keyPath: 'productCategoryId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('dataSource')) {\n        //                 storeOS = db1.createObjectStore('dataSource', { keyPath: 'dataSourceId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('dataSourceType')) {\n        //                 storeOS = db1.createObjectStore('dataSourceType', { keyPath: 'dataSourceTypeId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('shipmentStatus')) {\n        //                 storeOS = db1.createObjectStore('shipmentStatus', { keyPath: 'shipmentStatusId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('shipmentStatusAllowed')) {\n        //                 storeOS = db1.createObjectStore('shipmentStatusAllowed', { keyPath: 'shipmentStatusAllowedId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('manufacturer')) {\n        //                 storeOS = db1.createObjectStore('manufacturer', { keyPath: 'manufacturerId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('logisticsUnit')) {\n        //                 storeOS = db1.createObjectStore('logisticsUnit', { keyPath: 'logisticsUnitId', autoIncrement: true });\n        //             }\n        //             if (!db1.objectStoreNames.contains('planningUnit')) {\n        //                 storeOS = db1.createObjectStore('planningUnit', { keyPath: 'planningUnitId', autoIncrement: true });\n        //             }\n        //         };\n        //         openRequest.onsuccess = function (e) {\n        //             db1 = e.target.result;\n        //             var puTransaction = db1.transaction(['planningUnit'], 'readwrite');\n        //             var puObjectStore = puTransaction.objectStore('planningUnit');\n        //             var puRequest = puObjectStore.get(parseInt(value));\n        //             puRequest.onsuccess = function (e) {\n        //                 planningUnitData = puRequest.result;\n        //                 elInstance.setValueFromCoords(5, y, \"\", true)\n        //                 elInstance.setValueFromCoords(10, y, planningUnitData.qtyOfForecastingUnits, true)\n        //                 if (elInstance.getValueFromCoords(11, y) > 0) {\n        //                     var qtyInTermsOfForecastUnit = parseFloat(planningUnitData.qtyOfForecastingUnits * elInstance.getValueFromCoords(7, y) * elInstance.getValueFromCoords(11, y));\n        //                     elInstance.setValueFromCoords(12, y, qtyInTermsOfForecastUnit, true)\n        //                 }\n        //             }\n        //         }\n        //     } else if (x == 6 && elInstance.getValueFromCoords(5, y) == \"\") {\n        //         var col = (\"G\").concat(parseInt(y) + 1);\n        //         this.el.setStyle(col, \"background-color\", \"transparent\");\n        //         this.el.setStyle(col, \"background-color\", \"yellow\");\n        //         this.el.setComments(col, `${EITHER_LU_OR_PU}`);\n        //     }\n\n        //     if (x == 7) {\n        //         var col = (\"H\").concat(parseInt(y) + 1);\n        //         if (value > 0 && value != \"\" && elInstance.getValueFromCoords(5, y) == \"\") {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setComments(col, \"\");\n        //         } else if (elInstance.getValueFromCoords(5, y) == \"\") {\n        //             this.el.setStyle(col, \"background-color\", \"transparent\");\n        //             this.el.setStyle(col, \"background-color\", \"yellow\");\n        //             this.el.setComments(col, `${NUMERIC_VALUE_GREATER_THAN_0}`);\n        //         }\n        //     }\n\n    }.bind(this)\n}\n\n"]},"metadata":{},"sourceType":"module"}