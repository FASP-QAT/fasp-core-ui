{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/views/SyncMasterData/SyncMasterData.js\";\nimport React, { Component } from 'react';\nimport { Card, CardBody, CardHeader, CardFooter, Button, Col, Progress } from 'reactstrap';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport 'react-select/dist/react-select.min.css';\nimport * as JsStoreFunction from \"../../CommonComponent/JsStoreFunctions.js\";\nimport * as JsStoreFunctionCore from \"../../CommonComponent/JsStoreFunctionsCore\";\nimport moment from 'moment';\nimport MasterSyncService from '../../api/MasterSyncService.js';\n\nvar DownloadProgram = /*#__PURE__*/function (_Component) {\n  _inherits(DownloadProgram, _Component);\n\n  function DownloadProgram() {\n    var _this;\n\n    _classCallCheck(this, DownloadProgram);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DownloadProgram).call(this));\n    _this.state = {\n      totalMasters: 19,\n      syncedMasters: 0,\n      syncedPercentage: 0\n    }; // this.syncMasters = this.syncMasters.bind(this);\n    // this.retryClicked = this.retryClicked.bind(this);\n\n    return _this;\n  }\n\n  _createClass(DownloadProgram, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.getElementById(\"retryButtonDiv\").style.display = \"none\";\n      this.syncMasters();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(Col, {\n        xs: \"12\",\n        sm: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Master Data Sync\")), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, this.state.syncedPercentage, \"% (Synced \", this.state.syncedMasters, \" of \", this.state.totalMasters, \" masters)\"), React.createElement(Progress, {\n        value: this.state.syncedMasters,\n        max: this.state.totalMasters,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })), React.createElement(CardFooter, {\n        id: \"retryButtonDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        onClick: function onClick() {\n          return _this2.retryClicked();\n        },\n        size: \"sm\",\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-dot-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), \"Retry\")))));\n    }\n  }, {\n    key: \"syncMasters\",\n    value: function syncMasters() {\n      var _this3 = this;\n\n      if (navigator.onLine) {\n        var updatedSyncDate = moment(Date.now()).utcOffset('-0500').format('YYYY-MM-DD HH:mm');\n        var lastSyncDateVar = \"\";\n        var lastSyncDate = JsStoreFunction.getLastSyncDateForApplicationMaster().then(function (response) {\n          console.log(response);\n\n          if (response.length > 0) {\n            lastSyncDateVar = response[0];\n          } else {\n            lastSyncDateVar = null;\n          }\n\n          if (navigator.onLine) {\n            MasterSyncService.getCurrencyListForSync(lastSyncDateVar).then(function (response) {\n              JsStoreFunction.syncCurrency(response.data);\n\n              _this3.setState({\n                syncedMasters: _this3.state.syncedMasters + 1,\n                syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n              });\n\n              if (navigator.onLine) {\n                //Code to Sync DataSource list\n                MasterSyncService.getDataSourceListForSync(lastSyncDateVar).then(function (response) {\n                  JsStoreFunction.syncDataSource(response.data);\n\n                  _this3.setState({\n                    syncedMasters: _this3.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                  });\n\n                  if (navigator.onLine) {\n                    //Code to Sync DataSourceType list\n                    MasterSyncService.getDataSourceTypeListForSync(lastSyncDateVar).then(function (response) {\n                      JsStoreFunction.syncDataSourceType(response.data);\n\n                      _this3.setState({\n                        syncedMasters: _this3.state.syncedMasters + 1,\n                        syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                      });\n                    }).catch(function (error) {\n                      document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                      _this3.setState({\n                        message: \"Sync failed\"\n                      });\n                    });\n                  } else {\n                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                    _this3.setState({\n                      message: \"Sync failed\"\n                    });\n                  }\n                }).catch(function (error) {\n                  document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                  _this3.setState({\n                    message: \"Sync failed\"\n                  });\n                });\n              } else {\n                document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                _this3.setState({\n                  message: \"Sync failed\"\n                });\n              } //funding source\n              //healtharea\n              //language\n              //logistics unit\n              //manufacturer\n              //organiation\n              //planning unit\n              // product\n              //product category\n              //region\n              //shipment status\n              //shipment status allowed\n              // sub funding source\n              //Country\n              //  unit\n              //unit type\n              //last sync date\n\n            }).catch(function (error) {\n              document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n              _this3.setState({\n                message: \"Sync failed\"\n              });\n            });\n          } else {\n            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n            _this3.setState({\n              message: \"Sync failed\"\n            });\n          }\n        }).catch(function (error) {\n          lastSyncDateVar = null;\n        });\n      } else {\n        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n        this.setState({\n          message: \"Sync failed\"\n        });\n      }\n    }\n  }]);\n\n  return DownloadProgram;\n}(Component);\n\nexport { DownloadProgram as default };","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/views/SyncMasterData/SyncMasterData.js"],"names":["React","Component","Card","CardBody","CardHeader","CardFooter","Button","Col","Progress","JsStoreFunction","JsStoreFunctionCore","moment","MasterSyncService","DownloadProgram","state","totalMasters","syncedMasters","syncedPercentage","document","getElementById","style","display","syncMasters","retryClicked","navigator","onLine","updatedSyncDate","Date","now","utcOffset","format","lastSyncDateVar","lastSyncDate","getLastSyncDateForApplicationMaster","then","response","console","log","length","getCurrencyListForSync","syncCurrency","data","setState","Math","floor","getDataSourceListForSync","syncDataSource","getDataSourceTypeListForSync","syncDataSourceType","catch","error","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Card, CardBody, CardHeader,\n    CardFooter, Button, Col, Progress\n} from 'reactstrap';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport 'react-select/dist/react-select.min.css';\nimport * as JsStoreFunction from \"../../CommonComponent/JsStoreFunctions.js\"\nimport * as JsStoreFunctionCore from \"../../CommonComponent/JsStoreFunctionsCore\"\nimport moment from 'moment';\nimport MasterSyncService from '../../api/MasterSyncService.js';\n\nexport default class DownloadProgram extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            totalMasters: 19,\n            syncedMasters: 0,\n            syncedPercentage: 0\n        }\n        // this.syncMasters = this.syncMasters.bind(this);\n        // this.retryClicked = this.retryClicked.bind(this);\n    }\n\n    componentDidMount() {\n        document.getElementById(\"retryButtonDiv\").style.display = \"none\";\n        this.syncMasters();\n    }\n\n    render() {\n        return (\n            <>\n                <Col xs=\"12\" sm=\"12\">\n                    <Card>\n                        <CardHeader>\n                            <strong>Master Data Sync</strong>\n                        </CardHeader>\n                        <CardBody>\n                            <div className=\"text-center\">{this.state.syncedPercentage}% (Synced {this.state.syncedMasters} of {this.state.totalMasters} masters)</div>\n                            <Progress value={this.state.syncedMasters} max={this.state.totalMasters} />\n                        </CardBody>\n\n                        <CardFooter id=\"retryButtonDiv\">\n                            <Button type=\"button\" onClick={() => this.retryClicked()} size=\"sm\" color=\"danger\"><i className=\"fa fa-dot-circle-o\"></i>Retry</Button>\n                        </CardFooter>\n                    </Card>\n                </Col>\n            </>\n        )\n\n    }\n\n\n    syncMasters() {\n        if (navigator.onLine) {\n            var updatedSyncDate = ((moment(Date.now()).utcOffset('-0500').format('YYYY-MM-DD HH:mm')));\n            var lastSyncDateVar = \"\";\n            var lastSyncDate = JsStoreFunction.getLastSyncDateForApplicationMaster().then(response => {\n                console.log(response);\n                if (response.length > 0) {\n                    lastSyncDateVar = response[0];\n                } else {\n                    lastSyncDateVar = null;\n                }\n                if (navigator.onLine) {\n                    MasterSyncService.getCurrencyListForSync(lastSyncDateVar)\n                        .then(response => {\n                            JsStoreFunction.syncCurrency(response.data);\n                            this.setState({\n                                syncedMasters: this.state.syncedMasters + 1,\n                                syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                            })\n                            if (navigator.onLine) {\n                                //Code to Sync DataSource list\n                                MasterSyncService.getDataSourceListForSync(lastSyncDateVar)\n                                    .then(response => {\n                                        JsStoreFunction.syncDataSource(response.data);\n                                        this.setState({\n                                            syncedMasters: this.state.syncedMasters + 1,\n                                            syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                        })\n                                        if (navigator.onLine) {\n                                            //Code to Sync DataSourceType list\n                                            MasterSyncService.getDataSourceTypeListForSync(lastSyncDateVar)\n                                                .then(response => {\n                                                    JsStoreFunction.syncDataSourceType(response.data);\n                                                    this.setState({\n                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                    })\n                                                })\n                                                .catch(\n                                                    error => {\n                                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                        this.setState({\n                                                            message: \"Sync failed\"\n                                                        })\n                                                    }\n                                                );\n                                        } else {\n                                            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                            this.setState({\n                                                message: \"Sync failed\"\n                                            })\n                                        }\n                                    })\n                                    .catch(\n                                        error => {\n                                            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                            this.setState({\n                                                message: \"Sync failed\"\n                                            })\n                                        }\n                                    );\n                            } else {\n                                document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                this.setState({\n                                    message: \"Sync failed\"\n                                })\n                            }\n\n                            //funding source\n                            //healtharea\n                            //language\n                            //logistics unit\n                            //manufacturer\n                            //organiation\n                            //planning unit\n                            // product\n                            //product category\n                            //region\n                            //shipment status\n                            //shipment status allowed\n                            // sub funding source\n                            //Country\n                            //  unit\n                            //unit type\n                            //last sync date\n                        })\n                        .catch(\n                            error => {\n                                document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                this.setState({\n                                    message: \"Sync failed\"\n                                })\n                            }\n                        );\n                } else {\n                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                    this.setState({\n                        message: \"Sync failed\"\n                    })\n                }\n            })\n                .catch(\n                    error => {\n                        lastSyncDateVar = null;\n                    }\n                )\n\n        } else {\n            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n            this.setState({\n                message: \"Sync failed\"\n            })\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}