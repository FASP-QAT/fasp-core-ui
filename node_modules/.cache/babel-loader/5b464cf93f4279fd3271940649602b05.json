{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/DataSourceType/AddDataSourceTypeComponent.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport i18n from '../../i18n'; // import AuthenticationService from '../common/AuthenticationService.js';\n\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js';\nvar initialValues = {\n  label: ''\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    label: Yup.string().required(i18n.t('static.datasourcetype.datasourcetypetext'))\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar AddDataSourceTypeComponent = /*#__PURE__*/function (_Component) {\n  _inherits(AddDataSourceTypeComponent, _Component);\n\n  function AddDataSourceTypeComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddDataSourceTypeComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddDataSourceTypeComponent).call(this, props));\n    _this.state = {\n      dataSourceType: {\n        active: '',\n        label: {\n          label_en: '',\n          // spaLabel: '',\n          // freLabel: '',\n          // porLabel: '',\n          labelId: 0\n        }\n      }\n    };\n    _this.dataChange = _this.dataChange.bind(_assertThisInitialized(_this));\n    _this.Capitalize = _this.Capitalize.bind(_assertThisInitialized(_this));\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AddDataSourceTypeComponent, [{\n    key: \"dataChange\",\n    value: function dataChange(event) {\n      // this.setState(\n      //     {\n      //         [event.target.name]: event.target.value\n      //     }\n      // )\n      var dataSourceType = this.state.dataSourceType;\n\n      if (event.target.name === \"label\") {\n        dataSourceType.label.label_en = event.target.value;\n      }\n\n      this.setState({\n        dataSourceType: dataSourceType\n      }, function () {// console.log(this.state)\n      });\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        'label': true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('dataSourceType', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {// AuthenticationService.setupAxiosInterceptors();\n      // $(\"#dataSourceTypeForm\").validate({\n      //     ignore: [],\n      //     rules: {\n      //         'label_en': {\n      //             required: true,\n      //             lettersonlywhitespace: true,\n      //             maxlength: 255\n      //         },\n      // 'freLabel': {\n      //     lettersonly: true,\n      //     maxlength: 255\n      // },\n      // 'spaLabel': {\n      //     lettersonly: true,\n      //     maxlength: 255\n      // },\n      // 'porLabel': {\n      //     lettersonly: true,\n      //     maxlength: 255\n      // }\n      //     },\n      //     errorPlacement: function (error, element) {\n      //         error.insertAfter(element);\n      //     }\n      // });\n    }\n  }, {\n    key: \"Capitalize\",\n    value: function Capitalize(str) {\n      var dataSourceType = this.state.dataSourceType;\n      dataSourceType.label.label_en = str.charAt(0).toUpperCase() + str.slice(1);\n    } // updateFieldData(event) {\n    //     //console.log(event.target.name); \n    //     this.setState(\n    //         {\n    //             [event.target.name]: event.target.value\n    //         }\n    //     )\n    // }\n    // submitForm() {\n    //     if (navigator.onLine) {\n    //         console.log(this.state);\n    //         DataSourceTypeService.addDataSourceType(this.state).then(response => {\n    //             this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n    //             console.log(\"success\");\n    //         }\n    //         )\n    //             .catch(\n    //                 error => {\n    //                     switch (error.message) {\n    //                         case \"Network Error\":\n    //                             this.setState({\n    //                                 message: error.message\n    //                             })\n    //                             break\n    //                         default:\n    //                             this.setState({\n    //                                 message: error.message\n    //                             })\n    //                             break\n    //                     }\n    //                 }\n    //             )\n    //     } else {\n    //         alert(\"To perform this action you must be online.\");\n    //     }\n    // }\n    // render() {\n    //     return (\n    //         <div className=\"page-content-wrap\">\n    //             <div className=\"row\">\n    //                 <div className=\"\">\n    //                     <ul class=\"breadcrumb text-left\">\n    //                         <li><a href=\"#\">Home</a></li>\n    //                         <li><a href=\"#\">Admin</a></li>\n    //                         <li><a href=\"#\">Data source type</a></li>\n    //                         <li><a href=\"#\">Add Datasource type</a></li>\n    //                     </ul>\n    //                 </div>\n    //                 <div className=\"help-block\"></div>\n    //                 <div className=\"col-md-8 col-md-offset-2\">\n    //                     <div className=\"login mt-2 block\">\n    //                         <div className=\"panel panel-default\">\n    //                             <div className=\"panel-heading\">\n    //                                 <h3 className=\"panel-title\">Add Data Source Type</h3>\n    //                             </div>\n    //                             <div className=\"panel-body\">\n    //                                 <div className=\"col-md-8 col-md-offset-2\">\n    //                                     <div className=\"block\">\n    //                                         <form className=\"form-horizontal\" name=\"dataSourceTypeForm\" id=\"dataSourceTypeForm\">\n    //                                             <div className=\"form-group\">\n    //                                                 <label className=\"col-md-5 control-label \">Data source type name (English):</label>\n    //                                                 <div className=\"col-md-7\">\n    //                                                     <input className=\"form-control\" type=\"text\" name=\"label_en\" value={this.Capitalize(this.state.label_en)} onChange={this.updateFieldData} ></input>\n    //                                                     <span className=\"help-block\"></span>\n    //                                                 </div>\n    //                                             </div>\n    //                                         </form>\n    //                                     </div>\n    //                                 </div>\n    //                             </div>\n    //                             <div className=\"panel-footer\">\n    //                                 <button type=\"button\" className=\"btn btn-success pull-right\" onClick={this.submitForm}>Submit</button>\n    //                             </div>\n    //                         </div>\n    //                     </div>\n    //                 </div>\n    //             </div>\n    //         </div>\n    //     );\n    // }\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, i18n.t('static.datasourcetype.datasourcetypeadd')), ' '), React.createElement(Formik, {\n        initialValues: initialValues,\n        validate: validate(validationSchema),\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting,\n              setErrors = _ref.setErrors;\n          // alert(\"----\"+this.state.label.label_en);\n          // console.log(\"------IN SUBMIT------\", this.state.dataSourceType.label)\n          DataSourceTypeService.addDataSourceType(_this2.state.dataSourceType.label).then(function (response) {\n            if (response.data.status == \"Success\") {\n              _this2.props.history.push(\"/dataSourceType/listDataSourceType/\".concat(response.data.message));\n            } else {\n              _this2.setState({\n                message: response.data.message\n              });\n            }\n          }).catch(function (error) {\n            switch (error.message) {\n              case \"Network Error\":\n                _this2.setState({\n                  message: error.message\n                });\n\n                break;\n\n              default:\n                _this2.setState({\n                  message: error.response.data.message\n                });\n\n                break;\n            }\n          });\n        },\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"dataSourceType\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 331\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 332\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 333\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"label\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 334\n            },\n            __self: this\n          }, i18n.t('static.datasourcetype.datasourcetype')), React.createElement(Input, {\n            type: \"text\",\n            name: \"label\",\n            id: \"label\",\n            bsSize: \"sm\",\n            valid: !errors.label,\n            invalid: touched.label && !!errors.label,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n\n              _this2.Capitalize(e.target.value);\n            },\n            onBlur: handleBlur,\n            value: _this2.state.dataSourceType.label.label_en,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 335\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 345\n            },\n            __self: this\n          }, errors.label))), React.createElement(CardFooter, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 349\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 350\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"reset\",\n            color: \"danger\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: _this2.cancelClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 352\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-times\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 352\n            },\n            __self: this\n          }), \" \", i18n.t('static.common.cancel')), React.createElement(Button, {\n            type: \"submit\",\n            color: \"success\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: function onClick() {\n              return _this2.touchAll(setTouched, errors);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 353\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-check\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 353\n            },\n            __self: this\n          }), i18n.t('static.common.submit')), \"\\xA0\")));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/dataSourceType/listDataSourceType/\" + \"Action Canceled\");\n    }\n  }]);\n\n  return AddDataSourceTypeComponent;\n}(Component);\n\nexport { AddDataSourceTypeComponent as default };","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/DataSourceType/AddDataSourceTypeComponent.jsx"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","FormText","InputGroup","InputGroupAddon","InputGroupText","Formik","Yup","i18n","DataSourceTypeService","initialValues","label","validationSchema","values","object","shape","string","required","t","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","AddDataSourceTypeComponent","props","state","dataSourceType","active","label_en","labelId","dataChange","bind","Capitalize","cancelClicked","event","target","name","value","setState","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","str","charAt","toUpperCase","slice","flexBasis","setSubmitting","setErrors","addDataSourceType","then","response","data","status","history","push","message","catch","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","e","touchAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\nimport i18n from '../../i18n';\n// import AuthenticationService from '../common/AuthenticationService.js';\nimport DataSourceTypeService from '../../api/DataSourceTypeService.js'\n\nconst initialValues = {\n    label: ''\n}\n\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        label: Yup.string()\n            .required(i18n.t('static.datasourcetype.datasourcetypetext'))\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\n\n\nexport default class AddDataSourceTypeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataSourceType:\n            {\n                active: '',\n                \n                label: {\n                    label_en: '',\n                    // spaLabel: '',\n                    // freLabel: '',\n                    // porLabel: '',\n                    labelId: 0,\n                }\n            }\n        }\n\n        this.dataChange = this.dataChange.bind(this);\n        this.Capitalize = this.Capitalize.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n\n    }\n\n    dataChange(event) {\n        // this.setState(\n        //     {\n        //         [event.target.name]: event.target.value\n        //     }\n        // )\n        let { dataSourceType } = this.state\n        if (event.target.name === \"label\") {\n            dataSourceType.label.label_en = event.target.value\n        }\n\n        this.setState(\n            {\n                dataSourceType\n            }, () => {\n                // console.log(this.state)\n            }\n        )\n    };\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            'label': true,\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('dataSourceType', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n\n    componentDidMount() {\n        // AuthenticationService.setupAxiosInterceptors();\n        // $(\"#dataSourceTypeForm\").validate({\n        //     ignore: [],\n        //     rules: {\n        //         'label_en': {\n        //             required: true,\n        //             lettersonlywhitespace: true,\n        //             maxlength: 255\n        //         },\n        // 'freLabel': {\n\n        //     lettersonly: true,\n        //     maxlength: 255\n        // },\n        // 'spaLabel': {\n\n        //     lettersonly: true,\n        //     maxlength: 255\n        // },\n        // 'porLabel': {\n\n        //     lettersonly: true,\n        //     maxlength: 255\n        // }\n        //     },\n        //     errorPlacement: function (error, element) {\n        //         error.insertAfter(element);\n        //     }\n        // });\n\n\n    }\n\n    Capitalize(str) {\n        let { dataSourceType } = this.state\n        dataSourceType.label.label_en = str.charAt(0).toUpperCase() + str.slice(1)\n    }\n\n    // updateFieldData(event) {\n    //     //console.log(event.target.name); \n    //     this.setState(\n    //         {\n    //             [event.target.name]: event.target.value\n    //         }\n    //     )\n\n    // }\n\n    // submitForm() {\n    //     if (navigator.onLine) {\n\n    //         console.log(this.state);\n    //         DataSourceTypeService.addDataSourceType(this.state).then(response => {\n    //             this.props.history.push(`/dataSourceTypeList/${response.data.message}`)\n    //             console.log(\"success\");\n    //         }\n    //         )\n    //             .catch(\n    //                 error => {\n    //                     switch (error.message) {\n    //                         case \"Network Error\":\n    //                             this.setState({\n    //                                 message: error.message\n    //                             })\n    //                             break\n    //                         default:\n    //                             this.setState({\n    //                                 message: error.message\n    //                             })\n    //                             break\n    //                     }\n    //                 }\n    //             )\n\n\n\n\n    //     } else {\n    //         alert(\"To perform this action you must be online.\");\n    //     }\n    // }\n\n    // render() {\n    //     return (\n\n    //         <div className=\"page-content-wrap\">\n\n\n    //             <div className=\"row\">\n\n    //                 <div className=\"\">\n    //                     <ul class=\"breadcrumb text-left\">\n    //                         <li><a href=\"#\">Home</a></li>\n    //                         <li><a href=\"#\">Admin</a></li>\n    //                         <li><a href=\"#\">Data source type</a></li>\n    //                         <li><a href=\"#\">Add Datasource type</a></li>\n    //                     </ul>\n    //                 </div>\n    //                 <div className=\"help-block\"></div>\n\n    //                 <div className=\"col-md-8 col-md-offset-2\">\n\n    //                     <div className=\"login mt-2 block\">\n\n\n    //                         <div className=\"panel panel-default\">\n\n\n    //                             <div className=\"panel-heading\">\n    //                                 <h3 className=\"panel-title\">Add Data Source Type</h3>\n    //                             </div>\n    //                             <div className=\"panel-body\">\n    //                                 <div className=\"col-md-8 col-md-offset-2\">\n    //                                     <div className=\"block\">\n\n    //                                         <form className=\"form-horizontal\" name=\"dataSourceTypeForm\" id=\"dataSourceTypeForm\">\n\n    //                                             <div className=\"form-group\">\n    //                                                 <label className=\"col-md-5 control-label \">Data source type name (English):</label>\n    //                                                 <div className=\"col-md-7\">\n    //                                                     <input className=\"form-control\" type=\"text\" name=\"label_en\" value={this.Capitalize(this.state.label_en)} onChange={this.updateFieldData} ></input>\n    //                                                     <span className=\"help-block\"></span>\n    //                                                 </div>\n    //                                             </div>\n\n\n\n\n    //                                         </form>\n\n    //                                     </div>\n    //                                 </div>\n\n    //                             </div>\n    //                             <div className=\"panel-footer\">\n\n\n\n\n    //                                 <button type=\"button\" className=\"btn btn-success pull-right\" onClick={this.submitForm}>Submit</button>\n\n\n    //                             </div>\n\n\n    //                         </div>\n\n\n    //                     </div>\n\n\n    //                 </div>\n\n\n    //             </div>\n\n\n    //         </div>\n\n    //     );\n    // }\n\n    render() {\n        return (\n            <div className=\"animated fadeIn\">\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>{i18n.t('static.datasourcetype.datasourcetypeadd')}</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                initialValues={initialValues}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {\n\n                                    // alert(\"----\"+this.state.label.label_en);\n                                    // console.log(\"------IN SUBMIT------\", this.state.dataSourceType.label)\n                                    DataSourceTypeService.addDataSourceType(this.state.dataSourceType.label)\n                                        .then(response => {\n                                            if (response.data.status == \"Success\") {\n                                                this.props.history.push(`/dataSourceType/listDataSourceType/${response.data.message}`)\n                                            } else {\n                                                this.setState({\n                                                    message: response.data.message\n                                                })\n                                            }\n                                        })\n                                        .catch(\n                                            error => {\n                                                switch (error.message) {\n                                                    case \"Network Error\":\n                                                        this.setState({\n                                                            message: error.message\n                                                        })\n                                                        break\n                                                    default:\n                                                        this.setState({\n                                                            message: error.response.data.message\n                                                        })\n                                                        break\n                                                }\n                                            }\n                                        );\n                                }}\n\n\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='dataSourceType'>\n                                                <CardBody>\n                                                    <FormGroup>\n                                                        <Label for=\"label\">{i18n.t('static.datasourcetype.datasourcetype')}</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"label\"\n                                                            id=\"label\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.label}\n                                                            invalid={touched.label && !!errors.label}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e); this.Capitalize(e.target.value) }}\n                                                            onBlur={handleBlur}\n                                                            value={this.state.dataSourceType.label.label_en}\n                                                            required />\n                                                        <FormFeedback>{errors.label}</FormFeedback>\n                                                    </FormGroup>\n                                                </CardBody>\n\n                                                <CardFooter>\n                                                    <FormGroup>\n                                                        \n                                                        <Button type=\"reset\" color=\"danger\" className=\"mr-1 float-right\"size=\"sm\" onClick={this.cancelClicked}><i className=\"fa fa-times\"></i> {i18n.t('static.common.cancel')}</Button>\n                                                        <Button type=\"submit\" color=\"success\" className=\"mr-1 float-right\"size=\"sm\" onClick={() => this.touchAll(setTouched, errors)}><i className=\"fa fa-check\"></i>{i18n.t('static.common.submit')}</Button>\n                                                        &nbsp;\n                                                    </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n\n                                        )} />\n\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n    cancelClicked() {\n        this.props.history.push(`/dataSourceType/listDataSourceType/` + \"Action Canceled\")\n    }\n}"]},"metadata":{},"sourceType":"module"}