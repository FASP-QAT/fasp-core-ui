{"ast":null,"code":"import * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport CryptoJS from 'crypto-js';\nimport { SECRET_KEY } from '../Constants.js'; // This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\n\nexport var idbCon = new JsStore.Connection();\nexport var dbname = 'fasp';\n\nfunction getDbSchema() {\n  var tblDataSource = {\n    name: 'dataSource',\n    columns: {\n      // Here \"Id\" is name of column \n      dataSourceId: {\n        primaryKey: true\n      },\n      active: {\n        notNull: true,\n        dataType: \"boolean\"\n      },\n      dataSourceType: {\n        notNull: true,\n        dataType: \"object\"\n      },\n      label: {\n        notNull: true,\n        dataType: \"object\"\n      }\n    }\n  };\n  var db = {\n    name: dbname,\n    tables: [tblDataSource]\n  };\n  return db;\n}\n\nexport function syncDataSource(json) {\n  var database = getDbSchema();\n  var isDbCreated = idbCon.initDb(database);\n\n  for (var i = 0; i < json.length; i++) {\n    console.log(\"in loop\");\n    var newData = {\n      dataSourceId: json[i].dataSourceId,\n      active: json[i].active,\n      dataSourceType: json[i].dataSourceType,\n      label: json[i].label\n    };\n    idbCon.insert({\n      into: \"dataSource\",\n      upsert: true,\n      values: [newData] //you can insert multiple values at a time\n\n    });\n  }\n} // export function syncCurrency(json) {\n//     console.log(\"in sync currency\")\n//     for (var i = 0; i < json.length; i++) {\n//         console.log(\"in for\", json[i])\n//         const qry = new Query(`insert into currency \n//     values ({currencyId:'@currencyId',conversionRateToUsd:'@conversionRateToUsd',\n//     currencyCode:'@currencyCode',\n//     currencySymbol:'@currencySymbol',\n//     label:'@label'}) return\n//     `);\n//         qry.map(\"@currencyId\", json[i].currencyId);\n//         qry.map(\"@conversionRateToUsd\", json[i].conversionRateToUsd);\n//         qry.map(\"@currencyCode\", json[i].currencyCode);\n//         qry.map(\"@currencySymbol\", json[i].currencySymbol);\n//         qry.map(\"@label\", json[i].label);\n//         idbCon.runSql(qry);\n//     }\n//     return 1;\n// }","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/CommonComponent/JsStoreFunctionsCore.js"],"names":["JsStore","IDataBase","DATA_TYPE","ITable","CryptoJS","SECRET_KEY","idbCon","Connection","dbname","getDbSchema","tblDataSource","name","columns","dataSourceId","primaryKey","active","notNull","dataType","dataSourceType","label","db","tables","syncDataSource","json","database","isDbCreated","initDb","i","length","console","log","newData","insert","into","upsert","values"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,SAAzB;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,MAA/B,QAA6C,SAA7C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,UAAT,QAA2B,iBAA3B,C,CACA;AACA;;AACA,OAAO,IAAMC,MAAM,GAAG,IAAIN,OAAO,CAACO,UAAZ,EAAf;AACP,OAAO,IAAMC,MAAM,GAAG,MAAf;;AAEP,SAASC,WAAT,GAAuB;AACnB,MAAIC,aAAa,GAAG;AAChBC,IAAAA,IAAI,EAAE,YADU;AAEhBC,IAAAA,OAAO,EAAE;AACL;AACAC,MAAAA,YAAY,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAFT;AAGLC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,QAAQ,EAAE;AAA3B,OAHH;AAILC,MAAAA,cAAc,EAAE;AAAEF,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,QAAQ,EAAE;AAA3B,OAJX;AAKLE,MAAAA,KAAK,EAAE;AAAEH,QAAAA,OAAO,EAAE,IAAX;AAAiBC,QAAAA,QAAQ,EAAE;AAA3B;AALF;AAFO,GAApB;AAUA,MAAIG,EAAE,GAAG;AACLT,IAAAA,IAAI,EAAEH,MADD;AAELa,IAAAA,MAAM,EAAE,CAACX,aAAD;AAFH,GAAT;AAIA,SAAOU,EAAP;AACH;;AAED,OAAO,SAASE,cAAT,CAAwBC,IAAxB,EAA8B;AACjC,MAAIC,QAAQ,GAAGf,WAAW,EAA1B;AACA,MAAIgB,WAAW,GAACnB,MAAM,CAACoB,MAAP,CAAcF,QAAd,CAAhB;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACK,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClCE,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,QAAIC,OAAO,GAAG;AACVlB,MAAAA,YAAY,EAAEU,IAAI,CAACI,CAAD,CAAJ,CAAQd,YADZ;AAEVE,MAAAA,MAAM,EAAEQ,IAAI,CAACI,CAAD,CAAJ,CAAQZ,MAFN;AAGVG,MAAAA,cAAc,EAAEK,IAAI,CAACI,CAAD,CAAJ,CAAQT,cAHd;AAIVC,MAAAA,KAAK,EAAEI,IAAI,CAACI,CAAD,CAAJ,CAAQR;AAJL,KAAd;AAMAb,IAAAA,MAAM,CAAC0B,MAAP,CAAc;AACVC,MAAAA,IAAI,EAAE,YADI;AAEVC,MAAAA,MAAM,EAAE,IAFE;AAGVC,MAAAA,MAAM,EAAE,CAACJ,OAAD,CAHE,CAGS;;AAHT,KAAd;AAKH;AAEJ,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport CryptoJS from 'crypto-js'\nimport { SECRET_KEY } from '../Constants.js'\n// This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\nexport const idbCon = new JsStore.Connection();\nexport const dbname = 'fasp';\n\nfunction getDbSchema() {\n    var tblDataSource = {\n        name: 'dataSource',\n        columns: {\n            // Here \"Id\" is name of column \n            dataSourceId: { primaryKey: true },\n            active: { notNull: true, dataType: \"boolean\" },\n            dataSourceType: { notNull: true, dataType: \"object\" },\n            label: { notNull: true, dataType: \"object\" }\n        }\n    };\n    var db = {\n        name: dbname,\n        tables: [tblDataSource]\n    }\n    return db;\n}\n\nexport function syncDataSource(json) {\n    var database = getDbSchema();\n    var isDbCreated=idbCon.initDb(database);\n    for (var i = 0; i < json.length; i++) {\n        console.log(\"in loop\")\n        var newData = {\n            dataSourceId: json[i].dataSourceId,\n            active: json[i].active,\n            dataSourceType: json[i].dataSourceType,\n            label: json[i].label\n        }\n        idbCon.insert({\n            into: \"dataSource\",\n            upsert: true,\n            values: [newData], //you can insert multiple values at a time\n        })\n    }\n    \n}\n\n// export function syncCurrency(json) {\n//     console.log(\"in sync currency\")\n//     for (var i = 0; i < json.length; i++) {\n//         console.log(\"in for\", json[i])\n//         const qry = new Query(`insert into currency \n//     values ({currencyId:'@currencyId',conversionRateToUsd:'@conversionRateToUsd',\n//     currencyCode:'@currencyCode',\n//     currencySymbol:'@currencySymbol',\n//     label:'@label'}) return\n//     `);\n//         qry.map(\"@currencyId\", json[i].currencyId);\n//         qry.map(\"@conversionRateToUsd\", json[i].conversionRateToUsd);\n//         qry.map(\"@currencyCode\", json[i].currencyCode);\n//         qry.map(\"@currencySymbol\", json[i].currencySymbol);\n//         qry.map(\"@label\", json[i].label);\n//         idbCon.runSql(qry);\n//     }\n//     return 1;\n// }"]},"metadata":{},"sourceType":"module"}