{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/Dimension/AddDimensionComponent.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport i18n from '../../i18n';\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.min.css';\nimport UnitTypeService from '../../api/UnitTypeService.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\nvar initialValues = {\n  label: \"\"\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    label: Yup.string().required('Please enter diamension type')\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar AddUnitTypeComponent = /*#__PURE__*/function (_Component) {\n  _inherits(AddUnitTypeComponent, _Component);\n\n  function AddUnitTypeComponent(props) {\n    var _this;\n\n    _classCallCheck(this, AddUnitTypeComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddUnitTypeComponent).call(this, props));\n    _this.state = {\n      unitType: {\n        label: {\n          label_en: ''\n        }\n      }\n    };\n    _this.Capitalize = _this.Capitalize.bind(_assertThisInitialized(_this));\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    _this.dataChange = _this.dataChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AddUnitTypeComponent, [{\n    key: \"dataChange\",\n    value: function dataChange(event) {\n      var unitType = this.state.unitType;\n\n      if (event.target.name === \"label\") {\n        unitType.label.label_en = event.target.value;\n      }\n\n      this.setState({\n        unitType: unitType\n      });\n    }\n  }, {\n    key: \"Capitalize\",\n    value: function Capitalize(str) {\n      this.state.unitType.label.label_en = str.charAt(0).toUpperCase() + str.slice(1);\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        label: true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('simpleForm', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      AuthenticationService.setupAxiosInterceptors();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Add Dimension Type\"), ' '), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Formik // initialValues={initialValues}\n      , {\n        validate: validate(validationSchema),\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting,\n              setErrors = _ref.setErrors;\n          console.log(_this2.state.unitType);\n          UnitTypeService.addUniType(_this2.state.unitType).then(function (response) {\n            if (response.data.status == \"Success\") {\n              _this2.props.history.push(\"/diamension/diamensionlist/\".concat(response.data.message));\n            } else {\n              _this2.setState({\n                message: response.data.message\n              });\n            }\n          }).catch(function (error) {\n            switch (error.message) {\n              case \"Network Error\":\n                _this2.setState({\n                  message: error.message\n                });\n\n                break;\n\n              default:\n                _this2.setState({\n                  message: error.response.data.message\n                });\n\n                break;\n            }\n          });\n          setTimeout(function () {\n            setSubmitting(false);\n          }, 2000);\n        },\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            className: \"needs-validation\",\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"simpleForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 172\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"label\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173\n            },\n            __self: this\n          }, \"Dimension Type\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"label\",\n            id: \"label\",\n            bsSize: \"sm\",\n            valid: !errors.label,\n            invalid: touched.label && !!errors.label,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n\n              _this2.Capitalize(e.target.value);\n            },\n            onBlur: handleBlur,\n            value: _this2.state.unitType.label.label_en,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 184\n            },\n            __self: this\n          }, errors.label)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 187\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"reset\",\n            color: \"danger\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: _this2.cancelClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 189\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-check\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 189\n            },\n            __self: this\n          }), i18n.t('static.common.cancel')), React.createElement(Button, {\n            type: \"submit\",\n            color: \"success\",\n            className: \"mr-1 float-right\",\n            size: \"sm\",\n            onClick: function onClick() {\n              return _this2.touchAll(setTouched, errors);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 190\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-check\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 190\n            },\n            __self: this\n          }), i18n.t('static.common.submit')), \"\\xA0\"));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }))))));\n    }\n  }, {\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/diamension/diamensionlist/\" + \"Action Canceled\");\n    }\n  }]);\n\n  return AddUnitTypeComponent;\n}(Component);\n\nexport { AddUnitTypeComponent as default };","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/Dimension/AddDimensionComponent.js"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","FormText","InputGroup","InputGroupAddon","InputGroupText","Formik","Yup","i18n","Select","UnitTypeService","AuthenticationService","initialValues","label","validationSchema","values","object","shape","string","required","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","AddUnitTypeComponent","props","state","unitType","label_en","Capitalize","bind","cancelClicked","dataChange","event","target","name","value","setState","str","charAt","toUpperCase","slice","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","setupAxiosInterceptors","flexBasis","setSubmitting","setErrors","console","log","addUniType","then","response","data","status","history","push","message","catch","setTimeout","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","e","t","touchAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\nimport i18n from '../../i18n';\n\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.min.css';\nimport UnitTypeService from '../../api/UnitTypeService.js';\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nconst initialValues = {\n    label: \"\"\n}\n\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        label: Yup.string()\n            .required('Please enter diamension type')\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\n\n\nexport default class AddUnitTypeComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            unitType: {\n                label: {\n                    label_en: ''\n                }\n            }\n        }\n        this.Capitalize = this.Capitalize.bind(this);\n\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    dataChange(event) {\n        let { unitType } = this.state\n        if (event.target.name === \"label\") {\n            unitType.label.label_en = event.target.value\n        }\n        this.setState(\n            {\n                unitType\n            }\n        )\n    };\n\n    Capitalize(str) {\n        this.state.unitType.label.label_en = str.charAt(0).toUpperCase() + str.slice(1)\n    }\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            label: true\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('simpleForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n\n    }\n\n    render() {\n\n        return (\n            <div className=\"animated fadeIn\">\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>Add Dimension Type</strong>{' '}\n                            </CardHeader>\n                            <CardBody>\n                                <Formik\n                                    // initialValues={initialValues}\n                                    validate={validate(validationSchema)}\n\n                                    onSubmit={(values, { setSubmitting, setErrors }) => {\n                                        console.log(this.state.unitType)\n                                        UnitTypeService.addUniType(this.state.unitType).then(response => {\n                                            if (response.data.status == \"Success\") {\n                                                this.props.history.push(`/diamension/diamensionlist/${response.data.message}`)\n                                              } else {\n                                                this.setState({\n                                                  message: response.data.message\n                                                })\n                                              }\n                                        }\n                                        )\n                                            .catch(\n                                                error => {\n                                                    switch (error.message) {\n                                                        case \"Network Error\":\n                                                            this.setState({\n                                                                message: error.message\n                                                            })\n                                                            break\n                                                        default:\n                                                            this.setState({\n                                                                message: error.response.data.message\n                                                            })\n                                                            break\n                                                    }\n                                                }\n                                            )\n                                        setTimeout(() => {\n                                            setSubmitting(false)\n                                        }, 2000)\n                                    }\n                                    }\n\n                                    render={\n                                        ({\n                                            values,\n                                            errors,\n                                            touched,\n                                            handleChange,\n                                            handleBlur,\n                                            handleSubmit,\n                                            isSubmitting,\n                                            isValid,\n                                            setTouched\n                                        }) => (\n                                                <Form className=\"needs-validation\" onSubmit={handleSubmit} noValidate name='simpleForm'>\n\n\n                                                    <FormGroup>\n                                                        <Label for=\"label\">Dimension Type</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"label\"\n                                                            id=\"label\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.label}\n                                                            invalid={touched.label && !!errors.label}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e); this.Capitalize(e.target.value) }}\n                                                            onBlur={handleBlur}\n                                                            value={this.state.unitType.label.label_en}\n                                                            required />\n                                                        <FormFeedback>{errors.label}</FormFeedback>\n                                                    </FormGroup>\n\n                                                    <FormGroup>\n                                                        \n                                                    <Button type=\"reset\" color=\"danger\"className=\"mr-1 float-right\"size=\"sm\" onClick={this.cancelClicked}><i className=\"fa fa-check\"></i>{i18n.t('static.common.cancel')}</Button>\n                                                        <Button type=\"submit\" color=\"success\" className=\"mr-1 float-right\"size=\"sm\" onClick={() => this.touchAll(setTouched, errors)}><i className=\"fa fa-check\"></i>{i18n.t('static.common.submit')}</Button>\n                                                        &nbsp;\n                                                    </FormGroup>\n                                                </Form>\n                                            )}\n\n                                />\n                            </CardBody>\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n    cancelClicked() {\n        this.props.history.push(`/diamension/diamensionlist/` + \"Action Canceled\")\n    }\n} "]},"metadata":{},"sourceType":"module"}