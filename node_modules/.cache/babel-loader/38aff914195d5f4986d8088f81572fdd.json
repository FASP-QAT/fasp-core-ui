{"ast":null,"code":"import * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport * as SqlWeb from \"sqlweb\";\nimport { Query } from \"sqlweb\";\nimport CryptoJS from 'crypto-js';\nimport { SECRET_KEY } from '../Constants.js'; // This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\n\nJsStore.useSqlWeb(SqlWeb);\nexport var idbCon = new JsStore.Instance();\nexport var dbname = 'fasp';\n\nvar getDatabase = function getDatabase() {\n  var tblStudent = {\n    name: 'programData',\n    columns: {\n      id: {\n        primaryKey: true\n      },\n      programId: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      },\n      version: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      },\n      programName: {\n        notNull: true,\n        dataType: DATA_TYPE.String\n      },\n      programData: {\n        dataType: DATA_TYPE.String,\n        notNull: true\n      },\n      userId: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      }\n    }\n  };\n  var dataBase = {\n    name: dbname,\n    tables: [tblStudent]\n  };\n  return dataBase;\n};\n\nexport var getDbQuery = function getDbQuery() {\n  var db = \"DEFINE DB fasp;\";\n  var tblStudentQry = \"DEFINE TABLE programData(\\n        id PRIMARYKEY,\\n        programId NUMBER NOTNULL ,\\n        version NOTNULL NUMBER,\\n        programName NOTNULL STRING,\\n        programData STRING NOTNULL,\\n        userId NUMBER NOTNULL\\n    );\";\n  var lastSyncDate = \"DEFINE TABLE lastSyncDate(\\n        id PRIMARYKEY,\\n        lastSyncDate STRING\\n    );\";\n  var currency = \"DEFINE TABLE currency (\\n    currencyId PRIMARYKEY,\\n    conversionRateToUsd number,\\n    currencyCode STRING,\\n    currencySymbol STRING,\\n    label object\\n     );\";\n  var dataSource = \"DEFINE TABLE dataSource (\\n        dataSourceId PRIMARYKEY,\\n        active STRING,\\n        dataSourceType object,\\n        label object\\n         );\";\n  var dataSourceType = \"DEFINE TABLE dataSourceType (\\n            dataSourceTypeId PRIMARYKEY,\\n            active STRING,\\n            label object\\n             );\";\n  var fundingSource = \"DEFINE TABLE fundingSource (\\n                fundingSourceId PRIMARYKEY,\\n                active STRING,\\n                label object,\\n                realmId number\\n                 );\";\n  var healthArea = \"DEFINE TABLE healthArea (\\n                    healthAreaId PRIMARYKEY,\\n                    active STRING,\\n                    label object,\\n                    realmId number\\n                     );\";\n  var lu = \"DEFINE TABLE logisticsUnit (\\n        logisticsUnitId PRIMARYKEY,\\n        active STRING,\\n        heightQty number,\\n        heightUnit object,\\n        lengthQty number,\\n        lengthUnit object,\\n        manufacturer object,\\n        planningUnit object,\\n        qtyInEuroOne number,\\n        qtyInEuroTwo number,\\n        qtyOfPlanningUnits number,\\n        unit object,\\n        weightQty number,\\n        weightUnit object,\\n        widthQty number,\\n        widthUnit object,\\n        label object,\\n        realmId number\\n         );\";\n  var manufacturer = \"DEFINE TABLE manufacturer (\\n        manufacturerId PRIMARYKEY,\\n        active STRING,\\n        label object,\\n        realmId number\\n         );\";\n  var organisation = \"DEFINE TABLE organisation (\\n        organisationId PRIMARYKEY,\\n        active STRING,\\n        label object,\\n        realmId number\\n         );\";\n  var planningUnit = \"DEFINE TABLE planningUnit (\\n        planningUnitId PRIMARYKEY,\\n        active STRING,\\n        label object,\\n        realmId number,\\n        price number,\\n        productId number,\\n        qtyOfForecastingUnits number,\\n        unit object\\n         );\";\n  var product = \"DEFINE TABLE product (\\n        productId PRIMARYKEY,\\n        active STRING,\\n        label object,\\n        realmId number,\\n        forecastUnit object,\\n        genericLabel object,\\n        productCategory object\\n         );\";\n  var productCategory = \"DEFINE TABLE productCategory (\\n        productCategoryId PRIMARYKEY,\\n        active STRING,\\n        label object\\n         );\";\n  var region = \"DEFINE TABLE region (\\n        regionId PRIMARYKEY,\\n        active STRING,\\n        label object,\\n        realmId number,\\n        capacityCbm number\\n         );\";\n  var shipmentStatus = \"DEFINE TABLE shipmentStatus (\\n        shipmentStatusId PRIMARYKEY,\\n        active STRING,\\n        label object\\n         );\";\n  var shipmentStatusAllowed = \"DEFINE TABLE shipmentStatusAllowed (\\n        shipmentStatusAllowedId PRIMARYKEY,\\n        nextShipmentStatusId number,\\n        shipmentStatusId number\\n         );\";\n  var unit = \"DEFINE TABLE unit (\\n        unitId PRIMARYKEY,\\n        active STRING,\\n        label object,\\n        unitCode string,\\n        unitType object\\n         );\";\n  var unitType = \"DEFINE TABLE unitType (\\n        unitTypeId PRIMARYKEY,\\n        label object\\n         );\";\n  var subFundingSource = \"DEFINE TABLE subFundingSource (\\n        subFundingSourceId PRIMARYKEY,\\n        label object,\\n        active STRING,\\n        fundingSource object,\\n        realmId number\\n         );\";\n  var country = \"DEFINE TABLE country (\\n        countryId PRIMARYKEY,\\n        label object,\\n        active STRING,\\n        currency object,\\n        language object\\n         );\";\n  var language = \"DEFINE TABLE language (\\n        languageId PRIMARYKEY,\\n        active STRING,\\n        languageName string\\n         );\";\n  var dbCreatequery = db + tblStudentQry + lastSyncDate + currency + dataSource + dataSourceType + fundingSource + healthArea + lu + manufacturer + organisation + planningUnit + product + productCategory + region + shipmentStatus + shipmentStatusAllowed + unit + unitType + subFundingSource + country + language;\n  return dbCreatequery;\n};\nexport var initJsStore = function initJsStore() {\n  var qry = getDbQuery();\n  idbCon.runSql(qry).then(function () {}).catch(function (ex) {\n    console.error(ex);\n  });\n};\nexport function saveProgram(programJson) {\n  var curUser = 1;\n\n  for (var i = 0; i < programJson.length; i++) {\n    var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(programJson[i]), SECRET_KEY);\n    var programName = CryptoJS.AES.encrypt(JSON.stringify(programJson[i].label), SECRET_KEY);\n    var qry = new Query(\"insert into programData \\n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\\n    \");\n    qry.map(\"@id\", programJson[i].programId + \"_v\" + programJson[i].programVersion + \"_uId_\" + curUser);\n    qry.map(\"@programId\", programJson[i].programId);\n    qry.map(\"@version\", programJson[i].programVersion);\n    qry.map(\"@programName\", programName.toString());\n    qry.map(\"@programData\", encryptedText.toString());\n    qry.map(\"@userId\", curUser);\n    idbCon.runSql(qry);\n  }\n\n  return 1;\n}\nexport function getProgramDataByprogramIds(programIds) {\n  var qry = new Query(\"select * from programData where id In (\".concat(programIds, \")\"));\n  return idbCon.runSql(qry);\n}\nexport function getProgramDataList() {\n  console.log(\"in jsstore function program\");\n  var curUser = 1;\n  var qry = new Query(\"select * from programData where userId=\".concat(curUser));\n  console.log(\"after query build\");\n  var result = idbCon.runSql(qry);\n  console.log(\"result\", result);\n  return result;\n}\nexport function importProgram(programJson) {\n  var curUser = 1;\n  var qry = new Query(\"insert into programData \\n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\\n    \");\n  qry.map(\"@id\", programJson.programId + \"_v\" + programJson.version + \"_uId_\" + curUser);\n  qry.map(\"@programId\", programJson.programId);\n  qry.map(\"@version\", programJson.version);\n  qry.map(\"@programName\", programJson.programName);\n  qry.map(\"@programData\", programJson.programData);\n  qry.map(\"@userId\", curUser);\n  idbCon.runSql(qry);\n  return 1;\n}\nexport function getLastSyncDateForApplicationMaster() {\n  var qry = new Query(\"select * from lastSyncDate where id=0\");\n  return idbCon.runSql(qry);\n}\nexport function syncCurrency(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].currencyId).concat(\",\");\n    data[i] = {\n      currencyId: json[i].currencyId,\n      conversionRateToUsd: json[i].conversionRateToUsd,\n      label: json[i].label,\n      currencyCode: json[i].currencyCode,\n      currencySymbol: json[i].currencySymbol\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM currency WHERE currencyId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into currency Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncDataSource(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].dataSourceId).concat(\",\");\n    data[i] = {\n      dataSourceId: json[i].dataSourceId,\n      active: json[i].active.toString(),\n      label: json[i].label,\n      dataSourceType: json[i].dataSourceType\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM dataSource WHERE dataSourceId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into dataSource Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncDataSourceType(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].dataSourceTypeId).concat(\",\");\n    data[i] = {\n      dataSourceTypeId: json[i].dataSourceTypeId,\n      active: json[i].active.toString(),\n      label: json[i].label\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM dataSourceType WHERE dataSourceTypeId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into dataSourceType Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function getLastSyncDateForRealm(realmId) {\n  var qry = new Query(\"select * from lastSyncDate where id=\".concat(realmId));\n  return idbCon.runSql(qry);\n}\nexport function syncFundingSource(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].fundingSourceId).concat(\",\");\n    data[i] = {\n      fundingSourceId: json[i].fundingSourceId,\n      active: json[i].active.toString(),\n      label: json[i].label,\n      realmId: json[i].realmId\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM fundingSource WHERE fundingSourceId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into fundingSource Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncHealthArea(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].healthAreaId).concat(\",\");\n    data[i] = {\n      healthAreaId: json[i].healthAreaId,\n      active: json[i].active.toString(),\n      label: json[i].label,\n      realmId: json[i].realmId\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM healthArea WHERE healthAreaId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into healthArea Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncLogisticsUnit(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].logisticsUnitId).concat(\",\");\n    data[i] = {\n      logisticsUnitId: json[i].logisticsUnitId,\n      active: json[i].active.toString(),\n      heightQty: json[i].heightQty,\n      heightUnit: json[i].heightUnit,\n      lengthQty: json[i].lengthQty,\n      lengthUnit: json[i].lengthUnit,\n      manufacturer: json[i].manufacturer,\n      planningUnit: json[i].planningUnit,\n      qtyInEuroOne: json[i].qtyInEuro1,\n      qtyInEuroTwo: json[i].qtyInEuro2,\n      qtyOfPlanningUnits: json[i].qtyOfPlanningUnits,\n      unit: json[i].unit,\n      weightQty: json[i].weightQty,\n      weightUnit: json[i].weightUnit,\n      widthQty: json[i].widthQty,\n      widthUnit: json[i].widthUnit,\n      label: json[i].label,\n      realmId: json[i].realmId\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM logisticsUnit WHERE logisticsUnitId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into logisticsUnit Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncManufacturer(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].manufacturerId).concat(\",\");\n    data[i] = {\n      manufacturerId: json[i].manufacturerId,\n      active: json[i].active.toString(),\n      label: json[i].label,\n      realmId: json[i].realmId\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM manufacturer WHERE manufacturerId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into manufacturer Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncOrganisation(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].organisationId).concat(\",\");\n    data[i] = {\n      organisationId: json[i].organisationId,\n      active: json[i].active.toString(),\n      label: json[i].label,\n      realmId: json[i].realmId\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    console.log(\"delete in str org\", deleteInStr);\n    var qry1 = new SqlWeb.Query(\"DELETE FROM organisation WHERE organisationId IN (\".concat(deleteInStr, \")\"));\n    console.log(\"qry1\", qry1);\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into organisation Values='@values'\");\n  console.log(\"Organisation qry\", qry);\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncPlanningUnit(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].planningUnitId).concat(\",\");\n    data[i] = {\n      planningUnitId: json[i].planningUnitId,\n      active: json[i].active.toString(),\n      label: json[i].label,\n      realmId: json[i].realmId,\n      productId: json[i].productId,\n      price: json[i].price,\n      qtyOfForecastingUnits: json[i].qtyOfForecastingUnits,\n      unit: json[i].unit\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM planningUnit WHERE planningUnitId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into planningUnit Values='@values'\");\n  qry.map(\"@values\", data);\n  console.log(\"before planning unit\");\n  var result = idbCon.runSql(qry);\n  console.log(\"result\", result);\n  return result;\n}\nexport function syncProduct(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].productId).concat(\",\");\n    data[i] = {\n      productId: json[i].productId,\n      active: json[i].active.toString(),\n      label: json[i].label,\n      realmId: json[i].realmId,\n      forecastUnit: json[i].forecastUnit,\n      genericLabel: json[i].genericLabel,\n      productCategory: json[i].productCategory\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM product WHERE productId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into product Values='@values'\");\n  qry.map(\"@values\", data);\n  console.log(\"before product\");\n  return idbCon.runSql(qry);\n}\nexport function syncProductCategory(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].productCategoryId).concat(\",\");\n    data[i] = {\n      productCategoryId: json[i].productCategoryId,\n      active: json[i].active.toString(),\n      label: json[i].label\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM productCategory WHERE productCategoryId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into productCategory Values='@values'\");\n  qry.map(\"@values\", data);\n  console.log(\"before pc\");\n  return idbCon.runSql(qry);\n}\nexport function syncRegion(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].regionId).concat(\",\");\n    data[i] = {\n      regionId: json[i].regionId,\n      active: json[i].active.toString(),\n      label: json[i].label,\n      realmId: json[i].realmId,\n      capacityCbm: json[i].capacityCbm\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM region WHERE regionId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into region Values='@values'\");\n  qry.map(\"@values\", data);\n  console.log(\"before region\");\n  return idbCon.runSql(qry);\n}\nexport function syncShipmentStatus(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].shipmentStatusId).concat(\",\");\n    data[i] = {\n      shipmentStatusId: json[i].shipmentStatusId,\n      active: json[i].active.toString(),\n      label: json[i].label\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM shipmentStatus WHERE shipmentStatusId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into shipmentStatus Values='@values'\");\n  qry.map(\"@values\", data);\n  console.log(\"before ss\");\n  return idbCon.runSql(qry);\n}\nexport function syncShipmentStatusAllowed(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].shipmentStatusAllowedId).concat(\",\");\n    data[i] = {\n      nextShipmentStatusId: json[i].nextShipmentStatusId,\n      shipmentStatusAllowedId: json[i].shipmentStatusAllowedId,\n      shipmentStatusId: json[i].shipmentStatusId\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM shipmentStatusAllowed WHERE shipmentStatusAllowedId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into shipmentStatusAllowed Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncUnit(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].unitId).concat(\",\");\n    data[i] = {\n      unitId: json[i].unitId,\n      active: json[i].active.toString(),\n      label: json[i].label,\n      unitCode: json[i].unitCode,\n      unitType: json[i].unitType\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM unit WHERE unitId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into unit Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncUnitType(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].unitTypeId).concat(\",\");\n    data[i] = {\n      unitTypeId: json[i].unitTypeId,\n      label: json[i].label\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM unitType WHERE unitTypeId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into unitType Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncSubFundingSource(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].subFundingSourceId).concat(\",\");\n    data[i] = {\n      subFundingSourceId: json[i].subFundingSourceId,\n      label: json[i].label,\n      active: json[i].active.toString(),\n      fundingSource: json[i].fundingSource,\n      realmId: json[i].realmId\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM subFundingSource WHERE subFundingSourceId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into subFundingSource Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncCountry(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].countryId).concat(\",\");\n    data[i] = {\n      countryId: json[i].countryId,\n      label: json[i].label,\n      active: json[i].active.toString(),\n      currency: json[i].currency,\n      language: json[i].language\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM country WHERE countryId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into country Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function syncLanguage(json) {\n  var data = [];\n  var deleteInStr = \"\";\n\n  for (var i = 0; i < json.length; i++) {\n    deleteInStr = deleteInStr.concat(json[i].languageId).concat(\",\");\n    data[i] = {\n      languageId: json[i].languageId,\n      languageName: json[i].languageName,\n      active: json[i].active.toString()\n    };\n  }\n\n  if (json.length > 0) {\n    var deleteInStr = deleteInStr.substring(0, deleteInStr.length - 1).toString();\n    var qry1 = new SqlWeb.Query(\"DELETE FROM language WHERE languageId IN (\".concat(deleteInStr, \")\"));\n    idbCon.runSql(qry1);\n  }\n\n  var qry = new SqlWeb.Query(\"insert into language Values='@values'\");\n  qry.map(\"@values\", data);\n  return idbCon.runSql(qry);\n}\nexport function updateLastSyncDate(lastSyncDate, realmId) {\n  var qry = new SqlWeb.Query(\"DELETE FROM lastSyncDate WHERE id IN (0,\".concat(realmId, \")\"));\n  idbCon.runSql(qry);\n  var data = [];\n  data[0] = {\n    id: 0,\n    lastSyncDate: lastSyncDate\n  };\n  data[1] = {\n    id: realmId,\n    lastSyncDate: lastSyncDate\n  };\n  var qry1 = new SqlWeb.Query(\"insert into lastSyncDate Values='@values'\");\n  qry1.map(\"@values\", data);\n  return idbCon.runSql(qry1);\n}\nexport function getProductCategoryList() {\n  var qry = new Query(\"select * from productCategory where active='true'\"); // console.log\n\n  var result = idbCon.runSql(qry);\n  console.log(\"Result=======\", result);\n  return result;\n}\nexport function getProductListByProductCategory(categoryId) {\n  var qry = new Query(\"select * from product where active='true'\");\n  console.log(qry);\n  var result = idbCon.runSql(qry);\n  console.log(\"Result=======\", result);\n  return result;\n}","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/CommonComponent/JsStoreFunctions.js"],"names":["JsStore","IDataBase","DATA_TYPE","ITable","SqlWeb","Query","CryptoJS","SECRET_KEY","useSqlWeb","idbCon","Instance","dbname","getDatabase","tblStudent","name","columns","id","primaryKey","programId","notNull","dataType","Number","version","programName","String","programData","userId","dataBase","tables","getDbQuery","db","tblStudentQry","lastSyncDate","currency","dataSource","dataSourceType","fundingSource","healthArea","lu","manufacturer","organisation","planningUnit","product","productCategory","region","shipmentStatus","shipmentStatusAllowed","unit","unitType","subFundingSource","country","language","dbCreatequery","initJsStore","qry","runSql","then","catch","ex","console","error","saveProgram","programJson","curUser","i","length","encryptedText","AES","encrypt","JSON","stringify","label","map","programVersion","toString","getProgramDataByprogramIds","programIds","getProgramDataList","log","result","importProgram","getLastSyncDateForApplicationMaster","syncCurrency","json","data","deleteInStr","concat","currencyId","conversionRateToUsd","currencyCode","currencySymbol","substring","qry1","syncDataSource","dataSourceId","active","syncDataSourceType","dataSourceTypeId","getLastSyncDateForRealm","realmId","syncFundingSource","fundingSourceId","syncHealthArea","healthAreaId","syncLogisticsUnit","logisticsUnitId","heightQty","heightUnit","lengthQty","lengthUnit","qtyInEuroOne","qtyInEuro1","qtyInEuroTwo","qtyInEuro2","qtyOfPlanningUnits","weightQty","weightUnit","widthQty","widthUnit","syncManufacturer","manufacturerId","syncOrganisation","organisationId","syncPlanningUnit","planningUnitId","productId","price","qtyOfForecastingUnits","syncProduct","forecastUnit","genericLabel","syncProductCategory","productCategoryId","syncRegion","regionId","capacityCbm","syncShipmentStatus","shipmentStatusId","syncShipmentStatusAllowed","shipmentStatusAllowedId","nextShipmentStatusId","syncUnit","unitId","unitCode","syncUnitType","unitTypeId","syncSubFundingSource","subFundingSourceId","syncCountry","countryId","syncLanguage","languageId","languageName","updateLastSyncDate","getProductCategoryList","getProductListByProductCategory","categoryId"],"mappings":"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","sourcesContent":["import * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport * as SqlWeb from \"sqlweb\";\nimport {\n    Query\n} from \"sqlweb\";\nimport CryptoJS from 'crypto-js'\nimport { SECRET_KEY } from '../Constants.js'\n// This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\nJsStore.useSqlWeb(SqlWeb);\nexport const idbCon = new JsStore.Instance();\nexport const dbname = 'fasp';\n\nconst getDatabase = () => {\n    const tblStudent = {\n        name: 'programData',\n        columns: {\n            id: {\n                primaryKey: true\n            },\n            programId: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            },\n            version: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            },\n            programName: {\n                notNull: true,\n                dataType: DATA_TYPE.String\n            },\n            programData: {\n                dataType: DATA_TYPE.String,\n                notNull: true\n            },\n            userId: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            }\n        }\n    };\n    const dataBase = {\n        name: dbname,\n        tables: [tblStudent]\n    };\n    return dataBase;\n};\n\nexport const getDbQuery = () => {\n    const db = `DEFINE DB fasp;`;\n    const tblStudentQry = `DEFINE TABLE programData(\n        id PRIMARYKEY,\n        programId NUMBER NOTNULL ,\n        version NOTNULL NUMBER,\n        programName NOTNULL STRING,\n        programData STRING NOTNULL,\n        userId NUMBER NOTNULL\n    );`\n    const lastSyncDate = `DEFINE TABLE lastSyncDate(\n        id PRIMARYKEY,\n        lastSyncDate STRING\n    );`\n    const currency = `DEFINE TABLE currency (\n    currencyId PRIMARYKEY,\n    conversionRateToUsd number,\n    currencyCode STRING,\n    currencySymbol STRING,\n    label object\n     );`\n    const dataSource = `DEFINE TABLE dataSource (\n        dataSourceId PRIMARYKEY,\n        active STRING,\n        dataSourceType object,\n        label object\n         );`\n    const dataSourceType = `DEFINE TABLE dataSourceType (\n            dataSourceTypeId PRIMARYKEY,\n            active STRING,\n            label object\n             );`\n\n    const fundingSource = `DEFINE TABLE fundingSource (\n                fundingSourceId PRIMARYKEY,\n                active STRING,\n                label object,\n                realmId number\n                 );`\n\n    const healthArea = `DEFINE TABLE healthArea (\n                    healthAreaId PRIMARYKEY,\n                    active STRING,\n                    label object,\n                    realmId number\n                     );`\n\n    const lu = `DEFINE TABLE logisticsUnit (\n        logisticsUnitId PRIMARYKEY,\n        active STRING,\n        heightQty number,\n        heightUnit object,\n        lengthQty number,\n        lengthUnit object,\n        manufacturer object,\n        planningUnit object,\n        qtyInEuroOne number,\n        qtyInEuroTwo number,\n        qtyOfPlanningUnits number,\n        unit object,\n        weightQty number,\n        weightUnit object,\n        widthQty number,\n        widthUnit object,\n        label object,\n        realmId number\n         );`\n\n    const manufacturer = `DEFINE TABLE manufacturer (\n        manufacturerId PRIMARYKEY,\n        active STRING,\n        label object,\n        realmId number\n         );`\n\n    const organisation = `DEFINE TABLE organisation (\n        organisationId PRIMARYKEY,\n        active STRING,\n        label object,\n        realmId number\n         );`\n\n    const planningUnit = `DEFINE TABLE planningUnit (\n        planningUnitId PRIMARYKEY,\n        active STRING,\n        label object,\n        realmId number,\n        price number,\n        productId number,\n        qtyOfForecastingUnits number,\n        unit object\n         );`\n\n    const product = `DEFINE TABLE product (\n        productId PRIMARYKEY,\n        active STRING,\n        label object,\n        realmId number,\n        forecastUnit object,\n        genericLabel object,\n        productCategory object\n         );`\n\n    const productCategory = `DEFINE TABLE productCategory (\n        productCategoryId PRIMARYKEY,\n        active STRING,\n        label object\n         );`\n\n    const region = `DEFINE TABLE region (\n        regionId PRIMARYKEY,\n        active STRING,\n        label object,\n        realmId number,\n        capacityCbm number\n         );`\n\n    const shipmentStatus = `DEFINE TABLE shipmentStatus (\n        shipmentStatusId PRIMARYKEY,\n        active STRING,\n        label object\n         );`\n\n    const shipmentStatusAllowed = `DEFINE TABLE shipmentStatusAllowed (\n        shipmentStatusAllowedId PRIMARYKEY,\n        nextShipmentStatusId number,\n        shipmentStatusId number\n         );`\n\n    const unit = `DEFINE TABLE unit (\n        unitId PRIMARYKEY,\n        active STRING,\n        label object,\n        unitCode string,\n        unitType object\n         );`\n\n    const unitType = `DEFINE TABLE unitType (\n        unitTypeId PRIMARYKEY,\n        label object\n         );`\n\n    const subFundingSource = `DEFINE TABLE subFundingSource (\n        subFundingSourceId PRIMARYKEY,\n        label object,\n        active STRING,\n        fundingSource object,\n        realmId number\n         );`\n\n    const country = `DEFINE TABLE country (\n        countryId PRIMARYKEY,\n        label object,\n        active STRING,\n        currency object,\n        language object\n         );`\n\n    const language = `DEFINE TABLE language (\n        languageId PRIMARYKEY,\n        active STRING,\n        languageName string\n         );`\n\n    const dbCreatequery = db + tblStudentQry + lastSyncDate + currency + dataSource +\n        dataSourceType + fundingSource + healthArea\n        + lu\n        + manufacturer + organisation + planningUnit\n        + product\n        + productCategory\n        + region\n        + shipmentStatus + shipmentStatusAllowed\n        + unit\n        + unitType\n        + subFundingSource + country + language;\n    return dbCreatequery;\n}\n\nexport const initJsStore = () => {\n    const qry = getDbQuery();\n    idbCon.runSql(qry).then(function () {\n    }).catch(function (ex) {\n        console.error(ex);\n    })\n};\n\nexport function saveProgram(programJson) {\n    var curUser = 1;\n    for (var i = 0; i < programJson.length; i++) {\n        var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(programJson[i]), SECRET_KEY);\n        var programName = CryptoJS.AES.encrypt(JSON.stringify(programJson[i].label), SECRET_KEY);\n        const qry = new Query(`insert into programData \n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n    `);\n        qry.map(\"@id\", programJson[i].programId + \"_v\" + programJson[i].programVersion + \"_uId_\" + curUser);\n        qry.map(\"@programId\", programJson[i].programId);\n        qry.map(\"@version\", programJson[i].programVersion);\n        qry.map(\"@programName\", programName.toString());\n        qry.map(\"@programData\", encryptedText.toString());\n        qry.map(\"@userId\", curUser);\n        idbCon.runSql(qry);\n    }\n    return 1;\n}\n\nexport function getProgramDataByprogramIds(programIds) {\n    const qry = new Query(`select * from programData where id In (${programIds})`);\n    return idbCon.runSql(qry);\n}\n\nexport function getProgramDataList() {\n    console.log(\"in jsstore function program\")\n    var curUser = 1;\n    const qry = new Query(`select * from programData where userId=${curUser}`);\n    console.log(\"after query build\");\n    var result= idbCon.runSql(qry);\n    console.log(\"result\",result);\n    return result;\n}\n\nexport function importProgram(programJson) {\n    var curUser = 1;\n    const qry = new Query(`insert into programData \n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n    `);\n    qry.map(\"@id\", programJson.programId + \"_v\" + programJson.version + \"_uId_\" + curUser);\n    qry.map(\"@programId\", programJson.programId);\n    qry.map(\"@version\", programJson.version);\n    qry.map(\"@programName\", programJson.programName);\n    qry.map(\"@programData\", programJson.programData);\n    qry.map(\"@userId\", curUser);\n    idbCon.runSql(qry);\n    return 1;\n}\n\nexport function getLastSyncDateForApplicationMaster() {\n    const qry = new Query(`select * from lastSyncDate where id=0`);\n    return idbCon.runSql(qry);\n}\n\nexport function syncCurrency(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].currencyId).concat(\",\");\n        data[i] = {\n            currencyId: json[i].currencyId,\n            conversionRateToUsd: json[i].conversionRateToUsd,\n            label: json[i].label,\n            currencyCode: json[i].currencyCode,\n            currencySymbol: json[i].currencySymbol\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM currency WHERE currencyId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into currency Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\nexport function syncDataSource(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].dataSourceId).concat(\",\");\n        data[i] = {\n            dataSourceId: json[i].dataSourceId,\n            active: (json[i].active).toString(),\n            label: json[i].label,\n            dataSourceType: json[i].dataSourceType\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM dataSource WHERE dataSourceId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into dataSource Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\n\nexport function syncDataSourceType(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].dataSourceTypeId).concat(\",\");\n        data[i] = {\n            dataSourceTypeId: json[i].dataSourceTypeId,\n            active: (json[i].active).toString(),\n            label: json[i].label\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM dataSourceType WHERE dataSourceTypeId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into dataSourceType Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\n\nexport function getLastSyncDateForRealm(realmId) {\n    const qry = new Query(`select * from lastSyncDate where id=${realmId}`);\n    return idbCon.runSql(qry);\n}\n\nexport function syncFundingSource(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].fundingSourceId).concat(\",\");\n        data[i] = {\n            fundingSourceId: json[i].fundingSourceId,\n            active: (json[i].active).toString(),\n            label: json[i].label,\n            realmId: json[i].realmId\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM fundingSource WHERE fundingSourceId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into fundingSource Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\nexport function syncHealthArea(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].healthAreaId).concat(\",\");\n        data[i] = {\n            healthAreaId: json[i].healthAreaId,\n            active: (json[i].active).toString(),\n            label: json[i].label,\n            realmId: json[i].realmId\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM healthArea WHERE healthAreaId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into healthArea Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\nexport function syncLogisticsUnit(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].logisticsUnitId).concat(\",\");\n        data[i] = {\n            logisticsUnitId: json[i].logisticsUnitId,\n            active: (json[i].active).toString(),\n            heightQty: json[i].heightQty,\n            heightUnit: json[i].heightUnit,\n            lengthQty: json[i].lengthQty,\n            lengthUnit: json[i].lengthUnit,\n            manufacturer: json[i].manufacturer,\n            planningUnit: json[i].planningUnit,\n            qtyInEuroOne: json[i].qtyInEuro1,\n            qtyInEuroTwo: json[i].qtyInEuro2,\n            qtyOfPlanningUnits: json[i].qtyOfPlanningUnits,\n            unit: json[i].unit,\n            weightQty: json[i].weightQty,\n            weightUnit: json[i].weightUnit,\n            widthQty: json[i].widthQty,\n            widthUnit: json[i].widthUnit,\n            label: json[i].label,\n            realmId: json[i].realmId\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM logisticsUnit WHERE logisticsUnitId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into logisticsUnit Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\nexport function syncManufacturer(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].manufacturerId).concat(\",\");\n        data[i] = {\n            manufacturerId: json[i].manufacturerId,\n            active: (json[i].active).toString(),\n            label: json[i].label,\n            realmId: json[i].realmId\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM manufacturer WHERE manufacturerId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into manufacturer Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\nexport function syncOrganisation(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].organisationId).concat(\",\");\n        data[i] = {\n            organisationId: json[i].organisationId,\n            active: (json[i].active).toString(),\n            label: json[i].label,\n            realmId: json[i].realmId\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        console.log(\"delete in str org\", deleteInStr);\n        var qry1 = new SqlWeb.Query(`DELETE FROM organisation WHERE organisationId IN (${deleteInStr})`)\n        console.log(\"qry1\", qry1);\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into organisation Values='@values'\");\n    console.log(\"Organisation qry\", qry)\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\nexport function syncPlanningUnit(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].planningUnitId).concat(\",\");\n        data[i] = {\n            planningUnitId: json[i].planningUnitId,\n            active: (json[i].active).toString(),\n            label: json[i].label,\n            realmId: json[i].realmId,\n            productId: json[i].productId,\n            price: json[i].price,\n            qtyOfForecastingUnits: json[i].qtyOfForecastingUnits,\n            unit: json[i].unit\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM planningUnit WHERE planningUnitId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into planningUnit Values='@values'\");\n    qry.map(\"@values\", data);\n    console.log(\"before planning unit\")\n    var result = idbCon.runSql(qry);\n    console.log(\"result\", result);\n    return result;\n}\n\nexport function syncProduct(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].productId).concat(\",\");\n        data[i] = {\n            productId: json[i].productId,\n            active: (json[i].active).toString(),\n            label: json[i].label,\n            realmId: json[i].realmId,\n            forecastUnit: json[i].forecastUnit,\n            genericLabel: json[i].genericLabel,\n            productCategory: json[i].productCategory\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM product WHERE productId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into product Values='@values'\");\n    qry.map(\"@values\", data);\n    console.log(\"before product\")\n    return idbCon.runSql(qry);\n}\n\n\nexport function syncProductCategory(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].productCategoryId).concat(\",\");\n        data[i] = {\n            productCategoryId: json[i].productCategoryId,\n            active: (json[i].active).toString(),\n            label: json[i].label\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM productCategory WHERE productCategoryId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into productCategory Values='@values'\");\n    qry.map(\"@values\", data);\n    console.log(\"before pc\")\n    return idbCon.runSql(qry);\n}\n\n\nexport function syncRegion(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].regionId).concat(\",\");\n        data[i] = {\n            regionId: json[i].regionId,\n            active: (json[i].active).toString(),\n            label: json[i].label,\n            realmId: json[i].realmId,\n            capacityCbm: json[i].capacityCbm\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM region WHERE regionId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into region Values='@values'\");\n    qry.map(\"@values\", data);\n    console.log(\"before region\")\n    return idbCon.runSql(qry);\n}\n\nexport function syncShipmentStatus(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].shipmentStatusId).concat(\",\");\n        data[i] = {\n            shipmentStatusId: json[i].shipmentStatusId,\n            active: (json[i].active).toString(),\n            label: json[i].label\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM shipmentStatus WHERE shipmentStatusId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into shipmentStatus Values='@values'\");\n    qry.map(\"@values\", data);\n    console.log(\"before ss\")\n    return idbCon.runSql(qry);\n}\n\nexport function syncShipmentStatusAllowed(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].shipmentStatusAllowedId).concat(\",\");\n        data[i] = {\n            nextShipmentStatusId: json[i].nextShipmentStatusId,\n            shipmentStatusAllowedId: json[i].shipmentStatusAllowedId,\n            shipmentStatusId: json[i].shipmentStatusId\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM shipmentStatusAllowed WHERE shipmentStatusAllowedId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into shipmentStatusAllowed Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\nexport function syncUnit(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].unitId).concat(\",\");\n        data[i] = {\n            unitId: json[i].unitId,\n            active: (json[i].active).toString(),\n            label: json[i].label,\n            unitCode: json[i].unitCode,\n            unitType: json[i].unitType\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM unit WHERE unitId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into unit Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\n\nexport function syncUnitType(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].unitTypeId).concat(\",\");\n        data[i] = {\n            unitTypeId: json[i].unitTypeId,\n            label: json[i].label\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM unitType WHERE unitTypeId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into unitType Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\n\nexport function syncSubFundingSource(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].subFundingSourceId).concat(\",\");\n        data[i] = {\n            subFundingSourceId: json[i].subFundingSourceId,\n            label: json[i].label,\n            active: (json[i].active).toString(),\n            fundingSource: json[i].fundingSource,\n            realmId: json[i].realmId\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM subFundingSource WHERE subFundingSourceId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into subFundingSource Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\nexport function syncCountry(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].countryId).concat(\",\");\n        data[i] = {\n            countryId: json[i].countryId,\n            label: json[i].label,\n            active: (json[i].active).toString(),\n            currency: json[i].currency,\n            language: json[i].language\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM country WHERE countryId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into country Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\nexport function syncLanguage(json) {\n    var data = []\n    var deleteInStr = \"\";\n    for (var i = 0; i < json.length; i++) {\n        deleteInStr = deleteInStr.concat(json[i].languageId).concat(\",\");\n        data[i] = {\n            languageId: json[i].languageId,\n            languageName: json[i].languageName,\n            active: (json[i].active).toString()\n        }\n    }\n    if (json.length > 0) {\n        var deleteInStr = (deleteInStr.substring(0, deleteInStr.length - 1)).toString();\n        var qry1 = new SqlWeb.Query(`DELETE FROM language WHERE languageId IN (${deleteInStr})`)\n        idbCon.runSql(qry1);\n    }\n    var qry = new SqlWeb.Query(\"insert into language Values='@values'\");\n    qry.map(\"@values\", data);\n    return idbCon.runSql(qry);\n}\n\nexport function updateLastSyncDate(lastSyncDate, realmId) {\n    var qry = new SqlWeb.Query(`DELETE FROM lastSyncDate WHERE id IN (0,${realmId})`);\n    idbCon.runSql(qry);\n    var data = []\n    data[0] = {\n        id: 0,\n        lastSyncDate: lastSyncDate\n    }\n    data[1] = {\n        id: realmId,\n        lastSyncDate: lastSyncDate\n    }\n    var qry1 = new SqlWeb.Query(\"insert into lastSyncDate Values='@values'\");\n    qry1.map(\"@values\", data);\n    return idbCon.runSql(qry1);\n}\n\nexport function getProductCategoryList() {\n    const qry = new Query(`select * from productCategory where active='true'`);\n    // console.log\n    var result = idbCon.runSql(qry);\n    console.log(\"Result=======\", result);\n    return result;\n}\n\nexport function getProductListByProductCategory(categoryId) {\n    const qry = new Query(`select * from product where active='true'`);\n    console.log(qry)\n    var result = idbCon.runSql(qry);\n    console.log(\"Result=======\", result);\n    return result;\n}"]},"metadata":{},"sourceType":"module"}