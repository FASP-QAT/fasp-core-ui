{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/Pages/Login/ResetPasswordComponent.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../../Forms/ValidationForms/ValidationForms.css';\nimport CryptoJS from 'crypto-js';\nimport AuthenticationService from '../../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport bcrypt from 'bcryptjs';\nimport jwt_decode from 'jwt-decode';\nimport { SECRET_KEY } from '../../../Constants.js';\nimport UserService from '../../../api/UserService';\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    newPassword: Yup.string().min(6, \"Password has to be at least 6 characters\").matches(/^(?!.*password).*$/, 'Password should not contain password string').matches(/[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/, 'Password must contain atleast 1 special character').matches(/^(?=.*\\d).*$/, 'Password must contain atleast 1 number').matches(/^(?=.*[A-Z]).*$/, 'Password must contain atleast 1 uppercase alphabet').matches(/^[a-zA-Z]/i, 'Password must start with alphabet').test('username', \"New password should not be same as username \", function (value) {\n      console.log(\"values---\", values.username);\n\n      if (values.username != value) {\n        return true;\n      }\n    }).required('Please enter new password'),\n    confirmNewPassword: Yup.string().oneOf([values.newPassword], 'Passwords must match').required('Please confirm new password')\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar ResetPasswordComponent = /*#__PURE__*/function (_Component) {\n  _inherits(ResetPasswordComponent, _Component);\n\n  function ResetPasswordComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ResetPasswordComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResetPasswordComponent).call(this, props));\n    _this.state = {\n      message: '',\n      username: _this.props.match.params.username,\n      token: _this.props.match.params.token\n    };\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ResetPasswordComponent, [{\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/dashboard/Action Canceled\");\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        newPassword: true,\n        confirmNewPassword: true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('updatePasswordForm', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      UserService.confirmForgotPasswordToken(this.state.username, this.state.token).then(function (response) {\n        console.log(\"response---\", response);\n\n        _this2.setState({\n          message: response.data.messageCode\n        });\n      }).catch(function (error) {\n        console.log(\"error---\", error);\n\n        if (error.message === \"Network Error\") {\n          _this2.setState({\n            message: error.message\n          });\n        } else {\n          switch (error.response.status) {\n            case 500:\n            case 401:\n            case 404:\n            case 406:\n            case 412:\n              _this2.setState({\n                message: error.response.data.messageCode\n              });\n\n              break;\n\n            default:\n              _this2.setState({\n                message: 'static.unkownError'\n              });\n\n              console.log(\"Error code unkown\");\n              break;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, this.state.message), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Reset Password\"), ' '), React.createElement(Formik, {\n        initialValues: {\n          newPassword: \"\",\n          confirmNewPassword: \"\",\n          username: this.state.username\n        },\n        validate: validate(validationSchema),\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting,\n              setErrors = _ref.setErrors;\n\n          if (navigator.onLine) {\n            UserService.updatePassword(_this3.state.username, _this3.state.token, values.newPassword).then(function (response) {\n              console.log(\"response---\", response);\n\n              _this3.props.history.push(\"/login\");\n            }).catch(function (error) {\n              console.log(\"error---\", error);\n\n              if (error.message === \"Network Error\") {\n                _this3.setState({\n                  message: error.message\n                });\n              } else {\n                switch (error.response.status) {\n                  case 500:\n                  case 401:\n                  case 404:\n                  case 406:\n                  case 412:\n                    _this3.setState({\n                      message: error.response.data.messageCode\n                    });\n\n                    break;\n\n                  default:\n                    _this3.setState({\n                      message: 'static.unkownError'\n                    });\n\n                    console.log(\"Error code unkown\");\n                    break;\n                }\n              }\n            });\n          } else {\n            _this3.setState({\n              message: \"You must be online to update the password.\"\n            });\n          }\n        },\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"updatePasswordForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 194\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 195\n            },\n            __self: this\n          }, React.createElement(Input, {\n            type: \"text\",\n            name: \"username\",\n            id: \"username\",\n            onChange: handleChange,\n            value: _this3.state.username,\n            hidden: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 196\n            },\n            __self: this\n          }), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 203\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"newPassword\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204\n            },\n            __self: this\n          }, \"New Password\"), React.createElement(Input, {\n            type: \"password\",\n            name: \"newPassword\",\n            id: \"newPassword\",\n            bsSize: \"sm\",\n            valid: !errors.newPassword,\n            invalid: touched.newPassword && !!errors.newPassword,\n            onChange: handleChange,\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 215\n            },\n            __self: this\n          }, errors.newPassword)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 217\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"confirmNewPassword\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 218\n            },\n            __self: this\n          }, \"Confirm New Password\"), React.createElement(Input, {\n            type: \"password\",\n            name: \"confirmNewPassword\",\n            id: \"confirmNewPassword\",\n            bsSize: \"sm\",\n            valid: !errors.confirmNewPassword,\n            invalid: touched.confirmNewPassword && !!errors.confirmNewPassword,\n            onChange: handleChange,\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 219\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 229\n            },\n            __self: this\n          }, errors.confirmNewPassword))), React.createElement(CardFooter, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 232\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"button\",\n            size: \"sm\",\n            color: \"danger\",\n            className: \"float-right mr-1\",\n            onClick: _this3.cancelClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 234\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-times\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 234\n            },\n            __self: this\n          }), \" Cancel\"), React.createElement(Button, {\n            type: \"submit\",\n            size: \"sm\",\n            color: \"success\",\n            className: \"float-right mr-1\",\n            onClick: function onClick() {\n              return _this3.touchAll(setTouched, errors);\n            },\n            disabled: !isValid,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 235\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-check\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 235\n            },\n            __self: this\n          }), \"Submit\"), \"\\xA0\")));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return ResetPasswordComponent;\n}(Component);\n\nexport default ResetPasswordComponent;","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/Pages/Login/ResetPasswordComponent.js"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","Formik","Yup","CryptoJS","AuthenticationService","Online","bcrypt","jwt_decode","SECRET_KEY","UserService","validationSchema","values","object","shape","newPassword","string","min","matches","test","value","console","log","username","required","confirmNewPassword","oneOf","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","ResetPasswordComponent","props","state","message","match","params","token","cancelClicked","bind","history","push","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","name","focus","confirmForgotPasswordToken","then","response","setState","data","messageCode","catch","status","flexBasis","setSubmitting","setErrors","navigator","onLine","updatePassword","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","touchAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../../Forms/ValidationForms/ValidationForms.css'\n\nimport CryptoJS from 'crypto-js'\nimport AuthenticationService from '../../common/AuthenticationService.js';\nimport { Online } from \"react-detect-offline\";\nimport bcrypt from 'bcryptjs';\nimport jwt_decode from 'jwt-decode'\nimport { SECRET_KEY } from '../../../Constants.js'\nimport UserService from '../../../api/UserService'\n\n\n\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        newPassword: Yup.string()\n            .min(6, `Password has to be at least 6 characters`)\n            .matches(/^(?!.*password).*$/, 'Password should not contain password string')\n            .matches(/[ `!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/, 'Password must contain atleast 1 special character')\n            .matches(/^(?=.*\\d).*$/, 'Password must contain atleast 1 number')\n            .matches(/^(?=.*[A-Z]).*$/, 'Password must contain atleast 1 uppercase alphabet')\n            .matches(/^[a-zA-Z]/i, 'Password must start with alphabet')\n            .test('username', \"New password should not be same as username \",\n                function (value) {\n                    console.log(\"values---\", values.username);\n                    if ((values.username != value)) {\n                        return true;\n                    }\n                })\n            .required('Please enter new password'),\n        confirmNewPassword: Yup.string()\n            .oneOf([values.newPassword], 'Passwords must match')\n            .required('Please confirm new password')\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\nclass ResetPasswordComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            message: '',\n            username: this.props.match.params.username,\n            token: this.props.match.params.token\n        }\n        this.cancelClicked = this.cancelClicked.bind(this);\n    }\n\n    cancelClicked() {\n        this.props.history.push(`/dashboard/Action Canceled`)\n    }\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            newPassword: true,\n            confirmNewPassword: true\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('updatePasswordForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n    componentDidMount() {\n        UserService.confirmForgotPasswordToken(this.state.username, this.state.token)\n            .then(response => {\n                console.log(\"response---\", response);\n                this.setState({\n                    message: response.data.messageCode\n                })\n            }).catch(\n                error => {\n                    console.log(\"error---\", error)\n                    if (error.message === \"Network Error\") {\n                        this.setState({ message: error.message });\n                    } else {\n                        switch (error.response.status) {\n                            case 500:\n                            case 401:\n                            case 404:\n                            case 406:\n                            case 412:\n                                this.setState({ message: error.response.data.messageCode });\n                                break;\n                            default:\n                                this.setState({ message: 'static.unkownError' });\n                                console.log(\"Error code unkown\");\n                                break;\n                        }\n                    }\n                }\n            );\n\n    }\n    render() {\n        return (\n            <div className=\"animated fadeIn\">\n                <h5>{this.state.message}</h5>\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>Reset Password</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                initialValues={{\n                                    newPassword: \"\",\n                                    confirmNewPassword: \"\",\n                                    username: this.state.username\n                                }}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {\n                                    if (navigator.onLine) {\n                                        UserService.updatePassword(this.state.username, this.state.token, values.newPassword)\n                                            .then(response => {\n                                                console.log(\"response---\", response);\n                                                this.props.history.push(`/login`)\n                                            })\n                                            .catch(\n                                                error => {\n                                                    console.log(\"error---\", error)\n                                                    if (error.message === \"Network Error\") {\n                                                        this.setState({ message: error.message });\n                                                    } else {\n                                                        switch (error.response.status) {\n                                                            case 500:\n                                                            case 401:\n                                                            case 404:\n                                                            case 406:\n                                                            case 412:\n                                                                this.setState({ message: error.response.data.messageCode });\n                                                                break;\n                                                            default:\n                                                                this.setState({ message: 'static.unkownError' });\n                                                                console.log(\"Error code unkown\");\n                                                                break;\n                                                        }\n                                                    }\n                                                }\n                                            );\n\n                                    } else {\n                                        this.setState({\n                                            message: \"You must be online to update the password.\"\n                                        });\n                                    }\n                                }}\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='updatePasswordForm'>\n                                                <CardBody>\n                                                    <Input type=\"text\"\n                                                        name=\"username\"\n                                                        id=\"username\"\n                                                        onChange={handleChange}\n                                                        value={this.state.username}\n                                                        hidden\n                                                    />\n                                                    <FormGroup>\n                                                        <Label for=\"newPassword\">New Password</Label>\n                                                        <Input type=\"password\"\n                                                            name=\"newPassword\"\n                                                            id=\"newPassword\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.newPassword}\n                                                            invalid={touched.newPassword && !!errors.newPassword}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                        />\n                                                        <FormFeedback>{errors.newPassword}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"confirmNewPassword\">Confirm New Password</Label>\n                                                        <Input type=\"password\"\n                                                            name=\"confirmNewPassword\"\n                                                            id=\"confirmNewPassword\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.confirmNewPassword}\n                                                            invalid={touched.confirmNewPassword && !!errors.confirmNewPassword}\n                                                            onChange={handleChange}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                        />\n                                                        <FormFeedback>{errors.confirmNewPassword}</FormFeedback>\n                                                    </FormGroup>\n                                                </CardBody>\n                                                <CardFooter>\n                                                    <FormGroup>\n                                                        <Button type=\"button\" size=\"sm\" color=\"danger\" className=\"float-right mr-1\" onClick={this.cancelClicked}><i className=\"fa fa-times\"></i> Cancel</Button>\n                                                        <Button type=\"submit\" size=\"sm\" color=\"success\" className=\"float-right mr-1\" onClick={() => this.touchAll(setTouched, errors)} disabled={!isValid}><i className=\"fa fa-check\"></i>Submit</Button>\n                                                        &nbsp;\n                          </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n                                        )} />\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default ResetPasswordComponent;\n"]},"metadata":{},"sourceType":"module"}