{"ast":null,"code":"'use strict';\n\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar speciesConstructor = require('../internals/species-constructor');\n\nvar fails = require('../internals/fails');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar $slice = [].slice;\nvar FORCED = fails(function () {\n  // eslint-disable-next-line no-undef\n  new Int8Array(1).slice();\n}); // `%TypedArray%.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice\n\nexportTypedArrayMethod('slice', function slice(start, end) {\n  var list = $slice.call(aTypedArray(this), start, end);\n  var C = speciesConstructor(this, this.constructor);\n  var index = 0;\n  var length = list.length;\n  var result = new (aTypedArrayConstructor(C))(length);\n\n  while (length > index) {\n    result[index] = list[index++];\n  }\n\n  return result;\n}, FORCED);","map":{"version":3,"sources":["/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/core-js/modules/es.typed-array.slice.js"],"names":["ArrayBufferViewCore","require","speciesConstructor","fails","aTypedArray","aTypedArrayConstructor","exportTypedArrayMethod","$slice","slice","FORCED","Int8Array","start","end","list","call","C","constructor","index","length","result"],"mappings":"AAAA;;AACA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,qCAAD,CAAjC;;AACA,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,kCAAD,CAAhC;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,oBAAD,CAAnB;;AAEA,IAAIG,WAAW,GAAGJ,mBAAmB,CAACI,WAAtC;AACA,IAAIC,sBAAsB,GAAGL,mBAAmB,CAACK,sBAAjD;AACA,IAAIC,sBAAsB,GAAGN,mBAAmB,CAACM,sBAAjD;AACA,IAAIC,MAAM,GAAG,GAAGC,KAAhB;AAEA,IAAIC,MAAM,GAAGN,KAAK,CAAC,YAAY;AAC7B;AACA,MAAIO,SAAJ,CAAc,CAAd,EAAiBF,KAAjB;AACD,CAHiB,CAAlB,C,CAKA;AACA;;AACAF,sBAAsB,CAAC,OAAD,EAAU,SAASE,KAAT,CAAeG,KAAf,EAAsBC,GAAtB,EAA2B;AACzD,MAAIC,IAAI,GAAGN,MAAM,CAACO,IAAP,CAAYV,WAAW,CAAC,IAAD,CAAvB,EAA+BO,KAA/B,EAAsCC,GAAtC,CAAX;AACA,MAAIG,CAAC,GAAGb,kBAAkB,CAAC,IAAD,EAAO,KAAKc,WAAZ,CAA1B;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,MAAM,GAAGL,IAAI,CAACK,MAAlB;AACA,MAAIC,MAAM,GAAG,KAAKd,sBAAsB,CAACU,CAAD,CAA3B,EAAgCG,MAAhC,CAAb;;AACA,SAAOA,MAAM,GAAGD,KAAhB;AAAuBE,IAAAA,MAAM,CAACF,KAAD,CAAN,GAAgBJ,IAAI,CAACI,KAAK,EAAN,CAApB;AAAvB;;AACA,SAAOE,MAAP;AACD,CARqB,EAQnBV,MARmB,CAAtB","sourcesContent":["'use strict';\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar speciesConstructor = require('../internals/species-constructor');\nvar fails = require('../internals/fails');\n\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar $slice = [].slice;\n\nvar FORCED = fails(function () {\n  // eslint-disable-next-line no-undef\n  new Int8Array(1).slice();\n});\n\n// `%TypedArray%.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.slice\nexportTypedArrayMethod('slice', function slice(start, end) {\n  var list = $slice.call(aTypedArray(this), start, end);\n  var C = speciesConstructor(this, this.constructor);\n  var index = 0;\n  var length = list.length;\n  var result = new (aTypedArrayConstructor(C))(length);\n  while (length > index) result[index] = list[index++];\n  return result;\n}, FORCED);\n"]},"metadata":{},"sourceType":"script"}