{"ast":null,"code":"'use strict';\n\nvar utils = require('../utils');\n\nvar GenericWorker = require('./GenericWorker'); // the size of the generated chunks\n// TODO expose this as a public variable\n\n\nvar DEFAULT_BLOCK_SIZE = 16 * 1024;\n/**\n * A worker that reads a content and emits chunks.\n * @constructor\n * @param {Promise} dataP the promise of the data to split\n */\n\nfunction DataWorker(dataP) {\n  GenericWorker.call(this, \"DataWorker\");\n  var self = this;\n  this.dataIsReady = false;\n  this.index = 0;\n  this.max = 0;\n  this.data = null;\n  this.type = \"\";\n  this._tickScheduled = false;\n  dataP.then(function (data) {\n    self.dataIsReady = true;\n    self.data = data;\n    self.max = data && data.length || 0;\n    self.type = utils.getTypeOf(data);\n\n    if (!self.isPaused) {\n      self._tickAndRepeat();\n    }\n  }, function (e) {\n    self.error(e);\n  });\n}\n\nutils.inherits(DataWorker, GenericWorker);\n/**\n * @see GenericWorker.cleanUp\n */\n\nDataWorker.prototype.cleanUp = function () {\n  GenericWorker.prototype.cleanUp.call(this);\n  this.data = null;\n};\n/**\n * @see GenericWorker.resume\n */\n\n\nDataWorker.prototype.resume = function () {\n  if (!GenericWorker.prototype.resume.call(this)) {\n    return false;\n  }\n\n  if (!this._tickScheduled && this.dataIsReady) {\n    this._tickScheduled = true;\n    utils.delay(this._tickAndRepeat, [], this);\n  }\n\n  return true;\n};\n/**\n * Trigger a tick a schedule an other call to this function.\n */\n\n\nDataWorker.prototype._tickAndRepeat = function () {\n  this._tickScheduled = false;\n\n  if (this.isPaused || this.isFinished) {\n    return;\n  }\n\n  this._tick();\n\n  if (!this.isFinished) {\n    utils.delay(this._tickAndRepeat, [], this);\n    this._tickScheduled = true;\n  }\n};\n/**\n * Read and push a chunk.\n */\n\n\nDataWorker.prototype._tick = function () {\n  if (this.isPaused || this.isFinished) {\n    return false;\n  }\n\n  var size = DEFAULT_BLOCK_SIZE;\n  var data = null,\n      nextIndex = Math.min(this.max, this.index + size);\n\n  if (this.index >= this.max) {\n    // EOF\n    return this.end();\n  } else {\n    switch (this.type) {\n      case \"string\":\n        data = this.data.substring(this.index, nextIndex);\n        break;\n\n      case \"uint8array\":\n        data = this.data.subarray(this.index, nextIndex);\n        break;\n\n      case \"array\":\n      case \"nodebuffer\":\n        data = this.data.slice(this.index, nextIndex);\n        break;\n    }\n\n    this.index = nextIndex;\n    return this.push({\n      data: data,\n      meta: {\n        percent: this.max ? this.index / this.max * 100 : 0\n      }\n    });\n  }\n};\n\nmodule.exports = DataWorker;","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/node_modules/jszip/lib/stream/DataWorker.js"],"names":["utils","require","GenericWorker","DEFAULT_BLOCK_SIZE","DataWorker","dataP","call","self","dataIsReady","index","max","data","type","_tickScheduled","then","length","getTypeOf","isPaused","_tickAndRepeat","e","error","inherits","prototype","cleanUp","resume","delay","isFinished","_tick","size","nextIndex","Math","min","end","substring","subarray","slice","push","meta","percent","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar utils = require('../utils');\nvar GenericWorker = require('./GenericWorker');\n\n// the size of the generated chunks\n// TODO expose this as a public variable\nvar DEFAULT_BLOCK_SIZE = 16 * 1024;\n\n/**\n * A worker that reads a content and emits chunks.\n * @constructor\n * @param {Promise} dataP the promise of the data to split\n */\nfunction DataWorker(dataP) {\n    GenericWorker.call(this, \"DataWorker\");\n    var self = this;\n    this.dataIsReady = false;\n    this.index = 0;\n    this.max = 0;\n    this.data = null;\n    this.type = \"\";\n\n    this._tickScheduled = false;\n\n    dataP.then(function (data) {\n        self.dataIsReady = true;\n        self.data = data;\n        self.max = data && data.length || 0;\n        self.type = utils.getTypeOf(data);\n        if(!self.isPaused) {\n            self._tickAndRepeat();\n        }\n    }, function (e) {\n        self.error(e);\n    });\n}\n\nutils.inherits(DataWorker, GenericWorker);\n\n/**\n * @see GenericWorker.cleanUp\n */\nDataWorker.prototype.cleanUp = function () {\n    GenericWorker.prototype.cleanUp.call(this);\n    this.data = null;\n};\n\n/**\n * @see GenericWorker.resume\n */\nDataWorker.prototype.resume = function () {\n    if(!GenericWorker.prototype.resume.call(this)) {\n        return false;\n    }\n\n    if (!this._tickScheduled && this.dataIsReady) {\n        this._tickScheduled = true;\n        utils.delay(this._tickAndRepeat, [], this);\n    }\n    return true;\n};\n\n/**\n * Trigger a tick a schedule an other call to this function.\n */\nDataWorker.prototype._tickAndRepeat = function() {\n    this._tickScheduled = false;\n    if(this.isPaused || this.isFinished) {\n        return;\n    }\n    this._tick();\n    if(!this.isFinished) {\n        utils.delay(this._tickAndRepeat, [], this);\n        this._tickScheduled = true;\n    }\n};\n\n/**\n * Read and push a chunk.\n */\nDataWorker.prototype._tick = function() {\n\n    if(this.isPaused || this.isFinished) {\n        return false;\n    }\n\n    var size = DEFAULT_BLOCK_SIZE;\n    var data = null, nextIndex = Math.min(this.max, this.index + size);\n    if (this.index >= this.max) {\n        // EOF\n        return this.end();\n    } else {\n        switch(this.type) {\n            case \"string\":\n                data = this.data.substring(this.index, nextIndex);\n            break;\n            case \"uint8array\":\n                data = this.data.subarray(this.index, nextIndex);\n            break;\n            case \"array\":\n            case \"nodebuffer\":\n                data = this.data.slice(this.index, nextIndex);\n            break;\n        }\n        this.index = nextIndex;\n        return this.push({\n            data : data,\n            meta : {\n                percent : this.max ? this.index / this.max * 100 : 0\n            }\n        });\n    }\n};\n\nmodule.exports = DataWorker;\n"]},"metadata":{},"sourceType":"script"}