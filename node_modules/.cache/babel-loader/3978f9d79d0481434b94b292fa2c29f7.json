{"ast":null,"code":"'use strict';\n\nvar global = require('../internals/global');\n\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\n\nvar fails = require('../internals/fails');\n\nvar Int8Array = global.Int8Array;\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar $toLocaleString = [].toLocaleString;\nvar $slice = [].slice; // iOS Safari 6.x fails here\n\nvar TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {\n  $toLocaleString.call(new Int8Array(1));\n});\nvar FORCED = fails(function () {\n  return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();\n}) || !fails(function () {\n  Int8Array.prototype.toLocaleString.call([1, 2]);\n}); // `%TypedArray%.prototype.toLocaleString` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring\n\nexportTypedArrayMethod('toLocaleString', function toLocaleString() {\n  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);\n}, FORCED);","map":{"version":3,"sources":["/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/core-js/modules/es.typed-array.to-locale-string.js"],"names":["global","require","ArrayBufferViewCore","fails","Int8Array","aTypedArray","exportTypedArrayMethod","$toLocaleString","toLocaleString","$slice","slice","TO_LOCALE_STRING_BUG","call","FORCED","prototype","apply","arguments"],"mappings":"AAAA;;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,qCAAD,CAAjC;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,oBAAD,CAAnB;;AAEA,IAAIG,SAAS,GAAGJ,MAAM,CAACI,SAAvB;AACA,IAAIC,WAAW,GAAGH,mBAAmB,CAACG,WAAtC;AACA,IAAIC,sBAAsB,GAAGJ,mBAAmB,CAACI,sBAAjD;AACA,IAAIC,eAAe,GAAG,GAAGC,cAAzB;AACA,IAAIC,MAAM,GAAG,GAAGC,KAAhB,C,CAEA;;AACA,IAAIC,oBAAoB,GAAG,CAAC,CAACP,SAAF,IAAeD,KAAK,CAAC,YAAY;AAC1DI,EAAAA,eAAe,CAACK,IAAhB,CAAqB,IAAIR,SAAJ,CAAc,CAAd,CAArB;AACD,CAF8C,CAA/C;AAIA,IAAIS,MAAM,GAAGV,KAAK,CAAC,YAAY;AAC7B,SAAO,CAAC,CAAD,EAAI,CAAJ,EAAOK,cAAP,MAA2B,IAAIJ,SAAJ,CAAc,CAAC,CAAD,EAAI,CAAJ,CAAd,EAAsBI,cAAtB,EAAlC;AACD,CAFiB,CAAL,IAEP,CAACL,KAAK,CAAC,YAAY;AACvBC,EAAAA,SAAS,CAACU,SAAV,CAAoBN,cAApB,CAAmCI,IAAnC,CAAwC,CAAC,CAAD,EAAI,CAAJ,CAAxC;AACD,CAFW,CAFZ,C,CAMA;AACA;;AACAN,sBAAsB,CAAC,gBAAD,EAAmB,SAASE,cAAT,GAA0B;AACjE,SAAOD,eAAe,CAACQ,KAAhB,CAAsBJ,oBAAoB,GAAGF,MAAM,CAACG,IAAP,CAAYP,WAAW,CAAC,IAAD,CAAvB,CAAH,GAAoCA,WAAW,CAAC,IAAD,CAAzF,EAAiGW,SAAjG,CAAP;AACD,CAFqB,EAEnBH,MAFmB,CAAtB","sourcesContent":["'use strict';\nvar global = require('../internals/global');\nvar ArrayBufferViewCore = require('../internals/array-buffer-view-core');\nvar fails = require('../internals/fails');\n\nvar Int8Array = global.Int8Array;\nvar aTypedArray = ArrayBufferViewCore.aTypedArray;\nvar exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;\nvar $toLocaleString = [].toLocaleString;\nvar $slice = [].slice;\n\n// iOS Safari 6.x fails here\nvar TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {\n  $toLocaleString.call(new Int8Array(1));\n});\n\nvar FORCED = fails(function () {\n  return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();\n}) || !fails(function () {\n  Int8Array.prototype.toLocaleString.call([1, 2]);\n});\n\n// `%TypedArray%.prototype.toLocaleString` method\n// https://tc39.github.io/ecma262/#sec-%typedarray%.prototype.tolocalestring\nexportTypedArrayMethod('toLocaleString', function toLocaleString() {\n  return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);\n}, FORCED);\n"]},"metadata":{},"sourceType":"script"}