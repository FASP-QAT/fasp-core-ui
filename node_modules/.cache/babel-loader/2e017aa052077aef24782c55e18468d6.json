{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $Math = GetIntrinsic('%Math%');\n\nvar ToNumber = require('./ToNumber');\n\nvar $isNaN = require('../helpers/isNaN');\n\nvar $isFinite = require('../helpers/isFinite');\n\nvar $sign = require('../helpers/sign');\n\nvar $floor = $Math.floor;\nvar $abs = $Math.abs; // http://www.ecma-international.org/ecma-262/5.1/#sec-9.4\n\nmodule.exports = function ToInteger(value) {\n  var number = ToNumber(value);\n\n  if ($isNaN(number)) {\n    return 0;\n  }\n\n  if (number === 0 || !$isFinite(number)) {\n    return number;\n  }\n\n  return $sign(number) * $floor($abs(number));\n};","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/node_modules/es-abstract/5/ToInteger.js"],"names":["GetIntrinsic","require","$Math","ToNumber","$isNaN","$isFinite","$sign","$floor","floor","$abs","abs","module","exports","ToInteger","value","number"],"mappings":"AAAA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;;AAEA,IAAIC,KAAK,GAAGF,YAAY,CAAC,QAAD,CAAxB;;AAEA,IAAIG,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,kBAAD,CAApB;;AACA,IAAII,SAAS,GAAGJ,OAAO,CAAC,qBAAD,CAAvB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,iBAAD,CAAnB;;AAEA,IAAIM,MAAM,GAAGL,KAAK,CAACM,KAAnB;AACA,IAAIC,IAAI,GAAGP,KAAK,CAACQ,GAAjB,C,CAEA;;AAEAC,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC1C,MAAIC,MAAM,GAAGZ,QAAQ,CAACW,KAAD,CAArB;;AACA,MAAIV,MAAM,CAACW,MAAD,CAAV,EAAoB;AAAE,WAAO,CAAP;AAAW;;AACjC,MAAIA,MAAM,KAAK,CAAX,IAAgB,CAACV,SAAS,CAACU,MAAD,CAA9B,EAAwC;AAAE,WAAOA,MAAP;AAAgB;;AAC1D,SAAOT,KAAK,CAACS,MAAD,CAAL,GAAgBR,MAAM,CAACE,IAAI,CAACM,MAAD,CAAL,CAA7B;AACA,CALD","sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('../GetIntrinsic');\n\nvar $Math = GetIntrinsic('%Math%');\n\nvar ToNumber = require('./ToNumber');\nvar $isNaN = require('../helpers/isNaN');\nvar $isFinite = require('../helpers/isFinite');\nvar $sign = require('../helpers/sign');\n\nvar $floor = $Math.floor;\nvar $abs = $Math.abs;\n\n// http://www.ecma-international.org/ecma-262/5.1/#sec-9.4\n\nmodule.exports = function ToInteger(value) {\n\tvar number = ToNumber(value);\n\tif ($isNaN(number)) { return 0; }\n\tif (number === 0 || !$isFinite(number)) { return number; }\n\treturn $sign(number) * $floor($abs(number));\n};\n"]},"metadata":{},"sourceType":"script"}