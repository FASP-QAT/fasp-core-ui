{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../meta\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../meta\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"markdown\", function (cmCfg, modeCfg) {\n    var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n    var htmlModeMissing = htmlMode.name == \"null\";\n\n    function getMode(name) {\n      if (CodeMirror.findModeByName) {\n        var found = CodeMirror.findModeByName(name);\n        if (found) name = found.mime || found.mimes[0];\n      }\n\n      var mode = CodeMirror.getMode(cmCfg, name);\n      return mode.name == \"null\" ? null : mode;\n    } // Should characters that affect highlighting be highlighted separate?\n    // Does not include characters that will be output (such as `1.` and `-` for lists)\n\n\n    if (modeCfg.highlightFormatting === undefined) modeCfg.highlightFormatting = false; // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n    // Excess `>` will emit `error` token.\n\n    if (modeCfg.maxBlockquoteDepth === undefined) modeCfg.maxBlockquoteDepth = 0; // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n\n    if (modeCfg.taskLists === undefined) modeCfg.taskLists = false; // Turn on strikethrough syntax\n\n    if (modeCfg.strikethrough === undefined) modeCfg.strikethrough = false;\n    if (modeCfg.emoji === undefined) modeCfg.emoji = false;\n    if (modeCfg.fencedCodeBlockHighlighting === undefined) modeCfg.fencedCodeBlockHighlighting = true;\n    if (modeCfg.xml === undefined) modeCfg.xml = true; // Allow token types to be overridden by user-provided token types.\n\n    if (modeCfg.tokenTypeOverrides === undefined) modeCfg.tokenTypeOverrides = {};\n    var tokenTypes = {\n      header: \"header\",\n      code: \"comment\",\n      quote: \"quote\",\n      list1: \"variable-2\",\n      list2: \"variable-3\",\n      list3: \"keyword\",\n      hr: \"hr\",\n      image: \"image\",\n      imageAltText: \"image-alt-text\",\n      imageMarker: \"image-marker\",\n      formatting: \"formatting\",\n      linkInline: \"link\",\n      linkEmail: \"link\",\n      linkText: \"link\",\n      linkHref: \"string\",\n      em: \"em\",\n      strong: \"strong\",\n      strikethrough: \"strikethrough\",\n      emoji: \"builtin\"\n    };\n\n    for (var tokenType in tokenTypes) {\n      if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n        tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n      }\n    }\n\n    var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/,\n        listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/,\n        taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n    ,\n        atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/,\n        setextHeaderRE = /^ *(?:\\={1,}|-{1,})\\s*$/,\n        textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/,\n        fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w+#-]*)[^\\n`]*$/,\n        linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n    ,\n        punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/,\n        expandedTab = \"    \"; // CommonMark specifies tab as 4 spaces\n\n    function switchInline(stream, state, f) {\n      state.f = state.inline = f;\n      return f(stream, state);\n    }\n\n    function switchBlock(stream, state, f) {\n      state.f = state.block = f;\n      return f(stream, state);\n    }\n\n    function lineIsEmpty(line) {\n      return !line || !/\\S/.test(line.string);\n    } // Blocks\n\n\n    function blankLine(state) {\n      // Reset linkTitle state\n      state.linkTitle = false;\n      state.linkHref = false;\n      state.linkText = false; // Reset EM state\n\n      state.em = false; // Reset STRONG state\n\n      state.strong = false; // Reset strikethrough state\n\n      state.strikethrough = false; // Reset state.quote\n\n      state.quote = 0; // Reset state.indentedCode\n\n      state.indentedCode = false;\n\n      if (state.f == htmlBlock) {\n        var exit = htmlModeMissing;\n\n        if (!exit) {\n          var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n          exit = inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText;\n        }\n\n        if (exit) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      } // Reset state.trailingSpace\n\n\n      state.trailingSpace = 0;\n      state.trailingSpaceNewLine = false; // Mark this line as blank\n\n      state.prevLine = state.thisLine;\n      state.thisLine = {\n        stream: null\n      };\n      return null;\n    }\n\n    function blockNormal(stream, state) {\n      var firstTokenOnLine = stream.column() === state.indentation;\n      var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n      var prevLineIsIndentedCode = state.indentedCode;\n      var prevLineIsHr = state.prevLine.hr;\n      var prevLineIsList = state.list !== false;\n      var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n      state.indentedCode = false;\n      var lineIndentation = state.indentation; // compute once per line (on first token)\n\n      if (state.indentationDiff === null) {\n        state.indentationDiff = state.indentation;\n\n        if (prevLineIsList) {\n          state.list = null; // While this list item's marker's indentation is less than the deepest\n          //  list item's content's indentation,pop the deepest list item\n          //  indentation off the stack, and update block indentation state\n\n          while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n            state.listStack.pop();\n\n            if (state.listStack.length) {\n              state.indentation = state.listStack[state.listStack.length - 1]; // less than the first list's indent -> the line is no longer a list\n            } else {\n              state.list = false;\n            }\n          }\n\n          if (state.list !== false) {\n            state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1];\n          }\n        }\n      } // not comprehensive (currently only for setext detection purposes)\n\n\n      var allowsInlineContinuation = !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header && (!prevLineIsList || !prevLineIsIndentedCode) && !state.prevLine.fencedCodeEnd;\n      var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) && state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n      var match = null;\n\n      if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd || state.prevLine.header || prevLineLineIsEmpty)) {\n        stream.skipToEnd();\n        state.indentedCode = true;\n        return tokenTypes.code;\n      } else if (stream.eatSpace()) {\n        return null;\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n        state.quote = 0;\n        state.header = match[1].length;\n        state.thisLine.header = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        state.f = state.inline;\n        return getType(state);\n      } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n        state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n        if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n        stream.eatSpace();\n        return getType(state);\n      } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n        var listType = match[1] ? \"ol\" : \"ul\";\n        state.indentation = lineIndentation + stream.current().length;\n        state.list = true;\n        state.quote = 0; // Add this list item's content's indentation to the stack\n\n        state.listStack.push(state.indentation); // Reset inline styles which shouldn't propagate aross list items\n\n        state.em = false;\n        state.strong = false;\n        state.code = false;\n        state.strikethrough = false;\n\n        if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n          state.taskList = true;\n        }\n\n        state.f = state.inline;\n        if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n        return getType(state);\n      } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n        state.quote = 0;\n        state.fencedEndRE = new RegExp(match[1] + \"+ *$\"); // try switching mode\n\n        state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2]);\n        if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n        state.f = state.block = local;\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        state.code = -1;\n        return getType(state); // SETEXT has lowest block-scope precedence after HR, so check it after\n        //  the others (code, blockquote, list...)\n      } else if ( // if setext set, indicates line after ---/===\n      state.setext || // line before ---/===\n      (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false && !state.code && !isHr && !linkDefRE.test(stream.string) && (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))) {\n        if (!state.setext) {\n          state.header = match[0].charAt(0) == '=' ? 1 : 2;\n          state.setext = state.header;\n        } else {\n          state.header = state.setext; // has no effect on type so we can reset it now\n\n          state.setext = 0;\n          stream.skipToEnd();\n          if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        }\n\n        state.thisLine.header = true;\n        state.f = state.inline;\n        return getType(state);\n      } else if (isHr) {\n        stream.skipToEnd();\n        state.hr = true;\n        state.thisLine.hr = true;\n        return tokenTypes.hr;\n      } else if (stream.peek() === '[') {\n        return switchInline(stream, state, footnoteLink);\n      }\n\n      return switchInline(stream, state, state.inline);\n    }\n\n    function htmlBlock(stream, state) {\n      var style = htmlMode.token(stream, state.htmlState);\n\n      if (!htmlModeMissing) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState);\n\n        if (inner.mode.name == \"xml\" && inner.state.tagStart === null && !inner.state.context && inner.state.tokenize.isInText || state.md_inside && stream.current().indexOf(\">\") > -1) {\n          state.f = inlineNormal;\n          state.block = blockNormal;\n          state.htmlState = null;\n        }\n      }\n\n      return style;\n    }\n\n    function local(stream, state) {\n      var currListInd = state.listStack[state.listStack.length - 1] || 0;\n      var hasExitedList = state.indentation < currListInd;\n      var maxFencedEndInd = currListInd + 3;\n\n      if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n        if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n        var returnType;\n        if (!hasExitedList) returnType = getType(state);\n        state.localMode = state.localState = null;\n        state.block = blockNormal;\n        state.f = inlineNormal;\n        state.fencedEndRE = null;\n        state.code = 0;\n        state.thisLine.fencedCodeEnd = true;\n        if (hasExitedList) return switchBlock(stream, state, state.block);\n        return returnType;\n      } else if (state.localMode) {\n        return state.localMode.token(stream, state.localState);\n      } else {\n        stream.skipToEnd();\n        return tokenTypes.code;\n      }\n    } // Inline\n\n\n    function getType(state) {\n      var styles = [];\n\n      if (state.formatting) {\n        styles.push(tokenTypes.formatting);\n        if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n        for (var i = 0; i < state.formatting.length; i++) {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n          if (state.formatting[i] === \"header\") {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n          } // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n          // Add `error` instead if the maximum blockquote nesting depth is passed\n\n\n          if (state.formatting[i] === \"quote\") {\n            if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n              styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n            } else {\n              styles.push(\"error\");\n            }\n          }\n        }\n      }\n\n      if (state.taskOpen) {\n        styles.push(\"meta\");\n        return styles.length ? styles.join(' ') : null;\n      }\n\n      if (state.taskClosed) {\n        styles.push(\"property\");\n        return styles.length ? styles.join(' ') : null;\n      }\n\n      if (state.linkHref) {\n        styles.push(tokenTypes.linkHref, \"url\");\n      } else {\n        // Only apply inline styles to non-url text\n        if (state.strong) {\n          styles.push(tokenTypes.strong);\n        }\n\n        if (state.em) {\n          styles.push(tokenTypes.em);\n        }\n\n        if (state.strikethrough) {\n          styles.push(tokenTypes.strikethrough);\n        }\n\n        if (state.emoji) {\n          styles.push(tokenTypes.emoji);\n        }\n\n        if (state.linkText) {\n          styles.push(tokenTypes.linkText);\n        }\n\n        if (state.code) {\n          styles.push(tokenTypes.code);\n        }\n\n        if (state.image) {\n          styles.push(tokenTypes.image);\n        }\n\n        if (state.imageAltText) {\n          styles.push(tokenTypes.imageAltText, \"link\");\n        }\n\n        if (state.imageMarker) {\n          styles.push(tokenTypes.imageMarker);\n        }\n      }\n\n      if (state.header) {\n        styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header);\n      }\n\n      if (state.quote) {\n        styles.push(tokenTypes.quote); // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n\n        if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n          styles.push(tokenTypes.quote + \"-\" + state.quote);\n        } else {\n          styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n        }\n      }\n\n      if (state.list !== false) {\n        var listMod = (state.listStack.length - 1) % 3;\n\n        if (!listMod) {\n          styles.push(tokenTypes.list1);\n        } else if (listMod === 1) {\n          styles.push(tokenTypes.list2);\n        } else {\n          styles.push(tokenTypes.list3);\n        }\n      }\n\n      if (state.trailingSpaceNewLine) {\n        styles.push(\"trailing-space-new-line\");\n      } else if (state.trailingSpace) {\n        styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n      }\n\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    function handleText(stream, state) {\n      if (stream.match(textRE, true)) {\n        return getType(state);\n      }\n\n      return undefined;\n    }\n\n    function inlineNormal(stream, state) {\n      var style = state.text(stream, state);\n      if (typeof style !== 'undefined') return style;\n\n      if (state.list) {\n        // List marker (*, +, -, 1., etc)\n        state.list = null;\n        return getType(state);\n      }\n\n      if (state.taskList) {\n        var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n        if (taskOpen) state.taskOpen = true;else state.taskClosed = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"task\";\n        state.taskList = false;\n        return getType(state);\n      }\n\n      state.taskOpen = false;\n      state.taskClosed = false;\n\n      if (state.header && stream.match(/^#+$/, true)) {\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n        return getType(state);\n      }\n\n      var ch = stream.next(); // Matches link titles present on next line\n\n      if (state.linkTitle) {\n        state.linkTitle = false;\n        var matchCh = ch;\n\n        if (ch === '(') {\n          matchCh = ')';\n        }\n\n        matchCh = (matchCh + '').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n        var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n\n        if (stream.match(new RegExp(regex), true)) {\n          return tokenTypes.linkHref;\n        }\n      } // If this block is changed, it may need to be updated in GFM mode\n\n\n      if (ch === '`') {\n        var previousFormatting = state.formatting;\n        if (modeCfg.highlightFormatting) state.formatting = \"code\";\n        stream.eatWhile('`');\n        var count = stream.current().length;\n\n        if (state.code == 0 && (!state.quote || count == 1)) {\n          state.code = count;\n          return getType(state);\n        } else if (count == state.code) {\n          // Must be exact\n          var t = getType(state);\n          state.code = 0;\n          return t;\n        } else {\n          state.formatting = previousFormatting;\n          return getType(state);\n        }\n      } else if (state.code) {\n        return getType(state);\n      }\n\n      if (ch === '\\\\') {\n        stream.next();\n\n        if (modeCfg.highlightFormatting) {\n          var type = getType(state);\n          var formattingEscape = tokenTypes.formatting + \"-escape\";\n          return type ? type + \" \" + formattingEscape : formattingEscape;\n        }\n      }\n\n      if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n        state.imageMarker = true;\n        state.image = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n\n      if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n        state.imageMarker = false;\n        state.imageAltText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        return getType(state);\n      }\n\n      if (ch === ']' && state.imageAltText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"image\";\n        var type = getType(state);\n        state.imageAltText = false;\n        state.image = false;\n        state.inline = state.f = linkHref;\n        return type;\n      }\n\n      if (ch === '[' && !state.image) {\n        if (state.linkText && stream.match(/^.*?\\]/)) return getType(state);\n        state.linkText = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        return getType(state);\n      }\n\n      if (ch === ']' && state.linkText) {\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n        state.linkText = false;\n        state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal;\n        return type;\n      }\n\n      if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkInline;\n      }\n\n      if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n        state.f = state.inline = linkInline;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkEmail;\n      }\n\n      if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n        var end = stream.string.indexOf(\">\", stream.pos);\n\n        if (end != -1) {\n          var atts = stream.string.substring(stream.start, end);\n          if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n        }\n\n        stream.backUp(1);\n        state.htmlState = CodeMirror.startState(htmlMode);\n        return switchBlock(stream, state, htmlBlock);\n      }\n\n      if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n        state.md_inside = false;\n        return \"tag\";\n      } else if (ch === \"*\" || ch === \"_\") {\n        var len = 1,\n            before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2);\n\n        while (len < 3 && stream.eat(ch)) {\n          len++;\n        }\n\n        var after = stream.peek() || \" \"; // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n\n        var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before));\n        var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after));\n        var setEm = null,\n            setStrong = null;\n\n        if (len % 2) {\n          // Em\n          if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setEm = true;else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setEm = false;\n        }\n\n        if (len > 1) {\n          // Strong\n          if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before))) setStrong = true;else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after))) setStrong = false;\n        }\n\n        if (setStrong != null || setEm != null) {\n          if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\";\n          if (setEm === true) state.em = ch;\n          if (setStrong === true) state.strong = ch;\n          var t = getType(state);\n          if (setEm === false) state.em = false;\n          if (setStrong === false) state.strong = false;\n          return t;\n        }\n      } else if (ch === ' ') {\n        if (stream.eat('*') || stream.eat('_')) {\n          // Probably surrounded by spaces\n          if (stream.peek() === ' ') {\n            // Surrounded by spaces, ignore\n            return getType(state);\n          } else {\n            // Not surrounded by spaces, back up pointer\n            stream.backUp(1);\n          }\n        }\n      }\n\n      if (modeCfg.strikethrough) {\n        if (ch === '~' && stream.eatWhile(ch)) {\n          if (state.strikethrough) {\n            // Remove strikethrough\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            var t = getType(state);\n            state.strikethrough = false;\n            return t;\n          } else if (stream.match(/^[^\\s]/, false)) {\n            // Add strikethrough\n            state.strikethrough = true;\n            if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n            return getType(state);\n          }\n        } else if (ch === ' ') {\n          if (stream.match(/^~~/, true)) {\n            // Probably surrounded by space\n            if (stream.peek() === ' ') {\n              // Surrounded by spaces, ignore\n              return getType(state);\n            } else {\n              // Not surrounded by spaces, back up pointer\n              stream.backUp(2);\n            }\n          }\n        }\n      }\n\n      if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n        state.emoji = true;\n        if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n        var retType = getType(state);\n        state.emoji = false;\n        return retType;\n      }\n\n      if (ch === ' ') {\n        if (stream.match(/^ +$/, false)) {\n          state.trailingSpace++;\n        } else if (state.trailingSpace) {\n          state.trailingSpaceNewLine = true;\n        }\n      }\n\n      return getType(state);\n    }\n\n    function linkInline(stream, state) {\n      var ch = stream.next();\n\n      if (ch === \">\") {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var type = getType(state);\n\n        if (type) {\n          type += \" \";\n        } else {\n          type = \"\";\n        }\n\n        return type + tokenTypes.linkInline;\n      }\n\n      stream.match(/^[^>]+/, true);\n      return tokenTypes.linkInline;\n    }\n\n    function linkHref(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      }\n\n      var ch = stream.next();\n\n      if (ch === '(' || ch === '[') {\n        state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        state.linkHref = true;\n        return getType(state);\n      }\n\n      return 'error';\n    }\n\n    var linkRE = {\n      \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n      \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n    };\n\n    function getLinkHrefInside(endChar) {\n      return function (stream, state) {\n        var ch = stream.next();\n\n        if (ch === endChar) {\n          state.f = state.inline = inlineNormal;\n          if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n          var returnState = getType(state);\n          state.linkHref = false;\n          return returnState;\n        }\n\n        stream.match(linkRE[endChar]);\n        state.linkHref = true;\n        return getType(state);\n      };\n    }\n\n    function footnoteLink(stream, state) {\n      if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n        state.f = footnoteLinkInside;\n        stream.next(); // Consume [\n\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        state.linkText = true;\n        return getType(state);\n      }\n\n      return switchInline(stream, state, inlineNormal);\n    }\n\n    function footnoteLinkInside(stream, state) {\n      if (stream.match(/^\\]:/, true)) {\n        state.f = state.inline = footnoteUrl;\n        if (modeCfg.highlightFormatting) state.formatting = \"link\";\n        var returnType = getType(state);\n        state.linkText = false;\n        return returnType;\n      }\n\n      stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n      return tokenTypes.linkText;\n    }\n\n    function footnoteUrl(stream, state) {\n      // Check if space, and return NULL if so (to avoid marking the space)\n      if (stream.eatSpace()) {\n        return null;\n      } // Match URL\n\n\n      stream.match(/^[^\\s]+/, true); // Check for link title\n\n      if (stream.peek() === undefined) {\n        // End of line, set flag to check next line\n        state.linkTitle = true;\n      } else {\n        // More content on line, check if link title\n        stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\\\\\|\\\\.)+\"|'(?:[^'\\\\]|\\\\\\\\|\\\\.)+'|\\((?:[^)\\\\]|\\\\\\\\|\\\\.)+\\)))?/, true);\n      }\n\n      state.f = state.inline = inlineNormal;\n      return tokenTypes.linkHref + \" url\";\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          f: blockNormal,\n          prevLine: {\n            stream: null\n          },\n          thisLine: {\n            stream: null\n          },\n          block: blockNormal,\n          htmlState: null,\n          indentation: 0,\n          inline: inlineNormal,\n          text: handleText,\n          formatting: false,\n          linkText: false,\n          linkHref: false,\n          linkTitle: false,\n          code: 0,\n          em: false,\n          strong: false,\n          header: 0,\n          setext: 0,\n          hr: false,\n          taskList: false,\n          list: false,\n          listStack: [],\n          quote: 0,\n          trailingSpace: 0,\n          trailingSpaceNewLine: false,\n          strikethrough: false,\n          emoji: false,\n          fencedEndRE: null\n        };\n      },\n      copyState: function copyState(s) {\n        return {\n          f: s.f,\n          prevLine: s.prevLine,\n          thisLine: s.thisLine,\n          block: s.block,\n          htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n          indentation: s.indentation,\n          localMode: s.localMode,\n          localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n          inline: s.inline,\n          text: s.text,\n          formatting: false,\n          linkText: s.linkText,\n          linkTitle: s.linkTitle,\n          linkHref: s.linkHref,\n          code: s.code,\n          em: s.em,\n          strong: s.strong,\n          strikethrough: s.strikethrough,\n          emoji: s.emoji,\n          header: s.header,\n          setext: s.setext,\n          hr: s.hr,\n          taskList: s.taskList,\n          list: s.list,\n          listStack: s.listStack.slice(0),\n          quote: s.quote,\n          indentedCode: s.indentedCode,\n          trailingSpace: s.trailingSpace,\n          trailingSpaceNewLine: s.trailingSpaceNewLine,\n          md_inside: s.md_inside,\n          fencedEndRE: s.fencedEndRE\n        };\n      },\n      token: function token(stream, state) {\n        // Reset state.formatting\n        state.formatting = false;\n\n        if (stream != state.thisLine.stream) {\n          state.header = 0;\n          state.hr = false;\n\n          if (stream.match(/^\\s*$/, true)) {\n            blankLine(state);\n            return null;\n          }\n\n          state.prevLine = state.thisLine;\n          state.thisLine = {\n            stream: stream\n          }; // Reset state.taskList\n\n          state.taskList = false; // Reset state.trailingSpace\n\n          state.trailingSpace = 0;\n          state.trailingSpaceNewLine = false;\n\n          if (!state.localState) {\n            state.f = state.block;\n\n            if (state.f != htmlBlock) {\n              var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n              state.indentation = indentation;\n              state.indentationDiff = null;\n              if (indentation > 0) return null;\n            }\n          }\n        }\n\n        return state.f(stream, state);\n      },\n      innerMode: function innerMode(state) {\n        if (state.block == htmlBlock) return {\n          state: state.htmlState,\n          mode: htmlMode\n        };\n        if (state.localState) return {\n          state: state.localState,\n          mode: state.localMode\n        };\n        return {\n          state: state,\n          mode: mode\n        };\n      },\n      indent: function indent(state, textAfter, line) {\n        if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line);\n        if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line);\n        return CodeMirror.Pass;\n      },\n      blankLine: blankLine,\n      getType: getType,\n      blockCommentStart: \"<!--\",\n      blockCommentEnd: \"-->\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\",\n      fold: \"markdown\"\n    };\n    return mode;\n  }, \"xml\");\n  CodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n  CodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n});","map":{"version":3,"sources":["/home/altius/QAT/fasp-core-ui/node_modules/codemirror/mode/markdown/markdown.js"],"names":["mod","exports","module","require","define","amd","CodeMirror","defineMode","cmCfg","modeCfg","htmlMode","getMode","htmlModeMissing","name","findModeByName","found","mime","mimes","mode","highlightFormatting","undefined","maxBlockquoteDepth","taskLists","strikethrough","emoji","fencedCodeBlockHighlighting","xml","tokenTypeOverrides","tokenTypes","header","code","quote","list1","list2","list3","hr","image","imageAltText","imageMarker","formatting","linkInline","linkEmail","linkText","linkHref","em","strong","tokenType","hasOwnProperty","hrRE","listRE","taskListRE","atxHeaderRE","allowAtxHeaderWithoutSpace","setextHeaderRE","textRE","fencedCodeRE","linkDefRE","punctuation","expandedTab","switchInline","stream","state","f","inline","switchBlock","block","lineIsEmpty","line","test","string","blankLine","linkTitle","indentedCode","htmlBlock","exit","inner","innerMode","htmlState","tagStart","context","tokenize","isInText","inlineNormal","blockNormal","trailingSpace","trailingSpaceNewLine","prevLine","thisLine","firstTokenOnLine","column","indentation","prevLineLineIsEmpty","prevLineIsIndentedCode","prevLineIsHr","prevLineIsList","list","maxNonCodeIndentation","listStack","length","lineIndentation","indentationDiff","pop","allowsInlineContinuation","fencedCodeEnd","isHr","match","skipToEnd","eatSpace","getType","eat","setext","listType","current","push","taskList","fencedEndRE","RegExp","localMode","localState","startState","local","lookAhead","charAt","peek","footnoteLink","style","token","md_inside","indexOf","currListInd","hasExitedList","maxFencedEndInd","returnType","styles","i","taskOpen","join","taskClosed","listMod","handleText","text","ch","next","matchCh","replace","regex","previousFormatting","eatWhile","count","t","type","formattingEscape","end","pos","atts","substring","start","backUp","len","before","after","leftFlanking","rightFlanking","setEm","setStrong","retType","getLinkHrefInside","linkRE","endChar","returnState","footnoteLinkInside","footnoteUrl","copyState","s","slice","indent","textAfter","Pass","blockCommentStart","blockCommentEnd","closeBrackets","fold","defineMIME"],"mappings":"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","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../xml/xml\"), require(\"../meta\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../xml/xml\", \"../meta\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"markdown\", function(cmCfg, modeCfg) {\n\n  var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n  var htmlModeMissing = htmlMode.name == \"null\"\n\n  function getMode(name) {\n    if (CodeMirror.findModeByName) {\n      var found = CodeMirror.findModeByName(name);\n      if (found) name = found.mime || found.mimes[0];\n    }\n    var mode = CodeMirror.getMode(cmCfg, name);\n    return mode.name == \"null\" ? null : mode;\n  }\n\n  // Should characters that affect highlighting be highlighted separate?\n  // Does not include characters that will be output (such as `1.` and `-` for lists)\n  if (modeCfg.highlightFormatting === undefined)\n    modeCfg.highlightFormatting = false;\n\n  // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n  // Excess `>` will emit `error` token.\n  if (modeCfg.maxBlockquoteDepth === undefined)\n    modeCfg.maxBlockquoteDepth = 0;\n\n  // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n  if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;\n\n  // Turn on strikethrough syntax\n  if (modeCfg.strikethrough === undefined)\n    modeCfg.strikethrough = false;\n\n  if (modeCfg.emoji === undefined)\n    modeCfg.emoji = false;\n\n  if (modeCfg.fencedCodeBlockHighlighting === undefined)\n    modeCfg.fencedCodeBlockHighlighting = true;\n\n  if (modeCfg.xml === undefined)\n    modeCfg.xml = true;\n\n  // Allow token types to be overridden by user-provided token types.\n  if (modeCfg.tokenTypeOverrides === undefined)\n    modeCfg.tokenTypeOverrides = {};\n\n  var tokenTypes = {\n    header: \"header\",\n    code: \"comment\",\n    quote: \"quote\",\n    list1: \"variable-2\",\n    list2: \"variable-3\",\n    list3: \"keyword\",\n    hr: \"hr\",\n    image: \"image\",\n    imageAltText: \"image-alt-text\",\n    imageMarker: \"image-marker\",\n    formatting: \"formatting\",\n    linkInline: \"link\",\n    linkEmail: \"link\",\n    linkText: \"link\",\n    linkHref: \"string\",\n    em: \"em\",\n    strong: \"strong\",\n    strikethrough: \"strikethrough\",\n    emoji: \"builtin\"\n  };\n\n  for (var tokenType in tokenTypes) {\n    if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n      tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n    }\n  }\n\n  var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/\n  ,   listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/\n  ,   taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n  ,   atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/\n  ,   setextHeaderRE = /^ *(?:\\={1,}|-{1,})\\s*$/\n  ,   textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/\n  ,   fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w+#-]*)[^\\n`]*$/\n  ,   linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n  ,   punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/\n  ,   expandedTab = \"    \" // CommonMark specifies tab as 4 spaces\n\n  function switchInline(stream, state, f) {\n    state.f = state.inline = f;\n    return f(stream, state);\n  }\n\n  function switchBlock(stream, state, f) {\n    state.f = state.block = f;\n    return f(stream, state);\n  }\n\n  function lineIsEmpty(line) {\n    return !line || !/\\S/.test(line.string)\n  }\n\n  // Blocks\n\n  function blankLine(state) {\n    // Reset linkTitle state\n    state.linkTitle = false;\n    state.linkHref = false;\n    state.linkText = false;\n    // Reset EM state\n    state.em = false;\n    // Reset STRONG state\n    state.strong = false;\n    // Reset strikethrough state\n    state.strikethrough = false;\n    // Reset state.quote\n    state.quote = 0;\n    // Reset state.indentedCode\n    state.indentedCode = false;\n    if (state.f == htmlBlock) {\n      var exit = htmlModeMissing\n      if (!exit) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n        exit = inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n          (!inner.state.context && inner.state.tokenize.isInText)\n      }\n      if (exit) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    // Reset state.trailingSpace\n    state.trailingSpace = 0;\n    state.trailingSpaceNewLine = false;\n    // Mark this line as blank\n    state.prevLine = state.thisLine\n    state.thisLine = {stream: null}\n    return null;\n  }\n\n  function blockNormal(stream, state) {\n    var firstTokenOnLine = stream.column() === state.indentation;\n    var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n    var prevLineIsIndentedCode = state.indentedCode;\n    var prevLineIsHr = state.prevLine.hr;\n    var prevLineIsList = state.list !== false;\n    var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n\n    state.indentedCode = false;\n\n    var lineIndentation = state.indentation;\n    // compute once per line (on first token)\n    if (state.indentationDiff === null) {\n      state.indentationDiff = state.indentation;\n      if (prevLineIsList) {\n        state.list = null;\n        // While this list item's marker's indentation is less than the deepest\n        //  list item's content's indentation,pop the deepest list item\n        //  indentation off the stack, and update block indentation state\n        while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n          state.listStack.pop();\n          if (state.listStack.length) {\n            state.indentation = state.listStack[state.listStack.length - 1];\n          // less than the first list's indent -> the line is no longer a list\n          } else {\n            state.list = false;\n          }\n        }\n        if (state.list !== false) {\n          state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1]\n        }\n      }\n    }\n\n    // not comprehensive (currently only for setext detection purposes)\n    var allowsInlineContinuation = (\n        !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header &&\n        (!prevLineIsList || !prevLineIsIndentedCode) &&\n        !state.prevLine.fencedCodeEnd\n    );\n\n    var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) &&\n      state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n\n    var match = null;\n    if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd ||\n         state.prevLine.header || prevLineLineIsEmpty)) {\n      stream.skipToEnd();\n      state.indentedCode = true;\n      return tokenTypes.code;\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n      state.quote = 0;\n      state.header = match[1].length;\n      state.thisLine.header = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      state.f = state.inline;\n      return getType(state);\n    } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n      state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n      if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n      stream.eatSpace();\n      return getType(state);\n    } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n      var listType = match[1] ? \"ol\" : \"ul\";\n\n      state.indentation = lineIndentation + stream.current().length;\n      state.list = true;\n      state.quote = 0;\n\n      // Add this list item's content's indentation to the stack\n      state.listStack.push(state.indentation);\n      // Reset inline styles which shouldn't propagate aross list items\n      state.em = false;\n      state.strong = false;\n      state.code = false;\n      state.strikethrough = false;\n\n      if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n        state.taskList = true;\n      }\n      state.f = state.inline;\n      if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n      return getType(state);\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n      state.quote = 0;\n      state.fencedEndRE = new RegExp(match[1] + \"+ *$\");\n      // try switching mode\n      state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2]);\n      if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n      state.f = state.block = local;\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      state.code = -1\n      return getType(state);\n    // SETEXT has lowest block-scope precedence after HR, so check it after\n    //  the others (code, blockquote, list...)\n    } else if (\n      // if setext set, indicates line after ---/===\n      state.setext || (\n        // line before ---/===\n        (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false &&\n        !state.code && !isHr && !linkDefRE.test(stream.string) &&\n        (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))\n      )\n    ) {\n      if ( !state.setext ) {\n        state.header = match[0].charAt(0) == '=' ? 1 : 2;\n        state.setext = state.header;\n      } else {\n        state.header = state.setext;\n        // has no effect on type so we can reset it now\n        state.setext = 0;\n        stream.skipToEnd();\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      }\n      state.thisLine.header = true;\n      state.f = state.inline;\n      return getType(state);\n    } else if (isHr) {\n      stream.skipToEnd();\n      state.hr = true;\n      state.thisLine.hr = true;\n      return tokenTypes.hr;\n    } else if (stream.peek() === '[') {\n      return switchInline(stream, state, footnoteLink);\n    }\n\n    return switchInline(stream, state, state.inline);\n  }\n\n  function htmlBlock(stream, state) {\n    var style = htmlMode.token(stream, state.htmlState);\n    if (!htmlModeMissing) {\n      var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n      if ((inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n           (!inner.state.context && inner.state.tokenize.isInText)) ||\n          (state.md_inside && stream.current().indexOf(\">\") > -1)) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    return style;\n  }\n\n  function local(stream, state) {\n    var currListInd = state.listStack[state.listStack.length - 1] || 0;\n    var hasExitedList = state.indentation < currListInd;\n    var maxFencedEndInd = currListInd + 3;\n    if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      var returnType;\n      if (!hasExitedList) returnType = getType(state)\n      state.localMode = state.localState = null;\n      state.block = blockNormal;\n      state.f = inlineNormal;\n      state.fencedEndRE = null;\n      state.code = 0\n      state.thisLine.fencedCodeEnd = true;\n      if (hasExitedList) return switchBlock(stream, state, state.block);\n      return returnType;\n    } else if (state.localMode) {\n      return state.localMode.token(stream, state.localState);\n    } else {\n      stream.skipToEnd();\n      return tokenTypes.code;\n    }\n  }\n\n  // Inline\n  function getType(state) {\n    var styles = [];\n\n    if (state.formatting) {\n      styles.push(tokenTypes.formatting);\n\n      if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n      for (var i = 0; i < state.formatting.length; i++) {\n        styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n        if (state.formatting[i] === \"header\") {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n        }\n\n        // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n        // Add `error` instead if the maximum blockquote nesting depth is passed\n        if (state.formatting[i] === \"quote\") {\n          if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n          } else {\n            styles.push(\"error\");\n          }\n        }\n      }\n    }\n\n    if (state.taskOpen) {\n      styles.push(\"meta\");\n      return styles.length ? styles.join(' ') : null;\n    }\n    if (state.taskClosed) {\n      styles.push(\"property\");\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    if (state.linkHref) {\n      styles.push(tokenTypes.linkHref, \"url\");\n    } else { // Only apply inline styles to non-url text\n      if (state.strong) { styles.push(tokenTypes.strong); }\n      if (state.em) { styles.push(tokenTypes.em); }\n      if (state.strikethrough) { styles.push(tokenTypes.strikethrough); }\n      if (state.emoji) { styles.push(tokenTypes.emoji); }\n      if (state.linkText) { styles.push(tokenTypes.linkText); }\n      if (state.code) { styles.push(tokenTypes.code); }\n      if (state.image) { styles.push(tokenTypes.image); }\n      if (state.imageAltText) { styles.push(tokenTypes.imageAltText, \"link\"); }\n      if (state.imageMarker) { styles.push(tokenTypes.imageMarker); }\n    }\n\n    if (state.header) { styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header); }\n\n    if (state.quote) {\n      styles.push(tokenTypes.quote);\n\n      // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n      if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n        styles.push(tokenTypes.quote + \"-\" + state.quote);\n      } else {\n        styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n      }\n    }\n\n    if (state.list !== false) {\n      var listMod = (state.listStack.length - 1) % 3;\n      if (!listMod) {\n        styles.push(tokenTypes.list1);\n      } else if (listMod === 1) {\n        styles.push(tokenTypes.list2);\n      } else {\n        styles.push(tokenTypes.list3);\n      }\n    }\n\n    if (state.trailingSpaceNewLine) {\n      styles.push(\"trailing-space-new-line\");\n    } else if (state.trailingSpace) {\n      styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n    }\n\n    return styles.length ? styles.join(' ') : null;\n  }\n\n  function handleText(stream, state) {\n    if (stream.match(textRE, true)) {\n      return getType(state);\n    }\n    return undefined;\n  }\n\n  function inlineNormal(stream, state) {\n    var style = state.text(stream, state);\n    if (typeof style !== 'undefined')\n      return style;\n\n    if (state.list) { // List marker (*, +, -, 1., etc)\n      state.list = null;\n      return getType(state);\n    }\n\n    if (state.taskList) {\n      var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n      if (taskOpen) state.taskOpen = true;\n      else state.taskClosed = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"task\";\n      state.taskList = false;\n      return getType(state);\n    }\n\n    state.taskOpen = false;\n    state.taskClosed = false;\n\n    if (state.header && stream.match(/^#+$/, true)) {\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      return getType(state);\n    }\n\n    var ch = stream.next();\n\n    // Matches link titles present on next line\n    if (state.linkTitle) {\n      state.linkTitle = false;\n      var matchCh = ch;\n      if (ch === '(') {\n        matchCh = ')';\n      }\n      matchCh = (matchCh+'').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n      var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n      if (stream.match(new RegExp(regex), true)) {\n        return tokenTypes.linkHref;\n      }\n    }\n\n    // If this block is changed, it may need to be updated in GFM mode\n    if (ch === '`') {\n      var previousFormatting = state.formatting;\n      if (modeCfg.highlightFormatting) state.formatting = \"code\";\n      stream.eatWhile('`');\n      var count = stream.current().length\n      if (state.code == 0 && (!state.quote || count == 1)) {\n        state.code = count\n        return getType(state)\n      } else if (count == state.code) { // Must be exact\n        var t = getType(state)\n        state.code = 0\n        return t\n      } else {\n        state.formatting = previousFormatting\n        return getType(state)\n      }\n    } else if (state.code) {\n      return getType(state);\n    }\n\n    if (ch === '\\\\') {\n      stream.next();\n      if (modeCfg.highlightFormatting) {\n        var type = getType(state);\n        var formattingEscape = tokenTypes.formatting + \"-escape\";\n        return type ? type + \" \" + formattingEscape : formattingEscape;\n      }\n    }\n\n    if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n      state.imageMarker = true;\n      state.image = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n      state.imageMarker = false;\n      state.imageAltText = true\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.imageAltText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      var type = getType(state);\n      state.imageAltText = false;\n      state.image = false;\n      state.inline = state.f = linkHref;\n      return type;\n    }\n\n    if (ch === '[' && !state.image) {\n      if (state.linkText && stream.match(/^.*?\\]/)) return getType(state)\n      state.linkText = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.linkText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      state.linkText = false;\n      state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal\n      return type;\n    }\n\n    if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkEmail;\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n      var end = stream.string.indexOf(\">\", stream.pos);\n      if (end != -1) {\n        var atts = stream.string.substring(stream.start, end);\n        if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n      }\n      stream.backUp(1);\n      state.htmlState = CodeMirror.startState(htmlMode);\n      return switchBlock(stream, state, htmlBlock);\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n      state.md_inside = false;\n      return \"tag\";\n    } else if (ch === \"*\" || ch === \"_\") {\n      var len = 1, before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2)\n      while (len < 3 && stream.eat(ch)) len++\n      var after = stream.peek() || \" \"\n      // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n      var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before))\n      var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after))\n      var setEm = null, setStrong = null\n      if (len % 2) { // Em\n        if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setEm = true\n        else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setEm = false\n      }\n      if (len > 1) { // Strong\n        if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setStrong = true\n        else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setStrong = false\n      }\n      if (setStrong != null || setEm != null) {\n        if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\"\n        if (setEm === true) state.em = ch\n        if (setStrong === true) state.strong = ch\n        var t = getType(state)\n        if (setEm === false) state.em = false\n        if (setStrong === false) state.strong = false\n        return t\n      }\n    } else if (ch === ' ') {\n      if (stream.eat('*') || stream.eat('_')) { // Probably surrounded by spaces\n        if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n          return getType(state);\n        } else { // Not surrounded by spaces, back up pointer\n          stream.backUp(1);\n        }\n      }\n    }\n\n    if (modeCfg.strikethrough) {\n      if (ch === '~' && stream.eatWhile(ch)) {\n        if (state.strikethrough) {// Remove strikethrough\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          var t = getType(state);\n          state.strikethrough = false;\n          return t;\n        } else if (stream.match(/^[^\\s]/, false)) {// Add strikethrough\n          state.strikethrough = true;\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          return getType(state);\n        }\n      } else if (ch === ' ') {\n        if (stream.match(/^~~/, true)) { // Probably surrounded by space\n          if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n            return getType(state);\n          } else { // Not surrounded by spaces, back up pointer\n            stream.backUp(2);\n          }\n        }\n      }\n    }\n\n    if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n      state.emoji = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n      var retType = getType(state);\n      state.emoji = false;\n      return retType;\n    }\n\n    if (ch === ' ') {\n      if (stream.match(/^ +$/, false)) {\n        state.trailingSpace++;\n      } else if (state.trailingSpace) {\n        state.trailingSpaceNewLine = true;\n      }\n    }\n\n    return getType(state);\n  }\n\n  function linkInline(stream, state) {\n    var ch = stream.next();\n\n    if (ch === \">\") {\n      state.f = state.inline = inlineNormal;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    stream.match(/^[^>]+/, true);\n\n    return tokenTypes.linkInline;\n  }\n\n  function linkHref(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    var ch = stream.next();\n    if (ch === '(' || ch === '[') {\n      state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n      if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n      state.linkHref = true;\n      return getType(state);\n    }\n    return 'error';\n  }\n\n  var linkRE = {\n    \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n    \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n  }\n\n  function getLinkHrefInside(endChar) {\n    return function(stream, state) {\n      var ch = stream.next();\n\n      if (ch === endChar) {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        var returnState = getType(state);\n        state.linkHref = false;\n        return returnState;\n      }\n\n      stream.match(linkRE[endChar])\n      state.linkHref = true;\n      return getType(state);\n    };\n  }\n\n  function footnoteLink(stream, state) {\n    if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n      state.f = footnoteLinkInside;\n      stream.next(); // Consume [\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      state.linkText = true;\n      return getType(state);\n    }\n    return switchInline(stream, state, inlineNormal);\n  }\n\n  function footnoteLinkInside(stream, state) {\n    if (stream.match(/^\\]:/, true)) {\n      state.f = state.inline = footnoteUrl;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var returnType = getType(state);\n      state.linkText = false;\n      return returnType;\n    }\n\n    stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n\n    return tokenTypes.linkText;\n  }\n\n  function footnoteUrl(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    // Match URL\n    stream.match(/^[^\\s]+/, true);\n    // Check for link title\n    if (stream.peek() === undefined) { // End of line, set flag to check next line\n      state.linkTitle = true;\n    } else { // More content on line, check if link title\n      stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\\\\\|\\\\.)+\"|'(?:[^'\\\\]|\\\\\\\\|\\\\.)+'|\\((?:[^)\\\\]|\\\\\\\\|\\\\.)+\\)))?/, true);\n    }\n    state.f = state.inline = inlineNormal;\n    return tokenTypes.linkHref + \" url\";\n  }\n\n  var mode = {\n    startState: function() {\n      return {\n        f: blockNormal,\n\n        prevLine: {stream: null},\n        thisLine: {stream: null},\n\n        block: blockNormal,\n        htmlState: null,\n        indentation: 0,\n\n        inline: inlineNormal,\n        text: handleText,\n\n        formatting: false,\n        linkText: false,\n        linkHref: false,\n        linkTitle: false,\n        code: 0,\n        em: false,\n        strong: false,\n        header: 0,\n        setext: 0,\n        hr: false,\n        taskList: false,\n        list: false,\n        listStack: [],\n        quote: 0,\n        trailingSpace: 0,\n        trailingSpaceNewLine: false,\n        strikethrough: false,\n        emoji: false,\n        fencedEndRE: null\n      };\n    },\n\n    copyState: function(s) {\n      return {\n        f: s.f,\n\n        prevLine: s.prevLine,\n        thisLine: s.thisLine,\n\n        block: s.block,\n        htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n        indentation: s.indentation,\n\n        localMode: s.localMode,\n        localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n\n        inline: s.inline,\n        text: s.text,\n        formatting: false,\n        linkText: s.linkText,\n        linkTitle: s.linkTitle,\n        linkHref: s.linkHref,\n        code: s.code,\n        em: s.em,\n        strong: s.strong,\n        strikethrough: s.strikethrough,\n        emoji: s.emoji,\n        header: s.header,\n        setext: s.setext,\n        hr: s.hr,\n        taskList: s.taskList,\n        list: s.list,\n        listStack: s.listStack.slice(0),\n        quote: s.quote,\n        indentedCode: s.indentedCode,\n        trailingSpace: s.trailingSpace,\n        trailingSpaceNewLine: s.trailingSpaceNewLine,\n        md_inside: s.md_inside,\n        fencedEndRE: s.fencedEndRE\n      };\n    },\n\n    token: function(stream, state) {\n\n      // Reset state.formatting\n      state.formatting = false;\n\n      if (stream != state.thisLine.stream) {\n        state.header = 0;\n        state.hr = false;\n\n        if (stream.match(/^\\s*$/, true)) {\n          blankLine(state);\n          return null;\n        }\n\n        state.prevLine = state.thisLine\n        state.thisLine = {stream: stream}\n\n        // Reset state.taskList\n        state.taskList = false;\n\n        // Reset state.trailingSpace\n        state.trailingSpace = 0;\n        state.trailingSpaceNewLine = false;\n\n        if (!state.localState) {\n          state.f = state.block;\n          if (state.f != htmlBlock) {\n            var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n            state.indentation = indentation;\n            state.indentationDiff = null;\n            if (indentation > 0) return null;\n          }\n        }\n      }\n      return state.f(stream, state);\n    },\n\n    innerMode: function(state) {\n      if (state.block == htmlBlock) return {state: state.htmlState, mode: htmlMode};\n      if (state.localState) return {state: state.localState, mode: state.localMode};\n      return {state: state, mode: mode};\n    },\n\n    indent: function(state, textAfter, line) {\n      if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line)\n      if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line)\n      return CodeMirror.Pass\n    },\n\n    blankLine: blankLine,\n\n    getType: getType,\n\n    blockCommentStart: \"<!--\",\n    blockCommentEnd: \"-->\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"markdown\"\n  };\n  return mode;\n}, \"xml\");\n\nCodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n\nCodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n\n});\n"]},"metadata":{},"sourceType":"script"}