{"ast":null,"code":"var _this = this;\n\nimport * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport * as SqlWeb from \"sqlweb\";\nimport { Query } from \"sqlweb\";\nimport CryptoJS from 'crypto-js';\nimport { SECRET_KEY } from '../Constants.js';\nimport { func } from 'prop-types'; // This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\n\nJsStore.useSqlWeb(SqlWeb);\nexport var idbCon = new JsStore.Instance();\nexport var dbname = 'fasp';\n\nvar getDatabase = function getDatabase() {\n  var tblStudent = {\n    name: 'programData',\n    columns: {\n      id: {\n        primaryKey: true\n      },\n      programId: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      },\n      version: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      },\n      programName: {\n        notNull: true,\n        dataType: DATA_TYPE.String\n      },\n      programData: {\n        dataType: DATA_TYPE.String,\n        notNull: true\n      },\n      userId: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      }\n    }\n  };\n  var dataBase = {\n    name: dbname,\n    tables: [tblStudent]\n  };\n  return dataBase;\n};\n\nexport var getDbQuery = function getDbQuery() {\n  var db = \"DEFINE DB fasp;\";\n  var tblStudentQry = \"DEFINE TABLE programData(\\n        id PRIMARYKEY,\\n        programId NUMBER NOTNULL ,\\n        version NOTNULL NUMBER,\\n        programName NOTNULL STRING,\\n        programData STRING NOTNULL,\\n        userId NUMBER NOTNULL\\n    )\";\n  var dbCreatequery = db + tblStudentQry;\n  return dbCreatequery;\n};\nexport var initJsStore = function initJsStore() {\n  var qry = getDbQuery();\n  console.log(\"this\", _this);\n  idbCon.runSql(qry).then(function () {\n    console.log('db initiated');\n  }).catch(function (ex) {\n    console.error(ex);\n  });\n};\nexport function saveProgram(programJson) {\n  for (var i = 0; i < programJson.length; i++) {\n    var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(programJson[i]), SECRET_KEY);\n    var programName = CryptoJS.AES.encrypt(JSON.stringify(programJson[i].label), SECRET_KEY);\n    var qry = new Query(\"insert into programData \\n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\\n    \");\n    qry.map(\"@id\", programJson[i].programId + \"_v\" + programJson[i].programVersion + \"_uId_\" + 1);\n    qry.map(\"@programId\", programJson[i].programId);\n    qry.map(\"@version\", programJson[i].programVersion);\n    qry.map(\"@programName\", programName.toString());\n    qry.map(\"@programData\", encryptedText.toString());\n    qry.map(\"@userId\", 1);\n    idbCon.runSql(qry);\n  }\n\n  return 1;\n}\nexport function checkIfProgramExists(programIds) {\n  var qry = new Query(\"select * from programData where id In (\".concat(programIds, \")\"));\n  return idbCon.runSql(qry);\n}\nexport function getProgramDataList() {\n  var userId = 1;\n  var qry = new Query(\"select * from programData where userId=\".concat(userId));\n  return idbCon.runSql(qry);\n}","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/CommonComponent/JsStoreFunctions.js"],"names":["JsStore","IDataBase","DATA_TYPE","ITable","SqlWeb","Query","CryptoJS","SECRET_KEY","func","useSqlWeb","idbCon","Instance","dbname","getDatabase","tblStudent","name","columns","id","primaryKey","programId","notNull","dataType","Number","version","programName","String","programData","userId","dataBase","tables","getDbQuery","db","tblStudentQry","dbCreatequery","initJsStore","qry","console","log","runSql","then","catch","ex","error","saveProgram","programJson","i","length","encryptedText","AES","encrypt","JSON","stringify","label","map","programVersion","toString","checkIfProgramExists","programIds","getProgramDataList"],"mappings":"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","sourcesContent":["import * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport * as SqlWeb from \"sqlweb\";\nimport {\n    Query\n} from \"sqlweb\";\nimport CryptoJS from 'crypto-js'\nimport { SECRET_KEY } from '../Constants.js'\nimport { func } from 'prop-types';\n// This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\nJsStore.useSqlWeb(SqlWeb);\nexport const idbCon = new JsStore.Instance();\nexport const dbname = 'fasp';\n\nconst getDatabase = () => {\n    const tblStudent = {\n        name: 'programData',\n        columns: {\n            id: {\n                primaryKey: true\n            },\n            programId: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            },\n            version: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            },\n            programName: {\n                notNull: true,\n                dataType: DATA_TYPE.String\n            },\n            programData: {\n                dataType: DATA_TYPE.String,\n                notNull: true\n            },\n            userId: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            }\n        }\n    };\n    const dataBase = {\n        name: dbname,\n        tables: [tblStudent]\n    };\n    return dataBase;\n};\n\nexport const getDbQuery = () => {\n    const db = `DEFINE DB fasp;`;\n    const tblStudentQry = `DEFINE TABLE programData(\n        id PRIMARYKEY,\n        programId NUMBER NOTNULL ,\n        version NOTNULL NUMBER,\n        programName NOTNULL STRING,\n        programData STRING NOTNULL,\n        userId NUMBER NOTNULL\n    )`\n    const dbCreatequery = db + tblStudentQry;\n    return dbCreatequery;\n}\n\nexport const initJsStore = () => {\n    const qry = getDbQuery();\n    console.log(\"this\", this);\n    idbCon.runSql(qry).then(function () {\n        console.log('db initiated');\n    }).catch(function (ex) {\n        console.error(ex);\n    })\n};\n\nexport function saveProgram(programJson) {\n    for (var i = 0; i < programJson.length; i++) {\n        var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(programJson[i]), SECRET_KEY);\n        var programName = CryptoJS.AES.encrypt(JSON.stringify(programJson[i].label), SECRET_KEY);\n        const qry = new Query(`insert into programData \n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n    `);\n        qry.map(\"@id\", programJson[i].programId + \"_v\" + programJson[i].programVersion + \"_uId_\" + 1);\n        qry.map(\"@programId\", programJson[i].programId);\n        qry.map(\"@version\", programJson[i].programVersion);\n        qry.map(\"@programName\", programName.toString());\n        qry.map(\"@programData\", encryptedText.toString());\n        qry.map(\"@userId\", 1);\n        idbCon.runSql(qry);\n    }\n    return 1;\n}\n\nexport function checkIfProgramExists(programIds) {\n    const qry = new Query(`select * from programData where id In (${programIds})`);\n    return idbCon.runSql(qry);\n}\n\nexport function getProgramDataList(){\n    var userId=1;\n    const qry = new Query(`select * from programData where userId=${userId}`);\n    return idbCon.runSql(qry);\n}"]},"metadata":{},"sourceType":"module"}