{"ast":null,"code":"import _classCallCheck from \"/home/altius/Documents/FASP/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/Documents/FASP/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/Documents/FASP/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/Documents/FASP/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/Documents/FASP/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/Documents/FASP/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/Documents/FASP/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/Documents/FASP/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/Documents/FASP/fasp-core-ui/src/views/HealthArea/AddHealthArea.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css'; // React select\n\nimport states from '../Forms/AdvancedForms/data/states';\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.min.css';\nimport HealthAreaService from \"../../api/HealthAreaService\";\nimport CountryService from \"../../api/CountryService\";\nvar initialValues = {\n  realmId: [],\n  countryId: [],\n  healthAreaName: \"\"\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    realmId: Yup.string().required('Please select realm.'),\n    countryId: Yup.string().required('Please select country'),\n    healthAreaName: Yup.string().required('Please enter health area')\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar onSubmit = function onSubmit(values, _ref) {\n  var setSubmitting = _ref.setSubmitting,\n      setErrors = _ref.setErrors;\n  console.log(\"submit called---\", values);\n  setTimeout(function () {\n    alert(JSON.stringify(values, null, 2)); // console.log('User has been successfully saved!', values)\n\n    setSubmitting(false);\n  }, 2000);\n};\n\nvar AddHealthArea = /*#__PURE__*/function (_Component) {\n  _inherits(AddHealthArea, _Component);\n\n  function AddHealthArea(props) {\n    var _this;\n\n    _classCallCheck(this, AddHealthArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddHealthArea).call(this, props));\n    _this.state = {\n      countries: [],\n      realms: [],\n      healthArea: {\n        label: {},\n        realm: {},\n        realmCountryArray: {}\n      },\n      selCountries: [],\n      message: ''\n    };\n    _this.submitClicked = _this.submitClicked.bind(_assertThisInitialized(_this));\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    _this.dataChange = _this.dataChange.bind(_assertThisInitialized(_this));\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.getCountryListByRealmId = _this.getCountryListByRealmId.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(AddHealthArea, [{\n    key: \"handleChange\",\n    value: function handleChange(values) {\n      console.log(\"handle change called===\", values);\n    }\n  }, {\n    key: \"dataChange\",\n    value: function dataChange(event) {\n      console.log(\"handle change called===\", event.target.name);\n      console.log(\"handle change called===\", event.target.value);\n      console.log(\"length---\" + event.target.options.length);\n\n      for (var i = 0, len = event.target.options.length; i < len; i++) {\n        // opt = event.target.options[i];\n        if (event.target.options[i].selected) {\n          console.log(\"value----\", event.target.options[i].value);\n        }\n      } // const { name, value } = event.target;\n      // this.setState({\n      //   [name]: value,\n      // });\n\n\n      console.log(\"handle change works\");\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        realmId: true,\n        countryId: true,\n        healthAreaName: true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('simpleForm', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      CountryService.getRealmCountryList().then(function (response) {\n        console.log(\"country list---\", response.data);\n\n        _this2.setState({\n          countries: response.data\n        });\n      }).catch(function (error) {\n        switch (error.message) {\n          case \"Network Error\":\n            _this2.setState({\n              message: error.message\n            });\n\n            break;\n\n          default:\n            _this2.setState({\n              message: error.response.data.message\n            });\n\n            break;\n        }\n      });\n      HealthAreaService.getRealmList().then(function (response) {\n        console.log(\"realm list---\", response.data);\n\n        _this2.setState({\n          realms: response.data\n        });\n      }).catch(function (error) {\n        switch (error.message) {\n          case \"Network Error\":\n            _this2.setState({\n              message: error.message\n            });\n\n            break;\n\n          default:\n            _this2.setState({\n              message: error.response.data.message\n            });\n\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var selCountries = this.state.selCountries;\n      var realms = this.state.realms;\n      var realmList = realms.length > 0 && realms.map(function (item, i) {\n        return React.createElement(\"option\", {\n          key: i,\n          value: item.realmId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, item.label.label_en);\n      }, this);\n      var countryList = selCountries.length > 0 && selCountries.map(function (item, i) {\n        return React.createElement(\"option\", {\n          key: i,\n          value: item.realmCountryId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }, item.country.label.label_en);\n      }, this);\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"Add Health Area\"), ' '), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(Formik, {\n        initialValues: initialValues,\n        validate: validate(validationSchema),\n        onSubmit: onSubmit,\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"simpleForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 226\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 227\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"realmId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 228\n            },\n            __self: this\n          }, \"Realm\"), React.createElement(Input, {\n            type: \"select\",\n            name: \"realmId\",\n            id: \"realmId\",\n            bsSize: \"lg\",\n            valid: !errors.realmId,\n            invalid: touched.realmId && !!errors.realmId,\n            onChange: function onChange(event) {\n              _this3.handleChange(event);\n\n              _this3.dataChange(event);\n            },\n            onBlur: handleBlur,\n            required: true,\n            value: values.realmId,\n            multiple: false,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 229\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"0\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 245\n            },\n            __self: this\n          }, \"Please select\"), realmList), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 248\n            },\n            __self: this\n          }, errors.realmId)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 250\n            },\n            __self: this\n          }, React.createElement(Label, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 251\n            },\n            __self: this\n          }, \"Country\"), React.createElement(Input, {\n            type: \"select\",\n            name: \"countryId\",\n            id: \"countryId\",\n            bsSize: \"lg\",\n            valid: !errors.countryId,\n            invalid: touched.countryId && !!errors.countryId,\n            onChange: function onChange(event) {\n              _this3.handleChange(event);\n\n              _this3.dataChange(event);\n            },\n            onBlur: handleBlur,\n            required: true,\n            multiple: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 252\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"0\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 267\n            },\n            __self: this\n          }, \"Please select\"), realmList), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270\n            },\n            __self: this\n          }, errors.countryId)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"healthArea\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 273\n            },\n            __self: this\n          }, \"Health Area\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"healthAreaName\",\n            id: \"healthAreaName\",\n            valid: !errors.healthAreaName,\n            invalid: touched.healthAreaName && !!errors.healthAreaName,\n            onChange: handleChange,\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 282\n            },\n            __self: this\n          }, errors.healthAreaName)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 285\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"submit\",\n            color: \"success\",\n            className: \"mr-1\",\n            onClick: function onClick() {\n              return _this3.touchAll(setTouched, errors);\n            },\n            disabled: !isValid,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 287\n            },\n            __self: this\n          }, \"Submit\"), React.createElement(Button, {\n            type: \"reset\",\n            color: \"danger\",\n            className: \"mr-1\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 288\n            },\n            __self: this\n          }, \"Cancel\")));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      })), React.createElement(CardFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"getCountryListByRealmId\",\n    value: function getCountryListByRealmId(event) {\n      var realmId = event.target.value;\n      var selCountries = this.state.countries.filter(function (c) {\n        return c.realm.realmId == realmId;\n      });\n      this.setState({\n        selCountries: selCountries\n      });\n    }\n  }, {\n    key: \"submitClicked\",\n    value: function submitClicked() {// if (navigator.onLine) {\n      //   if (AuthenticationService.checkTypeOfSession()) {\n      //     if ($(\"#healthAreaForm\").valid()) {\n      //       HealthAreaService.addHealthArea(this.state.healthArea)\n      //         .then(response => {\n      //           if (response.data.message != \"Failed\") {\n      //             this.props.history.push(`/healthAreaList/${response.data.message}`)\n      //           } else {\n      //             this.setState({\n      //               message: response.data.message\n      //             })\n      //           }\n      //         })\n      //         .catch(\n      //           error => {\n      //             switch (error.message) {\n      //               case \"Network Error\":\n      //                 this.setState({\n      //                   message: error.message\n      //                 })\n      //                 break\n      //               default:\n      //                 this.setState({\n      //                   message: error.response.data.message\n      //                 })\n      //                 break\n      //             }\n      //           }\n      //         );\n      //     }\n      //   } else {\n      //     alert(\"You can't change your session from online to offline or vice versa.\");\n      //   }\n      // } else {\n      //   alert(\"You must be Online.\")\n      // }\n    }\n  }, {\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/healthAreaList/\" + \"Action Canceled\");\n    }\n  }]);\n\n  return AddHealthArea;\n}(Component);\n\nexport default AddHealthArea;","map":{"version":3,"sources":["/home/altius/Documents/FASP/fasp-core-ui/src/views/HealthArea/AddHealthArea.js"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","FormText","InputGroup","InputGroupAddon","InputGroupText","Formik","Yup","states","Select","HealthAreaService","CountryService","initialValues","realmId","countryId","healthAreaName","validationSchema","values","object","shape","string","required","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","onSubmit","setSubmitting","setErrors","console","log","setTimeout","alert","JSON","stringify","AddHealthArea","props","state","countries","realms","healthArea","label","realm","realmCountryArray","selCountries","message","submitClicked","bind","cancelClicked","dataChange","handleChange","getCountryListByRealmId","event","target","name","value","options","length","i","len","selected","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","focus","getRealmCountryList","then","response","data","setState","catch","getRealmList","realmList","map","item","label_en","countryList","realmCountryId","country","flexBasis","touched","handleBlur","handleSubmit","isSubmitting","isValid","touchAll","filter","c","history","push"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\n// React select\nimport states from '../Forms/AdvancedForms/data/states';\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.min.css';\n\nimport HealthAreaService from \"../../api/HealthAreaService\";\nimport CountryService from \"../../api/CountryService\";\n\nconst initialValues = {\n  realmId: [],\n  countryId: [],\n  healthAreaName: \"\"\n}\n\nconst validationSchema = function (values) {\n  return Yup.object().shape({\n    realmId: Yup.string()\n      .required('Please select realm.'),\n    countryId: Yup.string()\n      .required('Please select country'),\n    healthAreaName: Yup.string()\n      .required('Please enter health area')\n  })\n}\n\nconst validate = (getValidationSchema) => {\n  return (values) => {\n    const validationSchema = getValidationSchema(values)\n    try {\n      validationSchema.validateSync(values, { abortEarly: false })\n      return {}\n    } catch (error) {\n      return getErrorsFromValidationError(error)\n    }\n  }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n  const FIRST_ERROR = 0\n  return validationError.inner.reduce((errors, error) => {\n    return {\n      ...errors,\n      [error.path]: error.errors[FIRST_ERROR],\n    }\n  }, {})\n}\n\nconst onSubmit = (values, { setSubmitting, setErrors }) => {\n  console.log(\"submit called---\",values);\n  setTimeout(() => {\n    alert(JSON.stringify(values, null, 2))\n    // console.log('User has been successfully saved!', values)\n    setSubmitting(false)\n  }, 2000)\n}\n\nclass AddHealthArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: [],\n      realms: [],\n      healthArea: {\n        label: {\n\n        },\n        realm: {\n\n        },\n        realmCountryArray: {\n\n        }\n      },\n      selCountries: [],\n      message: ''\n    }\n    this.submitClicked = this.submitClicked.bind(this);\n    this.cancelClicked = this.cancelClicked.bind(this);\n    this.dataChange = this.dataChange.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.getCountryListByRealmId = this.getCountryListByRealmId.bind(this);\n  }\n  handleChange(values) {\n    console.log(\"handle change called===\" , values);\n  }\n  dataChange(event) {\n    console.log(\"handle change called===\" , event.target.name);\n    console.log(\"handle change called===\" , event.target.value);\n    console.log(\"length---\"+event.target.options.length);\n    for (let i = 0, len = event.target.options.length; i < len; i++) {\n      // opt = event.target.options[i];\n\n      if (event.target.options[i].selected) {\n          console.log(\"value----\",event.target.options[i].value);\n      }\n  }\n    // const { name, value } = event.target;\n    // this.setState({\n    //   [name]: value,\n    // });\n    console.log(\"handle change works\");\n  };\n\n  touchAll(setTouched, errors) {\n    setTouched({\n      realmId: true,\n      countryId: true,\n      healthAreaName: true\n    }\n    )\n    this.validateForm(errors)\n  }\n  validateForm(errors) {\n    this.findFirstError('simpleForm', (fieldName) => {\n      return Boolean(errors[fieldName])\n    })\n  }\n  findFirstError(formName, hasError) {\n    const form = document.forms[formName]\n    for (let i = 0; i < form.length; i++) {\n      if (hasError(form[i].name)) {\n        form[i].focus()\n        break\n      }\n    }\n  }\n\n  componentDidMount() {\n    CountryService.getRealmCountryList()\n      .then(response => {\n        console.log(\"country list---\", response.data);\n        this.setState({\n          countries: response.data\n        })\n      }).catch(\n        error => {\n          switch (error.message) {\n            case \"Network Error\":\n              this.setState({\n                message: error.message\n              })\n              break\n            default:\n              this.setState({\n                message: error.response.data.message\n              })\n              break\n          }\n        }\n      );\n    HealthAreaService.getRealmList()\n      .then(response => {\n        console.log(\"realm list---\", response.data);\n        this.setState({\n          realms: response.data\n        })\n      }).catch(\n        error => {\n          switch (error.message) {\n            case \"Network Error\":\n              this.setState({\n                message: error.message\n              })\n              break\n            default:\n              this.setState({\n                message: error.response.data.message\n              })\n              break\n          }\n        }\n      );\n  }\n\n  render() {\n    const { selCountries } = this.state;\n    const { realms } = this.state;\n\n    let realmList = realms.length > 0\n      && realms.map((item, i) => {\n        return (\n          <option key={i} value={item.realmId}>\n            {item.label.label_en}\n          </option>\n        )\n      }, this);\n\n    let countryList = selCountries.length > 0\n      && selCountries.map((item, i) => {\n        return (\n          <option key={i} value={item.realmCountryId}>\n            {item.country.label.label_en}\n          </option>\n        )\n      }, this);\n    return (\n      <div className=\"animated fadeIn\">\n        <Row>\n          <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n            <Card>\n              <CardHeader>\n                <i className=\"icon-note\"></i><strong>Add Health Area</strong>{' '}\n              </CardHeader>\n              <CardBody>\n                <Formik\n                  initialValues={initialValues}\n                  validate={validate(validationSchema)}\n                  onSubmit={onSubmit}\n                  render={\n                    ({\n                      values,\n                      errors,\n                      touched,\n                      handleChange,\n                      handleBlur,\n                      handleSubmit,\n                      isSubmitting,\n                      isValid,\n                      setTouched\n                    }) => (\n                        <Form onSubmit={handleSubmit} noValidate name='simpleForm'>\n                          <FormGroup>\n                            <Label htmlFor=\"realmId\">Realm</Label>\n                            <Input\n                              type=\"select\"\n                              name=\"realmId\"\n                              id=\"realmId\"\n                              bsSize=\"lg\"\n                              valid={!errors.realmId}\n                              invalid={touched.realmId && !!errors.realmId}\n                              onChange={(event) => {\n                                this.handleChange(event);\n                                this.dataChange(event);\n                            }}\n                              onBlur={handleBlur}\n                              required\n                              value={values.realmId}\n                              multiple={false}\n                            >\n                              <option value=\"0\">Please select</option>\n                              {realmList}\n                            </Input>\n                            <FormFeedback>{errors.realmId}</FormFeedback>\n                          </FormGroup>\n                          <FormGroup>\n                            <Label>Country</Label>\n                            <Input\n                              type=\"select\"\n                              name=\"countryId\"\n                              id=\"countryId\"\n                              bsSize=\"lg\"\n                              valid={!errors.countryId}\n                              invalid={touched.countryId && !!errors.countryId}\n                              onChange={(event) => {\n                                this.handleChange(event);\n                                this.dataChange(event);\n                            }}\n                              onBlur={handleBlur}\n                              required\n                              multiple\n                            >\n                              <option value=\"0\">Please select</option>\n                              {realmList}\n                            </Input>\n                            <FormFeedback>{errors.countryId}</FormFeedback>\n                          </FormGroup>\n                          <FormGroup>\n                            <Label for=\"healthArea\">Health Area</Label>\n                            <Input type=\"text\"\n                              name=\"healthAreaName\"\n                              id=\"healthAreaName\"\n                              valid={!errors.healthAreaName}\n                              invalid={touched.healthAreaName && !!errors.healthAreaName}\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              required />\n                            <FormFeedback>{errors.healthAreaName}</FormFeedback>\n                          </FormGroup>\n\n                          <FormGroup>\n                            {/* <Button type=\"submit\" color=\"primary\" className=\"mr-1\" disabled={isSubmitting || !isValid}>{isSubmitting ? 'Wait...' : 'Submit'}</Button> */}\n                            <Button type=\"submit\" color=\"success\" className=\"mr-1\" onClick={() => this.touchAll(setTouched, errors)} disabled={!isValid}>Submit</Button>\n                            <Button type=\"reset\" color=\"danger\" className=\"mr-1\">Cancel</Button>\n                          </FormGroup>\n                        </Form>\n                      )} />\n              </CardBody>\n              <CardFooter>\n                {/* <Button type=\"submit\" size=\"md\" color=\"primary\"><i className=\"fa fa-dot-circle-o\"></i> Submit</Button> */}\n                {/* <Button type=\"reset\" size=\"md\" color=\"danger\"><i className=\"fa fa-ban\"></i> Cancel</Button> */}\n              </CardFooter>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n  getCountryListByRealmId(event) {\n    let realmId = event.target.value;\n    const selCountries = this.state.countries.filter(c => c.realm.realmId == realmId)\n    this.setState({\n      selCountries: selCountries\n    });\n  }\n  submitClicked() {\n    // if (navigator.onLine) {\n    //   if (AuthenticationService.checkTypeOfSession()) {\n    //     if ($(\"#healthAreaForm\").valid()) {\n    //       HealthAreaService.addHealthArea(this.state.healthArea)\n    //         .then(response => {\n    //           if (response.data.message != \"Failed\") {\n    //             this.props.history.push(`/healthAreaList/${response.data.message}`)\n    //           } else {\n    //             this.setState({\n    //               message: response.data.message\n    //             })\n    //           }\n    //         })\n    //         .catch(\n    //           error => {\n    //             switch (error.message) {\n    //               case \"Network Error\":\n    //                 this.setState({\n    //                   message: error.message\n    //                 })\n    //                 break\n    //               default:\n    //                 this.setState({\n    //                   message: error.response.data.message\n    //                 })\n    //                 break\n    //             }\n    //           }\n    //         );\n    //     }\n    //   } else {\n    //     alert(\"You can't change your session from online to offline or vice versa.\");\n    //   }\n    // } else {\n    //   alert(\"You must be Online.\")\n    // }\n  }\n  cancelClicked() {\n    this.props.history.push(`/healthAreaList/` + \"Action Canceled\")\n  }\n}\n\nexport default AddHealthArea;\n"]},"metadata":{},"sourceType":"module"}