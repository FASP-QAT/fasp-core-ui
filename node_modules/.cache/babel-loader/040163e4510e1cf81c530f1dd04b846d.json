{"ast":null,"code":"var baseSlice = require('./_baseSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\n\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\n\nfunction chunk(array, size, guard) {\n  if (guard ? isIterateeCall(array, size, guard) : size === undefined) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n\n  var length = array == null ? 0 : array.length;\n\n  if (!length || size < 1) {\n    return [];\n  }\n\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, index += size);\n  }\n\n  return result;\n}\n\nmodule.exports = chunk;","map":{"version":3,"sources":["/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/lodash/chunk.js"],"names":["baseSlice","require","isIterateeCall","toInteger","nativeCeil","Math","ceil","nativeMax","max","chunk","array","size","guard","undefined","length","index","resIndex","result","Array","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;AAAA,IACIC,cAAc,GAAGD,OAAO,CAAC,mBAAD,CAD5B;AAAA,IAEIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAFvB;AAIA;;;AACA,IAAIG,UAAU,GAAGC,IAAI,CAACC,IAAtB;AAAA,IACIC,SAAS,GAAGF,IAAI,CAACG,GADrB;AAGA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4BC,KAA5B,EAAmC;AACjC,MAAKA,KAAK,GAAGV,cAAc,CAACQ,KAAD,EAAQC,IAAR,EAAcC,KAAd,CAAjB,GAAwCD,IAAI,KAAKE,SAA3D,EAAuE;AACrEF,IAAAA,IAAI,GAAG,CAAP;AACD,GAFD,MAEO;AACLA,IAAAA,IAAI,GAAGJ,SAAS,CAACJ,SAAS,CAACQ,IAAD,CAAV,EAAkB,CAAlB,CAAhB;AACD;;AACD,MAAIG,MAAM,GAAGJ,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAAK,CAACI,MAAvC;;AACA,MAAI,CAACA,MAAD,IAAWH,IAAI,GAAG,CAAtB,EAAyB;AACvB,WAAO,EAAP;AACD;;AACD,MAAII,KAAK,GAAG,CAAZ;AAAA,MACIC,QAAQ,GAAG,CADf;AAAA,MAEIC,MAAM,GAAGC,KAAK,CAACd,UAAU,CAACU,MAAM,GAAGH,IAAV,CAAX,CAFlB;;AAIA,SAAOI,KAAK,GAAGD,MAAf,EAAuB;AACrBG,IAAAA,MAAM,CAACD,QAAQ,EAAT,CAAN,GAAqBhB,SAAS,CAACU,KAAD,EAAQK,KAAR,EAAgBA,KAAK,IAAIJ,IAAzB,CAA9B;AACD;;AACD,SAAOM,MAAP;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBX,KAAjB","sourcesContent":["var baseSlice = require('./_baseSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeCeil = Math.ceil,\n    nativeMax = Math.max;\n\n/**\n * Creates an array of elements split into groups the length of `size`.\n * If `array` can't be split evenly, the final chunk will be the remaining\n * elements.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to process.\n * @param {number} [size=1] The length of each chunk\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the new array of chunks.\n * @example\n *\n * _.chunk(['a', 'b', 'c', 'd'], 2);\n * // => [['a', 'b'], ['c', 'd']]\n *\n * _.chunk(['a', 'b', 'c', 'd'], 3);\n * // => [['a', 'b', 'c'], ['d']]\n */\nfunction chunk(array, size, guard) {\n  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {\n    size = 1;\n  } else {\n    size = nativeMax(toInteger(size), 0);\n  }\n  var length = array == null ? 0 : array.length;\n  if (!length || size < 1) {\n    return [];\n  }\n  var index = 0,\n      resIndex = 0,\n      result = Array(nativeCeil(length / size));\n\n  while (index < length) {\n    result[resIndex++] = baseSlice(array, index, (index += size));\n  }\n  return result;\n}\n\nmodule.exports = chunk;\n"]},"metadata":{},"sourceType":"script"}