{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // This function takes an array of styles and separates them into styles that\n// are handled by Aphrodite and inline styles.\n\nfunction separateStyles(stylesArray) {\n  var classNames = []; // Since determining if an Object is empty requires collecting all of its\n  // keys, and we want the best performance in this code because we are in the\n  // render path, we are going to do a little bookkeeping ourselves.\n\n  var hasInlineStyles = false;\n  var inlineStyles = {}; // This is run on potentially every node in the tree when rendering, where\n  // performance is critical. Normally we would prefer using `forEach`, but\n  // old-fashioned for loops are faster so that's what we have chosen here.\n\n  for (var i = 0; i < stylesArray.length; i++) {\n    // eslint-disable-line no-plusplus\n    var style = stylesArray[i]; // If this  style is falsy, we just want to disregard it. This allows for\n    // syntax like:\n    //\n    //   css(isFoo && styles.foo)\n\n    if (style) {\n      if (typeof style === 'string') {\n        classNames.push(style);\n      } else {\n        Object.assign(inlineStyles, style);\n        hasInlineStyles = true;\n      }\n    }\n  }\n\n  return {\n    classNames: classNames,\n    hasInlineStyles: hasInlineStyles,\n    inlineStyles: inlineStyles\n  };\n}\n\nexports['default'] = separateStyles;","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/node_modules/react-with-styles-interface-css/dist/utils/separateStyles.js"],"names":["Object","defineProperty","exports","value","separateStyles","stylesArray","classNames","hasInlineStyles","inlineStyles","i","length","style","push","assign"],"mappings":"AAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C,E,CAGA;AACA;;AACA,SAASC,cAAT,CAAwBC,WAAxB,EAAqC;AACnC,MAAIC,UAAU,GAAG,EAAjB,CADmC,CAGnC;AACA;AACA;;AACA,MAAIC,eAAe,GAAG,KAAtB;AACA,MAAIC,YAAY,GAAG,EAAnB,CAPmC,CASnC;AACA;AACA;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,WAAW,CAACK,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C;AACA,QAAIE,KAAK,GAAGN,WAAW,CAACI,CAAD,CAAvB,CAF2C,CAI3C;AACA;AACA;AACA;;AACA,QAAIE,KAAJ,EAAW;AACT,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7BL,QAAAA,UAAU,CAACM,IAAX,CAAgBD,KAAhB;AACD,OAFD,MAEO;AACLX,QAAAA,MAAM,CAACa,MAAP,CAAcL,YAAd,EAA4BG,KAA5B;AACAJ,QAAAA,eAAe,GAAG,IAAlB;AACD;AACF;AACF;;AAED,SAAO;AACLD,IAAAA,UAAU,EAAEA,UADP;AAELC,IAAAA,eAAe,EAAEA,eAFZ;AAGLC,IAAAA,YAAY,EAAEA;AAHT,GAAP;AAKD;;AAEDN,OAAO,CAAC,SAAD,CAAP,GAAqBE,cAArB","sourcesContent":["Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// This function takes an array of styles and separates them into styles that\n// are handled by Aphrodite and inline styles.\nfunction separateStyles(stylesArray) {\n  var classNames = [];\n\n  // Since determining if an Object is empty requires collecting all of its\n  // keys, and we want the best performance in this code because we are in the\n  // render path, we are going to do a little bookkeeping ourselves.\n  var hasInlineStyles = false;\n  var inlineStyles = {};\n\n  // This is run on potentially every node in the tree when rendering, where\n  // performance is critical. Normally we would prefer using `forEach`, but\n  // old-fashioned for loops are faster so that's what we have chosen here.\n  for (var i = 0; i < stylesArray.length; i++) {\n    // eslint-disable-line no-plusplus\n    var style = stylesArray[i];\n\n    // If this  style is falsy, we just want to disregard it. This allows for\n    // syntax like:\n    //\n    //   css(isFoo && styles.foo)\n    if (style) {\n      if (typeof style === 'string') {\n        classNames.push(style);\n      } else {\n        Object.assign(inlineStyles, style);\n        hasInlineStyles = true;\n      }\n    }\n  }\n\n  return {\n    classNames: classNames,\n    hasInlineStyles: hasInlineStyles,\n    inlineStyles: inlineStyles\n  };\n}\n\nexports['default'] = separateStyles;"]},"metadata":{},"sourceType":"script"}