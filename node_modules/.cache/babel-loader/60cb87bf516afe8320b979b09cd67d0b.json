{"ast":null,"code":"/*!\n * @license :jsstore - V3.7.6 - 09/03/2020\n * https://github.com/ujjwalguptaofficial/JsStore\n * Copyright (c) 2020 @Ujjwal Gupta; Licensed MIT\n */\nmodule.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId]) {\n      /******/\n      return installedModules[moduleId].exports;\n      /******/\n    }\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n\n    var module = installedModules[moduleId] = {\n      /******/\n      i: moduleId,\n\n      /******/\n      l: false,\n\n      /******/\n      exports: {}\n      /******/\n\n    };\n    /******/\n\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.l = true;\n    /******/\n\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n\n  /******/\n\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n\n  /******/\n  // define getter function for harmony exports\n\n  /******/\n\n  __webpack_require__.d = function (exports, name, getter) {\n    /******/\n    if (!__webpack_require__.o(exports, name)) {\n      /******/\n      Object.defineProperty(exports, name, {\n        enumerable: true,\n        get: getter\n      });\n      /******/\n    }\n    /******/\n\n  };\n  /******/\n\n  /******/\n  // define __esModule on exports\n\n  /******/\n\n\n  __webpack_require__.r = function (exports) {\n    /******/\n    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n      /******/\n      Object.defineProperty(exports, Symbol.toStringTag, {\n        value: 'Module'\n      });\n      /******/\n    }\n    /******/\n\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    /******/\n  };\n  /******/\n\n  /******/\n  // create a fake namespace object\n\n  /******/\n  // mode & 1: value is a module id, require it\n\n  /******/\n  // mode & 2: merge all properties of value into the ns\n\n  /******/\n  // mode & 4: return value when already ns object\n\n  /******/\n  // mode & 8|1: behave like require\n\n  /******/\n\n\n  __webpack_require__.t = function (value, mode) {\n    /******/\n    if (mode & 1) value = __webpack_require__(value);\n    /******/\n\n    if (mode & 8) return value;\n    /******/\n\n    if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n    /******/\n\n    var ns = Object.create(null);\n    /******/\n\n    __webpack_require__.r(ns);\n    /******/\n\n\n    Object.defineProperty(ns, 'default', {\n      enumerable: true,\n      value: value\n    });\n    /******/\n\n    if (mode & 2 && typeof value != 'string') for (var key in value) {\n      __webpack_require__.d(ns, key, function (key) {\n        return value[key];\n      }.bind(null, key));\n    }\n    /******/\n\n    return ns;\n    /******/\n  };\n  /******/\n\n  /******/\n  // getDefaultExport function for compatibility with non-harmony modules\n\n  /******/\n\n\n  __webpack_require__.n = function (module) {\n    /******/\n    var getter = module && module.__esModule ?\n    /******/\n    function getDefault() {\n      return module['default'];\n    } :\n    /******/\n    function getModuleExports() {\n      return module;\n    };\n    /******/\n\n    __webpack_require__.d(getter, 'a', getter);\n    /******/\n\n\n    return getter;\n    /******/\n  };\n  /******/\n\n  /******/\n  // Object.prototype.hasOwnProperty.call\n\n  /******/\n\n\n  __webpack_require__.o = function (object, property) {\n    return Object.prototype.hasOwnProperty.call(object, property);\n  };\n  /******/\n\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n\n  __webpack_require__.p = \"\";\n  /******/\n\n  /******/\n\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(__webpack_require__.s = 1);\n  /******/\n}(\n/************************************************************************/\n\n/******/\n[,\n/* 0 */\n\n/* 1 */\n\n/***/\nfunction (module, __webpack_exports__, __webpack_require__) {\n  \"use strict\";\n\n  __webpack_require__.r(__webpack_exports__); // CONCATENATED MODULE: ./src/common/enums.ts\n\n\n  var ERROR_TYPE;\n\n  (function (ERROR_TYPE) {\n    ERROR_TYPE[\"WorkerNotSupplied\"] = \"worker_not_supplied\";\n    ERROR_TYPE[\"IndexedDbUndefined\"] = \"indexeddb_undefined\";\n    ERROR_TYPE[\"UndefinedColumn\"] = \"undefined_column\";\n    ERROR_TYPE[\"UndefinedValue\"] = \"undefined_value\";\n    ERROR_TYPE[\"UndefinedColumnName\"] = \"undefined_column_name\";\n    ERROR_TYPE[\"UndefinedDbName\"] = \"undefined_database_name\";\n    ERROR_TYPE[\"UndefinedColumnValue\"] = \"undefined_column_value\";\n    ERROR_TYPE[\"NotArray\"] = \"not_array\";\n    ERROR_TYPE[\"NoValueSupplied\"] = \"no_value_supplied\";\n    ERROR_TYPE[\"ColumnNotExist\"] = \"column_not_exist\";\n    ERROR_TYPE[\"EnableSearchOff\"] = \"enable_search_off\";\n    ERROR_TYPE[\"InvalidOp\"] = \"invalid_operator\";\n    ERROR_TYPE[\"NullValue\"] = \"null_value\";\n    ERROR_TYPE[\"WrongDataType\"] = \"wrong_data_type\";\n    ERROR_TYPE[\"TableNotExist\"] = \"table_not_exist\";\n    ERROR_TYPE[\"DbNotExist\"] = \"db_not_exist\";\n    ERROR_TYPE[\"ConnectionAborted\"] = \"connection_aborted\";\n    ERROR_TYPE[\"ConnectionClosed\"] = \"connection_closed\";\n    ERROR_TYPE[\"NotObject\"] = \"not_object\";\n    ERROR_TYPE[\"InvalidConfig\"] = \"invalid_config\";\n    ERROR_TYPE[\"DbBlocked\"] = \"Db_blocked\";\n    ERROR_TYPE[\"IndexedDbNotSupported\"] = \"indexeddb_not_supported\";\n    ERROR_TYPE[\"NullValueInWhere\"] = \"null_value_in_where\";\n    ERROR_TYPE[\"InvalidJoinQuery\"] = \"invalid_join_query\";\n    ERROR_TYPE[\"InvalidOrderQuery\"] = \"invalid_order_query\";\n    ERROR_TYPE[\"InvalidQuery\"] = \"invalid_query\";\n    ERROR_TYPE[\"InvalidGroupQuery\"] = \"invalid_group_query\";\n  })(ERROR_TYPE || (ERROR_TYPE = {}));\n\n  var WORKER_STATUS;\n\n  (function (WORKER_STATUS) {\n    WORKER_STATUS[\"Registered\"] = \"registerd\";\n    WORKER_STATUS[\"Failed\"] = \"failed\";\n    WORKER_STATUS[\"NotStarted\"] = \"not_started\";\n  })(WORKER_STATUS || (WORKER_STATUS = {}));\n\n  var DATA_TYPE;\n\n  (function (DATA_TYPE) {\n    DATA_TYPE[\"String\"] = \"string\";\n    DATA_TYPE[\"Object\"] = \"object\";\n    DATA_TYPE[\"Array\"] = \"array\";\n    DATA_TYPE[\"Number\"] = \"number\";\n    DATA_TYPE[\"Boolean\"] = \"boolean\";\n    DATA_TYPE[\"Null\"] = \"null\";\n    DATA_TYPE[\"DateTime\"] = \"date_time\";\n  })(DATA_TYPE || (DATA_TYPE = {}));\n\n  var API;\n\n  (function (API) {\n    API[\"InitDb\"] = \"init_db\";\n    API[\"IsDbExist\"] = \"is_db_exist\";\n    API[\"GetDbVersion\"] = \"get_db_version\";\n    API[\"GetDbList\"] = \"get_db_list\";\n    API[\"Get\"] = \"get\";\n    API[\"Set\"] = \"set\";\n    API[\"Select\"] = \"select\";\n    API[\"Insert\"] = \"insert\";\n    API[\"Update\"] = \"update\";\n    API[\"Remove\"] = \"remove\";\n    API[\"GetDbSchema\"] = \"get_db_schema\";\n    API[\"OpenDb\"] = \"open_db\";\n    API[\"Clear\"] = \"clear\";\n    API[\"DropDb\"] = \"drop_db\";\n    API[\"Count\"] = \"count\";\n    API[\"ChangeLogStatus\"] = \"change_log_status\";\n    API[\"Terminate\"] = \"terminate\";\n    API[\"Transaction\"] = \"transaction\";\n    API[\"InitKeyStore\"] = \"init_keystore\";\n    API[\"CloseDb\"] = \"close_db\";\n    API[\"Union\"] = \"union\";\n  })(API || (API = {}));\n\n  var EVENT;\n\n  (function (EVENT) {\n    EVENT[\"RequestQueueEmpty\"] = \"requestQueueEmpty\";\n    EVENT[\"RequestQueueFilled\"] = \"requestQueueFilled\";\n  })(EVENT || (EVENT = {}));\n\n  var QUERY_OPTION;\n\n  (function (QUERY_OPTION) {\n    QUERY_OPTION[\"Where\"] = \"where\";\n    QUERY_OPTION[\"Like\"] = \"like\";\n    QUERY_OPTION[\"Regex\"] = \"regex\";\n    QUERY_OPTION[\"In\"] = \"in\";\n    QUERY_OPTION[\"Equal\"] = \"=\";\n    QUERY_OPTION[\"Between\"] = \"-\";\n    QUERY_OPTION[\"GreaterThan\"] = \">\";\n    QUERY_OPTION[\"LessThan\"] = \"<\";\n    QUERY_OPTION[\"GreaterThanEqualTo\"] = \">=\";\n    QUERY_OPTION[\"LessThanEqualTo\"] = \"<=\";\n    QUERY_OPTION[\"NotEqualTo\"] = \"!=\";\n    QUERY_OPTION[\"Aggregate\"] = \"aggregate\";\n    QUERY_OPTION[\"Max\"] = \"max\";\n    QUERY_OPTION[\"Min\"] = \"min\";\n    QUERY_OPTION[\"Avg\"] = \"avg\";\n    QUERY_OPTION[\"Count\"] = \"count\";\n    QUERY_OPTION[\"Sum\"] = \"sum\";\n    QUERY_OPTION[\"Or\"] = \"or\";\n    QUERY_OPTION[\"Skip\"] = \"skip\";\n    QUERY_OPTION[\"Limit\"] = \"limit\";\n    QUERY_OPTION[\"And\"] = \"and\";\n    QUERY_OPTION[\"IgnoreCase\"] = \"ignoreCase\";\n    QUERY_OPTION[\"Then\"] = \"then\";\n  })(QUERY_OPTION || (QUERY_OPTION = {}));\n\n  var IDB_MODE;\n\n  (function (IDB_MODE) {\n    IDB_MODE[\"ReadOnly\"] = \"readonly\";\n    IDB_MODE[\"ReadWrite\"] = \"readwrite\";\n  })(IDB_MODE || (IDB_MODE = {}));\n\n  var OCCURENCE;\n\n  (function (OCCURENCE) {\n    OCCURENCE[\"First\"] = \"f\";\n    OCCURENCE[\"Last\"] = \"l\";\n    OCCURENCE[\"Any\"] = \"a\";\n  })(OCCURENCE || (OCCURENCE = {}));\n\n  var CONNECTION_STATUS;\n\n  (function (CONNECTION_STATUS) {\n    CONNECTION_STATUS[\"Connected\"] = \"connected\";\n    CONNECTION_STATUS[\"Closed\"] = \"closed\";\n    CONNECTION_STATUS[\"NotStarted\"] = \"not_started\";\n    CONNECTION_STATUS[\"UnableToStart\"] = \"unable_to_start\";\n    CONNECTION_STATUS[\"ClosedByJsStore\"] = \"closed_by_jsstore\";\n  })(CONNECTION_STATUS || (CONNECTION_STATUS = {})); // CONCATENATED MODULE: ./src/main/config.ts\n\n\n  var Config =\n  /** @class */\n  function () {\n    function Config() {}\n\n    Config.isLogEnabled = false;\n    Config.isRuningInWorker = true;\n    return Config;\n  }(); // CONCATENATED MODULE: ./src/main/log_helper.ts\n\n\n  var log_helper_LogHelper =\n  /** @class */\n  function () {\n    function LogHelper(type, info) {\n      if (info === void 0) {\n        info = null;\n      }\n\n      this.type = type;\n      this._info = info;\n      this.message = this.getMsg();\n    }\n\n    LogHelper.prototype.throw = function () {\n      throw this.get();\n    };\n\n    LogHelper.log = function (msg) {\n      if (Config.isLogEnabled) {\n        console.log(msg);\n      }\n    };\n\n    LogHelper.prototype.logError = function () {\n      console.error(this.get());\n    };\n\n    LogHelper.prototype.logWarning = function () {\n      console.warn(this.get());\n    };\n\n    LogHelper.prototype.get = function () {\n      return {\n        message: this.message,\n        type: this.type\n      };\n    };\n\n    LogHelper.prototype.getMsg = function () {\n      var errMsg;\n\n      switch (this.type) {\n        case ERROR_TYPE.WorkerNotSupplied:\n          errMsg = \"Worker object is not passed in instance constructor\";\n          break;\n\n        case ERROR_TYPE.IndexedDbUndefined:\n          errMsg = \"Browser does not support indexeddb\";\n          break;\n\n        default:\n          errMsg = this.message;\n          break;\n      }\n\n      return errMsg;\n    };\n\n    return LogHelper;\n  }(); // CONCATENATED MODULE: ./src/main/connection_helper.ts\n\n\n  var connection_helper_ConnectionHelper =\n  /** @class */\n  function () {\n    function ConnectionHelper(worker) {\n      this.isDbOpened_ = false;\n      this.isDbIdle_ = true;\n      this.requestQueue_ = [];\n      this.isCodeExecuting_ = false;\n      this.inactivityTimer_ = -1000;\n      this.eventQueue = []; // these apis have special permissions. These apis dont wait for database open.\n\n      this.whiteListApi_ = [API.InitDb, API.IsDbExist, API.GetDbVersion, API.GetDbList, API.OpenDb, API.GetDbSchema, API.Get, API.Set, API.ChangeLogStatus, API.Terminate, API.InitKeyStore];\n\n      if (worker) {\n        this.worker_ = worker;\n        this.worker_.onmessage = this.onMessageFromWorker_.bind(this);\n      } else {\n        Config.isRuningInWorker = false;\n      }\n    }\n\n    ConnectionHelper.prototype.initKeyStore_ = function () {\n      if (Config.isRuningInWorker) {\n        this.prcoessExecutionOfQry_({\n          name: API.InitKeyStore,\n          onSuccess: function onSuccess() {},\n          onError: function onError(err) {\n            console.error(err);\n          }\n        }, 0);\n      } else {\n        JsStoreWorker.KeyStore.init();\n      }\n    };\n\n    ConnectionHelper.prototype.onMessageFromWorker_ = function (msg) {\n      this.processFinishedQuery_(msg.data);\n    };\n\n    ConnectionHelper.prototype.processFinishedQuery_ = function (message) {\n      var finishedRequest = this.requestQueue_.shift();\n\n      if (finishedRequest) {\n        log_helper_LogHelper.log(\"request \" + finishedRequest.name + \" finished\");\n\n        if (message.errorOccured) {\n          finishedRequest.onError(message.errorDetails);\n        } else {\n          switch (finishedRequest.name) {\n            case API.OpenDb:\n            case API.InitDb:\n              this.isDbOpened_ = true;\n              break;\n\n            case API.Terminate:\n              this.isDbOpened_ = false;\n\n              if (Config.isRuningInWorker === true) {\n                this.worker_.terminate();\n              }\n\n              break;\n\n            case API.CloseDb:\n              if (this.requestQueue_.length > 0) {\n                this.openDb_();\n              } else {\n                this.isDbIdle_ = true;\n                this.callEvent(EVENT.RequestQueueEmpty, []);\n              }\n\n              break;\n          }\n\n          finishedRequest.onSuccess(message.returnedValue);\n        }\n\n        this.isCodeExecuting_ = false;\n        this.executeQry_();\n      }\n    };\n\n    ConnectionHelper.prototype.openDb_ = function () {\n      this.initKeyStore_();\n      this.prcoessExecutionOfQry_({\n        name: API.OpenDb,\n        query: this.activeDbName,\n        onSuccess: function onSuccess() {},\n        onError: function onError(err) {\n          console.error(err);\n        }\n      }, 1);\n    };\n\n    ConnectionHelper.prototype.pushApi = function (request) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        request.onSuccess = function (result) {\n          resolve(result);\n        };\n\n        request.onError = function (error) {\n          reject(error);\n        };\n\n        if (_this.requestQueue_.length === 0) {\n          _this.callEvent(EVENT.RequestQueueFilled, []);\n\n          if (_this.isDbIdle_ === true && _this.isDbOpened_ === true) {\n            _this.openDb_();\n          } else {\n            clearTimeout(_this.inactivityTimer_);\n\n            _this.initKeyStore_();\n          }\n        }\n\n        _this.prcoessExecutionOfQry_(request);\n      });\n    };\n\n    ConnectionHelper.prototype.prcoessExecutionOfQry_ = function (request, index) {\n      this.isDbIdle_ = false;\n\n      if (index != null) {\n        this.requestQueue_.splice(index, 0, request);\n      } else {\n        this.requestQueue_.push(request);\n      }\n\n      log_helper_LogHelper.log(\"request pushed: \" + request.name);\n      this.executeQry_();\n    };\n\n    ConnectionHelper.prototype.executeQry_ = function () {\n      var _this = this;\n\n      var requestQueueLength = this.requestQueue_.length;\n\n      if (!this.isCodeExecuting_ && requestQueueLength > 0) {\n        if (this.isDbOpened_ === true) {\n          this.sendRequestToWorker_(this.requestQueue_[0]);\n          return;\n        }\n\n        var allowedQueryIndex = this.requestQueue_.findIndex(function (item) {\n          return _this.whiteListApi_.indexOf(item.name) >= 0;\n        }); // shift allowed query to zeroth index\n\n        if (allowedQueryIndex >= 0) {\n          this.requestQueue_.splice(0, 0, this.requestQueue_.splice(allowedQueryIndex, 1)[0]);\n          this.sendRequestToWorker_(this.requestQueue_[0]);\n        }\n      } else if (requestQueueLength === 0 && this.isDbIdle_ === false && this.isDbOpened_) {\n        this.inactivityTimer_ = setTimeout(function () {\n          _this.prcoessExecutionOfQry_({\n            name: API.CloseDb,\n            onSuccess: function onSuccess() {},\n            onError: function onError(err) {\n              console.error(err);\n            }\n          });\n        }, 100);\n      }\n    };\n\n    ConnectionHelper.prototype.sendRequestToWorker_ = function (request) {\n      this.isCodeExecuting_ = true;\n      var requestForWorker = {\n        name: request.name,\n        query: request.query\n      };\n\n      if (Config.isRuningInWorker === true) {\n        this.worker_.postMessage(requestForWorker);\n      } else {\n        new JsStoreWorker.QueryExecutor(this.processFinishedQuery_.bind(this)).checkConnectionAndExecuteLogic(requestForWorker);\n      }\n    };\n\n    ConnectionHelper.prototype.callEvent = function (event, args) {\n      var events = this.eventQueue.filter(function (ev) {\n        if (ev.event === event) {\n          return ev;\n        }\n      });\n      events.forEach(function (ev) {\n        ev.callback.apply(ev, args);\n      });\n    };\n\n    return ConnectionHelper;\n  }(); // CONCATENATED MODULE: ./src/main/util.ts\n\n\n  var Util =\n  /** @class */\n  function () {\n    function Util() {}\n\n    Object.defineProperty(Util, \"sqlWeb\", {\n      get: function get() {\n        return Util.sqlWeb_ == null ? self['SqlWeb'] : Util.sqlWeb_;\n      },\n      set: function set(value) {\n        Util.sqlWeb_ = value;\n      },\n      enumerable: true,\n      configurable: true\n    });\n    return Util;\n  }(); // CONCATENATED MODULE: ./src/main/connection.ts\n\n\n  var __extends = undefined && undefined.__extends || function () {\n    var _extendStatics = function extendStatics(d, b) {\n      _extendStatics = Object.setPrototypeOf || {\n        __proto__: []\n      } instanceof Array && function (d, b) {\n        d.__proto__ = b;\n      } || function (d, b) {\n        for (var p in b) {\n          if (b.hasOwnProperty(p)) d[p] = b[p];\n        }\n      };\n\n      return _extendStatics(d, b);\n    };\n\n    return function (d, b) {\n      _extendStatics(d, b);\n\n      function __() {\n        this.constructor = d;\n      }\n\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n  }();\n\n  var connection_Connection =\n  /** @class */\n  function (_super) {\n    __extends(Connection, _super);\n\n    function Connection(worker) {\n      return _super.call(this, worker) || this;\n    }\n    /**\n     *  open database\n     *\n     * @param {string} dbName\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.openDb = function (dbName) {\n      this.activeDbName = dbName;\n      return this.pushApi({\n        name: API.OpenDb,\n        query: dbName\n      });\n    };\n    /**\n     * creates DataBase\n     *\n     * @param {IDataBase} dataBase\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.initDb = function (dataBase) {\n      this.activeDbName = dataBase.name;\n      return this.pushApi({\n        name: API.InitDb,\n        query: dataBase\n      });\n    };\n    /**\n     * drop dataBase\n     *\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.dropDb = function () {\n      return this.pushApi({\n        name: API.DropDb,\n        query: null\n      });\n    };\n    /**\n     * select data from table\n     *\n     * @template T\n     * @param {SelectQuery} query\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.select = function (query) {\n      return this.pushApi({\n        name: API.Select,\n        query: query\n      });\n    };\n    /**\n     * get no of record from table\n     *\n     * @param {CountQuery} query\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.count = function (query) {\n      return this.pushApi({\n        name: API.Count,\n        query: query\n      });\n    };\n    /**\n     * insert data into table\n     *\n     * @param {InsertQuery} query\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.insert = function (query) {\n      return this.pushApi({\n        name: API.Insert,\n        query: query\n      });\n    };\n    /**\n     * update data into table\n     *\n     * @param {UpdateQuery} query\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.update = function (query) {\n      return this.pushApi({\n        name: API.Update,\n        query: query\n      });\n    };\n    /**\n     * remove data from table\n     *\n     * @param {RemoveQuery} query\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.remove = function (query) {\n      return this.pushApi({\n        name: API.Remove,\n        query: query\n      });\n    };\n    /**\n     * delete all data from table\n     *\n     * @param {string} tableName\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.clear = function (tableName) {\n      return this.pushApi({\n        name: API.Clear,\n        query: tableName\n      });\n    };\n    /**\n     * set log status\n     *\n     * @param {boolean} status\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.setLogStatus = function (status) {\n      Config.isLogEnabled = status ? status : Config.isLogEnabled;\n      this.pushApi({\n        name: API.ChangeLogStatus,\n        query: Config.isLogEnabled\n      });\n    };\n    /**\n     * get version of database\n     *\n     * @param {(string | DbInfo)} dbName\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.getDbVersion = function (dbName) {\n      return this.pushApi({\n        name: API.GetDbVersion,\n        query: dbName\n      });\n    };\n    /**\n     * is database exist\n     *\n     * @param {(DbInfo | string)} dbInfo\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.isDbExist = function (dbInfo) {\n      return this.pushApi({\n        name: API.IsDbExist,\n        query: dbInfo\n      });\n    };\n    /**\n     * returns list of database created\n     *\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.getDbList = function () {\n      return this.pushApi({\n        name: API.GetDbList,\n        query: null\n      });\n    };\n    /**\n     * get Database Schema\n     *\n     * @param {string} dbName\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.getDbSchema = function (dbName) {\n      return this.pushApi({\n        name: API.GetDbSchema,\n        query: dbName\n      });\n    };\n    /**\n     * get the value from keystore table\n     *\n     * @param {string} key\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.get = function (key) {\n      return this.pushApi({\n        name: API.Get,\n        query: key\n      });\n    };\n    /**\n     * set the value in keystore table\n     *\n     * @param {string} key\n     * @param {*} value\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.set = function (key, value) {\n      return this.pushApi({\n        name: API.Set,\n        query: {\n          key: key,\n          value: value\n        }\n      });\n    };\n    /**\n     * terminate the connection\n     *\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.terminate = function () {\n      return this.pushApi({\n        name: API.Terminate,\n        query: null\n      });\n    };\n    /**\n     * execute the transaction\n     *\n     * @param {TranscationQuery} query\n     * @returns\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.transaction = function (query) {\n      if (Config.isRuningInWorker === true) {\n        query.logic = query.logic.toString();\n      }\n\n      return this.pushApi({\n        name: API.Transaction,\n        query: query\n      });\n    };\n    /**\n     * run sql code\n     *\n     * @param {(string | object)} query\n     * @returns {Promise<any>}\n     * @memberof Instance\n     */\n\n\n    Connection.prototype.runSql = function (query) {\n      var result = Util.sqlWeb.parseSql(query);\n      return this[result.api](result.data);\n    };\n\n    Connection.prototype.on = function (event, eventCallBack) {\n      this.eventQueue.push({\n        event: event,\n        callback: eventCallBack\n      });\n    };\n\n    Connection.prototype.off = function (event, eventCallBack) {\n      var _this = this;\n\n      var indexes = this.eventQueue.map(function (ev, i) {\n        if (ev.event === event) {\n          return i;\n        }\n      });\n      indexes.forEach(function (i) {\n        _this.eventQueue.splice(i, 0);\n      });\n    };\n\n    Connection.prototype.union = function (query) {\n      return this.pushApi({\n        name: API.Union,\n        query: query\n      });\n    };\n\n    return Connection;\n  }(connection_helper_ConnectionHelper); // CONCATENATED MODULE: ./src/main/instance.ts\n\n\n  var instance_Instance =\n  /** @class */\n  function () {\n    function Instance(worker) {\n      console.warn('Instance is obsolete, please use Connection. Refer - https://jsstore.net/tutorial/connection/');\n      return new connection_Connection(worker);\n    }\n\n    return Instance;\n  }(); // CONCATENATED MODULE: ./src/main/helper.ts\n\n  /**\n   * Enable log\n   *\n   */\n\n\n  var enableLog = function enableLog() {\n    Config.isLogEnabled = true;\n  }; // CONCATENATED MODULE: ./src/main/global.ts\n\n  /**\n   *\n   * supply sqlweb\n   * @param {*} value\n   */\n\n\n  var useSqlWeb = function useSqlWeb(value) {\n    Util.sqlWeb = value;\n  }; // CONCATENATED MODULE: ./src/main/index.ts\n\n  /* concated harmony reexport Instance */\n\n\n  __webpack_require__.d(__webpack_exports__, \"Instance\", function () {\n    return instance_Instance;\n  });\n  /* concated harmony reexport Connection */\n\n\n  __webpack_require__.d(__webpack_exports__, \"Connection\", function () {\n    return connection_Connection;\n  });\n  /* concated harmony reexport Config */\n\n\n  __webpack_require__.d(__webpack_exports__, \"Config\", function () {\n    return Config;\n  });\n  /* concated harmony reexport enableLog */\n\n\n  __webpack_require__.d(__webpack_exports__, \"enableLog\", function () {\n    return enableLog;\n  });\n  /* concated harmony reexport useSqlWeb */\n\n\n  __webpack_require__.d(__webpack_exports__, \"useSqlWeb\", function () {\n    return useSqlWeb;\n  });\n  /* concated harmony reexport DATA_TYPE */\n\n\n  __webpack_require__.d(__webpack_exports__, \"DATA_TYPE\", function () {\n    return DATA_TYPE;\n  });\n  /***/\n\n}\n/******/\n]);","map":{"version":3,"sources":["webpack://JsStore/webpack/bootstrap","webpack://JsStore/src/common/enums.ts","webpack://JsStore/src/main/config.ts","webpack://JsStore/src/main/log_helper.ts","webpack://JsStore/src/main/connection_helper.ts","webpack://JsStore/src/main/util.ts","webpack://JsStore/src/main/connection.ts","webpack://JsStore/src/main/instance.ts","webpack://JsStore/src/main/helper.ts","webpack://JsStore/src/main/global.ts","webpack://JsStore/src/main/index.ts"],"names":[],"mappings":"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","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export enum ERROR_TYPE {\n    WorkerNotSupplied = \"worker_not_supplied\",\n    IndexedDbUndefined = \"indexeddb_undefined\",\n    UndefinedColumn = \"undefined_column\",\n    UndefinedValue = \"undefined_value\",\n    UndefinedColumnName = \"undefined_column_name\",\n    UndefinedDbName = \"undefined_database_name\",\n    UndefinedColumnValue = \"undefined_column_value\",\n    NotArray = \"not_array\",\n    NoValueSupplied = \"no_value_supplied\",\n    ColumnNotExist = \"column_not_exist\",\n    EnableSearchOff = \"enable_search_off\",\n    InvalidOp = \"invalid_operator\",\n    NullValue = \"null_value\",\n    WrongDataType = \"wrong_data_type\",\n    TableNotExist = \"table_not_exist\",\n    DbNotExist = \"db_not_exist\",\n    ConnectionAborted = \"connection_aborted\",\n    ConnectionClosed = \"connection_closed\",\n    NotObject = \"not_object\",\n    InvalidConfig = \"invalid_config\",\n    DbBlocked = \"Db_blocked\",\n    IndexedDbNotSupported = \"indexeddb_not_supported\",\n    NullValueInWhere = \"null_value_in_where\",\n    InvalidJoinQuery = 'invalid_join_query',\n    InvalidOrderQuery = 'invalid_order_query',\n    InvalidQuery = 'invalid_query',\n    InvalidGroupQuery = 'invalid_group_query',\n}\n\nexport enum WORKER_STATUS {\n    Registered = \"registerd\",\n    Failed = \"failed\",\n    NotStarted = \"not_started\"\n}\n\nexport enum DATA_TYPE {\n    String = \"string\",\n    Object = \"object\",\n    Array = \"array\",\n    Number = \"number\",\n    Boolean = \"boolean\",\n    Null = \"null\",\n    DateTime = \"date_time\"\n}\n\nexport enum API {\n    InitDb = \"init_db\",\n    IsDbExist = \"is_db_exist\",\n    GetDbVersion = \"get_db_version\",\n    GetDbList = \"get_db_list\",\n    Get = \"get\",\n    Set = \"set\",\n    Select = \"select\",\n    Insert = \"insert\",\n    Update = \"update\",\n    Remove = \"remove\",\n    GetDbSchema = \"get_db_schema\",\n    OpenDb = \"open_db\",\n    Clear = \"clear\",\n    DropDb = \"drop_db\",\n    Count = \"count\",\n    ChangeLogStatus = \"change_log_status\",\n    Terminate = \"terminate\",\n    Transaction = \"transaction\",\n    InitKeyStore = \"init_keystore\",\n    CloseDb = \"close_db\",\n    Union = \"union\"\n}\n\nexport enum EVENT {\n    RequestQueueEmpty = \"requestQueueEmpty\",\n    RequestQueueFilled = \"requestQueueFilled\"\n}\n\nexport enum QUERY_OPTION {\n    Where = \"where\",\n    Like = 'like',\n    Regex = 'regex',\n    In = 'in',\n    Equal = \"=\",\n    Between = '-',\n    GreaterThan = '>',\n    LessThan = '<',\n    GreaterThanEqualTo = \">=\",\n    LessThanEqualTo = \"<=\",\n    NotEqualTo = \"!=\",\n    Aggregate = \"aggregate\",\n    Max = \"max\",\n    Min = \"min\",\n    Avg = \"avg\",\n    Count = \"count\",\n    Sum = \"sum\",\n    Or = \"or\",\n    Skip = \"skip\",\n    Limit = \"limit\",\n    And = \"and\",\n    IgnoreCase = \"ignoreCase\",\n    Then = \"then\"\n}\n\nexport enum IDB_MODE {\n    ReadOnly = \"readonly\",\n    ReadWrite = \"readwrite\"\n}\n\nexport enum OCCURENCE {\n    First = 'f',\n    Last = 'l',\n    Any = 'a'\n}\n\nexport enum CONNECTION_STATUS {\n    Connected = \"connected\",\n    Closed = \"closed\",\n    NotStarted = \"not_started\",\n    UnableToStart = \"unable_to_start\",\n    ClosedByJsStore = \"closed_by_jsstore\"\n}","export class Config {\n    static isLogEnabled = false;\n    static isRuningInWorker = true;\n}","\nimport { ERROR_TYPE, IError } from \"../common/index\";\nimport { Config } from \"./config\";\n\nexport class LogHelper implements IError {\n    type: ERROR_TYPE;\n    message: string;\n    private _info: any;\n\n    constructor(type: ERROR_TYPE, info: any = null) {\n        this.type = type;\n        this._info = info;\n        this.message = this.getMsg();\n    }\n\n    throw() {\n        throw this.get();\n    }\n\n    static log(msg) {\n        if (Config.isLogEnabled) {\n            console.log(msg);\n        }\n    }\n\n    logError() {\n        console.error(this.get());\n    }\n\n    logWarning() {\n        console.warn(this.get());\n    }\n\n    get() {\n        return {\n            message: this.message,\n            type: this.type\n        } as IError;\n    }\n\n    private getMsg() {\n        let errMsg: string;\n        switch (this.type) {\n            case ERROR_TYPE.WorkerNotSupplied:\n                errMsg = \"Worker object is not passed in instance constructor\";\n                break;\n            case ERROR_TYPE.IndexedDbUndefined:\n                errMsg = \"Browser does not support indexeddb\";\n                break;\n            default:\n                errMsg = this.message;\n                break;\n        }\n        return errMsg;\n    }\n}","import { LogHelper } from \"./log_helper\";\nimport { Config } from \"./config\";\nimport { WebWorkerRequest, EventQueue, API, WebWorkerResult, EVENT } from \"../common/index\";\n\ndeclare var JsStoreWorker;\nexport class ConnectionHelper {\n  protected activeDbName: string;\n  private worker_: Worker;\n  private isDbOpened_ = false;\n  private isDbIdle_ = true;\n  private requestQueue_: WebWorkerRequest[] = [];\n  private isCodeExecuting_ = false;\n\n  private inactivityTimer_ = -1000;\n\n  protected eventQueue: EventQueue[] = [];\n\n  // these apis have special permissions. These apis dont wait for database open.\n  private whiteListApi_ = [\n    API.InitDb,\n    API.IsDbExist,\n    API.GetDbVersion,\n    API.GetDbList,\n    API.OpenDb,\n    API.GetDbSchema,\n    API.Get,\n    API.Set,\n    API.ChangeLogStatus,\n    API.Terminate,\n    API.InitKeyStore\n  ];\n\n  constructor(worker?: Worker) {\n    if (worker) {\n      this.worker_ = worker;\n      this.worker_.onmessage = this.onMessageFromWorker_.bind(this);\n    } else {\n      Config.isRuningInWorker = false;\n    }\n  }\n\n  private initKeyStore_() {\n    if (Config.isRuningInWorker) {\n      this.prcoessExecutionOfQry_({\n        name: API.InitKeyStore,\n        onSuccess: function () {\n\n        },\n        onError: function (err) {\n          console.error(err);\n        }\n      }, 0);\n    }\n    else {\n      JsStoreWorker.KeyStore.init();\n    }\n\n  }\n\n  private onMessageFromWorker_(msg) {\n    this.processFinishedQuery_(msg.data);\n  }\n\n  private processFinishedQuery_(message: WebWorkerResult) {\n\n    const finishedRequest: WebWorkerRequest = this.requestQueue_.shift();\n    if (finishedRequest) {\n      LogHelper.log(`request ${finishedRequest.name} finished`);\n      if (message.errorOccured) {\n        finishedRequest.onError(message.errorDetails);\n      } else {\n        switch (finishedRequest.name) {\n          case API.OpenDb:\n          case API.InitDb:\n            this.isDbOpened_ = true; break;\n          case API.Terminate:\n            this.isDbOpened_ = false;\n            if (Config.isRuningInWorker === true) {\n              this.worker_.terminate();\n            }\n            break;\n          case API.CloseDb:\n            if (this.requestQueue_.length > 0) {\n              this.openDb_();\n            }\n            else {\n              this.isDbIdle_ = true;\n              this.callEvent(EVENT.RequestQueueEmpty, []);\n            }\n            break;\n        }\n        finishedRequest.onSuccess(message.returnedValue);\n      }\n      this.isCodeExecuting_ = false;\n      this.executeQry_();\n    }\n  }\n\n  private openDb_() {\n    this.initKeyStore_();\n    this.prcoessExecutionOfQry_({\n      name: API.OpenDb,\n      query: this.activeDbName,\n      onSuccess: function () {\n\n      },\n      onError: function (err) {\n        console.error(err);\n      }\n    }, 1);\n  }\n\n  protected pushApi<T>(request: WebWorkerRequest): Promise<T> {\n\n    return new Promise((resolve, reject) => {\n      request.onSuccess = result => {\n        resolve(result as T);\n      };\n      request.onError = error => {\n        reject(error);\n      };\n      if (this.requestQueue_.length === 0) {\n        this.callEvent(EVENT.RequestQueueFilled, []);\n        if (this.isDbIdle_ === true && this.isDbOpened_ === true) {\n          this.openDb_();\n        }\n        else {\n          clearTimeout(this.inactivityTimer_);\n          this.initKeyStore_();\n        }\n      }\n      this.prcoessExecutionOfQry_(request);\n    });\n  }\n\n  private prcoessExecutionOfQry_(request: WebWorkerRequest, index?: number) {\n    this.isDbIdle_ = false;\n    if (index != null) {\n      this.requestQueue_.splice(index, 0, request);\n    }\n    else {\n      this.requestQueue_.push(request);\n    }\n    LogHelper.log(\"request pushed: \" + request.name);\n    this.executeQry_();\n  }\n\n  private executeQry_() {\n    const requestQueueLength = this.requestQueue_.length;\n    if (!this.isCodeExecuting_ && requestQueueLength > 0) {\n      if (this.isDbOpened_ === true) {\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n        return;\n      }\n\n      const allowedQueryIndex = this.requestQueue_.findIndex(\n        item => this.whiteListApi_.indexOf(item.name) >= 0\n      );\n\n      // shift allowed query to zeroth index\n      if (allowedQueryIndex >= 0) {\n        this.requestQueue_.splice(\n          0,\n          0,\n          this.requestQueue_.splice(allowedQueryIndex, 1)[0]\n        );\n        this.sendRequestToWorker_(this.requestQueue_[0]);\n      }\n    }\n    else if (requestQueueLength === 0 && this.isDbIdle_ === false && this.isDbOpened_) {\n      this.inactivityTimer_ = setTimeout(() => {\n        this.prcoessExecutionOfQry_({\n          name: API.CloseDb,\n          onSuccess: function () {\n\n          },\n          onError: function (err) {\n            console.error(err);\n          }\n        });\n      }, 100) as any;\n    }\n  }\n\n  private sendRequestToWorker_(request: WebWorkerRequest) {\n    this.isCodeExecuting_ = true;\n    const requestForWorker = {\n      name: request.name,\n      query: request.query\n    } as WebWorkerRequest;\n    if (Config.isRuningInWorker === true) {\n      this.worker_.postMessage(requestForWorker);\n    }\n    else {\n      new JsStoreWorker.QueryExecutor(this.processFinishedQuery_.bind(this)).checkConnectionAndExecuteLogic(requestForWorker);\n    }\n\n  }\n\n  private callEvent(event: EVENT, args: any[]) {\n    const events = this.eventQueue.filter(function (ev) {\n      if (ev.event === event) {\n        return ev;\n      }\n    });\n    events.forEach(function (ev) {\n      ev.callback(...args);\n    });\n  }\n}\n","import { ISqlWeb } from \"../common/index\";\n\n \n\nexport class Util {\n    private static sqlWeb_: ISqlWeb;\n\n    static get sqlWeb() {\n        return Util.sqlWeb_ == null ? self['SqlWeb'] : Util.sqlWeb_;\n    }\n\n    static set sqlWeb(value) {\n        Util.sqlWeb_ = value;\n    }\n\n\n}","import { ConnectionHelper } from \"./connection_helper\";\nimport {\n    SelectQuery, CountQuery, InsertQuery, SetQuery,\n    UpdateQuery, RemoveQuery, DbInfo, TranscationQuery, API, IDataBase, EVENT\n} from \"../common/index\";\nimport { Config } from \"./config\";\nimport { Util } from \"./util\";\n\nexport class Connection extends ConnectionHelper {\n\n    constructor(worker?: Worker) {\n        super(worker);\n    }\n\n    /**\n     *  open database\n     * \n     * @param {string} dbName \n     * @returns \n     * @memberof Instance\n     */\n    openDb(dbName: string) {\n        this.activeDbName = dbName;\n        return this.pushApi<null>({\n            name: API.OpenDb,\n            query: dbName\n        });\n    }\n\n    /**\n     * creates DataBase\n     * \n     * @param {IDataBase} dataBase \n     * @returns \n     * @memberof Instance\n     */\n    initDb(dataBase: IDataBase) {\n        this.activeDbName = dataBase.name;\n        return this.pushApi<boolean>({\n            name: API.InitDb,\n            query: dataBase\n        });\n    }\n\n    /**\n     * drop dataBase\n     * \n     * @returns \n     * @memberof Instance\n     */\n    dropDb() {\n        return this.pushApi<null>({\n            name: API.DropDb,\n            query: null\n        });\n    }\n\n    /**\n     * select data from table\n     * \n     * @template T \n     * @param {SelectQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    select<T>(query: SelectQuery) {\n        return this.pushApi<T[]>({\n            name: API.Select,\n            query: query\n        });\n    }\n\n    /**\n     * get no of record from table\n     * \n     * @param {CountQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    count(query: CountQuery) {\n        return this.pushApi<number>({\n            name: API.Count,\n            query: query\n        });\n    }\n\n    /**\n     * insert data into table\n     * \n     * @param {InsertQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    insert<T>(query: InsertQuery) {\n        return this.pushApi<number | T[]>({\n            name: API.Insert,\n            query: query\n        });\n    }\n\n    /**\n     * update data into table\n     * \n     * @param {UpdateQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    update(query: UpdateQuery) {\n        return this.pushApi<number>({\n            name: API.Update,\n            query: query\n        });\n    }\n\n    /**\n     * remove data from table\n     * \n     * @param {RemoveQuery} query \n     * @returns \n     * @memberof Instance\n     */\n    remove(query: RemoveQuery) {\n        return this.pushApi<number>({\n            name: API.Remove,\n            query: query\n        });\n    }\n\n    /**\n     * delete all data from table\n     * \n     * @param {string} tableName \n     * @returns \n     * @memberof Instance\n     */\n    clear(tableName: string) {\n        return this.pushApi<null>({\n            name: API.Clear,\n            query: tableName\n        });\n    }\n\n    /**\n     * set log status\n     * \n     * @param {boolean} status \n     * @memberof Instance\n     */\n    setLogStatus(status: boolean) {\n        Config.isLogEnabled = status ? status : Config.isLogEnabled;\n        this.pushApi({\n            name: API.ChangeLogStatus,\n            query: Config.isLogEnabled\n        });\n    }\n\n    /**\n     * get version of database\n     * \n     * @param {(string | DbInfo)} dbName \n     * @returns \n     * @memberof Instance\n     */\n    getDbVersion(dbName: string | DbInfo) {\n        return this.pushApi<number>({\n            name: API.GetDbVersion,\n            query: dbName\n        });\n    }\n\n    /**\n     * is database exist\n     * \n     * @param {(DbInfo | string)} dbInfo \n     * @returns \n     * @memberof Instance\n     */\n    isDbExist(dbInfo: DbInfo | string) {\n        return this.pushApi<boolean>({\n            name: API.IsDbExist,\n            query: dbInfo\n        });\n    }\n\n    /**\n     * returns list of database created\n     * \n     * @returns \n     * @memberof Instance\n     */\n    getDbList() {\n        return this.pushApi<string[]>({\n            name: API.GetDbList,\n            query: null\n        });\n    }\n\n    /**\n     * get Database Schema\n     * \n     * @param {string} dbName \n     * @returns \n     * @memberof Instance\n     */\n    getDbSchema(dbName: string) {\n        return this.pushApi<IDataBase>({\n            name: API.GetDbSchema,\n            query: dbName\n        });\n    }\n\n    /**\n     * get the value from keystore table\n     * \n     * @param {string} key \n     * @returns \n     * @memberof Instance\n     */\n    get(key: string) {\n        return this.pushApi<any>({\n            name: API.Get,\n            query: key\n        });\n    }\n\n    /**\n     * set the value in keystore table \n     * \n     * @param {string} key \n     * @param {*} value \n     * @returns \n     * @memberof Instance\n     */\n    set(key: string, value: any) {\n        return this.pushApi<any>({\n            name: API.Set,\n            query: {\n                key: key, value: value\n            } as SetQuery\n        });\n    }\n\n    /**\n     * terminate the connection\n     *\n     * @returns\n     * @memberof Instance\n     */\n    terminate() {\n        return this.pushApi<void>({\n            name: API.Terminate,\n            query: null\n        });\n    }\n\n    /**\n     * execute the transaction\n     *\n     * @param {TranscationQuery} query\n     * @returns\n     * @memberof Instance\n     */\n    transaction(query: TranscationQuery) {\n        if (Config.isRuningInWorker === true) {\n            (query.logic as any) = query.logic.toString();\n        }\n        return this.pushApi<any>({\n            name: API.Transaction,\n            query: query\n        });\n    }\n\n    /**\n     * run sql code\n     *\n     * @param {(string | object)} query\n     * @returns {Promise<any>}\n     * @memberof Instance\n     */\n    runSql(query: string | object): Promise<any> {\n        const result = Util.sqlWeb.parseSql(query);\n        return this[result.api](result.data);\n    }\n\n    on(event: EVENT, eventCallBack: Function) {\n        this.eventQueue.push({\n            event: event,\n            callback: eventCallBack\n        });\n    }\n\n    off(event: EVENT, eventCallBack: Function) {\n        const indexes = this.eventQueue.map((ev, i) => {\n            if (ev.event === event) {\n                return i;\n            }\n        });\n        indexes.forEach(i => {\n            this.eventQueue.splice(i, 0);\n        });\n    }\n\n    union<T>(query: SelectQuery[]) {\n        return this.pushApi<T>({\n            name: API.Union,\n            query\n        });\n    }\n}","import { Connection } from \"./connection\";\n\nexport class Instance {\n\n    constructor(worker?: Worker) {\n        console.warn('Instance is obsolete, please use Connection. Refer - https://jsstore.net/tutorial/connection/');\n        return new Connection(worker);\n    }\n}","import { Config } from \"./config\";\n\n/**\n * Enable log\n * \n */\nexport const enableLog = () => {\n    Config.isLogEnabled = true;\n};\n\n","import { Util } from \"./util\";\n\n/**\n *\n * supply sqlweb\n * @param {*} value\n */\nexport const useSqlWeb = (value) => {\n    Util.sqlWeb = value;\n};\n\n","export * from './instance';\nexport * from './connection';\nexport * from './config';\nexport * from './helper';\nexport * from './global';\nexport { DATA_TYPE, IDataBase, ITable } from '../common/index';"],"sourceRoot":""},"metadata":{},"sourceType":"script"}