{"ast":null,"code":"import _classCallCheck from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _objectSpread from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/src/views/HealthArea/AddHealthArea.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport { withFormik } from \"formik\";\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css'; // React select\n\nimport states from '../Forms/AdvancedForms/data/states';\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.min.css';\nvar formikEnhancer = withFormik({\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email(\"Invalid email address\").required(\"Email is required!\"),\n    topics: Yup.array().max(1, \"Pick at least 3 tags\").of(Yup.object().shape({\n      label: Yup.string().required(),\n      value: Yup.string().required()\n    }))\n  }),\n  mapPropsToValues: function mapPropsToValues(props) {\n    return {\n      email: \"\",\n      topics: []\n    };\n  },\n  handleSubmit: function handleSubmit(values, _ref) {\n    var setSubmitting = _ref.setSubmitting;\n\n    var payload = _objectSpread({}, values, {\n      topics: values.topics.map(function (t) {\n        return t.value;\n      })\n    });\n\n    setTimeout(function () {\n      alert(JSON.stringify(payload, null, 2));\n      setSubmitting(false);\n    }, 1000);\n  },\n  displayName: \"MyForm\"\n});\n\nvar MyForm = function MyForm(props) {\n  var values = props.values,\n      touched = props.touched,\n      dirty = props.dirty,\n      errors = props.errors,\n      handleChange = props.handleChange,\n      handleBlur = props.handleBlur,\n      handleSubmit = props.handleSubmit,\n      handleReset = props.handleReset,\n      setFieldValue = props.setFieldValue,\n      setFieldTouched = props.setFieldTouched,\n      isSubmitting = props.isSubmitting;\n  return React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"email\",\n    style: {\n      display: \"block\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Email\"), React.createElement(\"input\", {\n    id: \"email\",\n    placeholder: \"Enter your email\",\n    type: \"email\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), errors.email && touched.email && React.createElement(\"div\", {\n    style: {\n      color: \"red\",\n      marginTop: \".5rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, errors.email), React.createElement(MySelect, {\n    value: values.topics,\n    onChange: setFieldValue,\n    onBlur: setFieldTouched,\n    error: errors.topics,\n    touched: touched.topics,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    className: \"outline\",\n    onClick: handleReset,\n    disabled: !dirty || isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Reset\"), React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Submit\"), React.createElement(DisplayFormikState, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })));\n};\n\nvar options = [{\n  value: \"Food\",\n  label: \"Food\"\n}, {\n  value: \"Being Fabulous\",\n  label: \"Being Fabulous\"\n}, {\n  value: \"Ken Wheeler\",\n  label: \"Ken Wheeler\"\n}, {\n  value: \"ReasonML\",\n  label: \"ReasonML\"\n}, {\n  value: \"Unicorns\",\n  label: \"Unicorns\"\n}, {\n  value: \"Kittens\",\n  label: \"Kittens\"\n}];\nimport HealthAreaService from \"../../api/HealthAreaService\";\n\nvar AddHealthArea = /*#__PURE__*/function (_Component) {\n  _inherits(AddHealthArea, _Component);\n\n  function AddHealthArea(props) {\n    var _this;\n\n    _classCallCheck(this, AddHealthArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddHealthArea).call(this, props));\n\n    _this.handleChange = function (value) {\n      // this is going to call setFieldValue and manually update values.topcis\n      _this.props.onChange(\"topics\", value);\n    };\n\n    _this.handleBlur = function () {\n      // this is going to call setFieldTouched and manually update touched.topcis\n      _this.props.onBlur(\"topics\", true);\n    };\n\n    return _this;\n  }\n\n  _createClass(AddHealthArea, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      HealthAreaService.getRealmList().then(function (response) {\n        console.log(\"realm list---\", response.data);\n\n        _this2.setState({\n          realms: response.data\n        });\n\n        options1 = response.data;\n      }).catch(function (error) {\n        console.log(\"error occured---\" + error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        style: {\n          margin: \"1rem 0\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"color\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Topics (select at least 3) \"), React.createElement(Select, {\n        id: \"color\",\n        options: options,\n        onChange: this.handleChange,\n        onBlur: this.handleBlur,\n        value: this.props.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }), !!this.props.error && this.props.touched && React.createElement(\"div\", {\n        style: {\n          color: \"red\",\n          marginTop: \".5rem\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, this.props.error));\n    }\n  }]);\n\n  return AddHealthArea;\n}(Component);\n\nexport default AddHealthArea;","map":{"version":3,"sources":["/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/src/views/HealthArea/AddHealthArea.js"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","FormText","InputGroup","InputGroupAddon","InputGroupText","Formik","withFormik","Yup","states","Select","formikEnhancer","validationSchema","object","shape","email","string","required","topics","array","max","of","label","value","mapPropsToValues","props","handleSubmit","values","setSubmitting","payload","map","t","setTimeout","alert","JSON","stringify","displayName","MyForm","touched","dirty","errors","handleChange","handleBlur","handleReset","setFieldValue","setFieldTouched","isSubmitting","display","color","marginTop","options","HealthAreaService","AddHealthArea","onChange","onBlur","getRealmList","then","response","console","log","data","setState","realms","options1","catch","error","margin"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,UAAzB,EAAqCC,UAArC,EAAiDC,MAAjD,EAAyDC,YAAzD,EAAuEC,QAAvE,EAAiFC,IAAjF,EAAuFC,SAAvF,EAAkGC,KAAlG,EAAyGC,KAAzG,EAAgHC,QAAhH,EAA0HC,UAA1H,EAAsIC,eAAtI,EAAuJC,cAAvJ,QAA6K,YAA7K;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAO,8CAAP,C,CACA;;AACA,OAAOC,MAAP,MAAmB,oCAAnB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,wCAAP;AAIA,IAAMC,cAAc,GAAGJ,UAAU,CAAC;AAChCK,EAAAA,gBAAgB,EAAEJ,GAAG,CAACK,MAAJ,GAAaC,KAAb,CAAmB;AACnCC,IAAAA,KAAK,EAAEP,GAAG,CAACQ,MAAJ,GACJD,KADI,CACE,uBADF,EAEJE,QAFI,CAEK,oBAFL,CAD4B;AAInCC,IAAAA,MAAM,EAAEV,GAAG,CAACW,KAAJ,GACLC,GADK,CACD,CADC,EACE,sBADF,EAELC,EAFK,CAGJb,GAAG,CAACK,MAAJ,GAAaC,KAAb,CAAmB;AACjBQ,MAAAA,KAAK,EAAEd,GAAG,CAACQ,MAAJ,GAAaC,QAAb,EADU;AAEjBM,MAAAA,KAAK,EAAEf,GAAG,CAACQ,MAAJ,GAAaC,QAAb;AAFU,KAAnB,CAHI;AAJ2B,GAAnB,CADc;AAchCO,EAAAA,gBAAgB,EAAE,0BAAAC,KAAK;AAAA,WAAK;AAC1BV,MAAAA,KAAK,EAAE,EADmB;AAE1BG,MAAAA,MAAM,EAAE;AAFkB,KAAL;AAAA,GAdS;AAkBhCQ,EAAAA,YAAY,EAAE,sBAACC,MAAD,QAA+B;AAAA,QAApBC,aAAoB,QAApBA,aAAoB;;AAC3C,QAAMC,OAAO,qBACRF,MADQ;AAEXT,MAAAA,MAAM,EAAES,MAAM,CAACT,MAAP,CAAcY,GAAd,CAAkB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACR,KAAN;AAAA,OAAnB;AAFG,MAAb;;AAIAS,IAAAA,UAAU,CAAC,YAAM;AACfC,MAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeN,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAAD,CAAL;AACAD,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KAHS,EAGP,IAHO,CAAV;AAID,GA3B+B;AA4BhCQ,EAAAA,WAAW,EAAE;AA5BmB,CAAD,CAAjC;;AA+BA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAZ,KAAK,EAAI;AAAA,MAEpBE,MAFoB,GAalBF,KAbkB,CAEpBE,MAFoB;AAAA,MAGpBW,OAHoB,GAalBb,KAbkB,CAGpBa,OAHoB;AAAA,MAIpBC,KAJoB,GAalBd,KAbkB,CAIpBc,KAJoB;AAAA,MAKpBC,MALoB,GAalBf,KAbkB,CAKpBe,MALoB;AAAA,MAMpBC,YANoB,GAalBhB,KAbkB,CAMpBgB,YANoB;AAAA,MAOpBC,UAPoB,GAalBjB,KAbkB,CAOpBiB,UAPoB;AAAA,MAQpBhB,YARoB,GAalBD,KAbkB,CAQpBC,YARoB;AAAA,MASpBiB,WAToB,GAalBlB,KAbkB,CASpBkB,WAToB;AAAA,MAUpBC,aAVoB,GAalBnB,KAbkB,CAUpBmB,aAVoB;AAAA,MAWpBC,eAXoB,GAalBpB,KAbkB,CAWpBoB,eAXoB;AAAA,MAYpBC,YAZoB,GAalBrB,KAbkB,CAYpBqB,YAZoB;AActB,SACE;AAAM,IAAA,QAAQ,EAAEpB,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,OAAf;AAAuB,IAAA,KAAK,EAAE;AAAEqB,MAAAA,OAAO,EAAE;AAAX,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAIE;AACE,IAAA,EAAE,EAAC,OADL;AAEE,IAAA,WAAW,EAAC,kBAFd;AAGE,IAAA,IAAI,EAAC,OAHP;AAIE,IAAA,KAAK,EAAEpB,MAAM,CAACZ,KAJhB;AAKE,IAAA,QAAQ,EAAE0B,YALZ;AAME,IAAA,MAAM,EAAEC,UANV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAYGF,MAAM,CAACzB,KAAP,IAAgBuB,OAAO,CAACvB,KAAxB,IACC;AAAK,IAAA,KAAK,EAAE;AAAEiC,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,SAAS,EAAE;AAA3B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmDT,MAAM,CAACzB,KAA1D,CAbJ,EAeE,oBAAC,QAAD;AACE,IAAA,KAAK,EAAEY,MAAM,CAACT,MADhB;AAEE,IAAA,QAAQ,EAAE0B,aAFZ;AAGE,IAAA,MAAM,EAAEC,eAHV;AAIE,IAAA,KAAK,EAAEL,MAAM,CAACtB,MAJhB;AAKE,IAAA,OAAO,EAAEoB,OAAO,CAACpB,MALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,EAsBE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,SAAS,EAAC,SAFZ;AAGE,IAAA,OAAO,EAAEyB,WAHX;AAIE,IAAA,QAAQ,EAAE,CAACJ,KAAD,IAAUO,YAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAtBF,EA8BE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9BF,EAkCE,oBAAC,kBAAD,oBAAwBrB,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAlCF,CADF;AAsCD,CApDD;;AAsDA,IAAMyB,OAAO,GAAG,CACd;AAAE3B,EAAAA,KAAK,EAAE,MAAT;AAAiBD,EAAAA,KAAK,EAAE;AAAxB,CADc,EAEd;AAAEC,EAAAA,KAAK,EAAE,gBAAT;AAA2BD,EAAAA,KAAK,EAAE;AAAlC,CAFc,EAGd;AAAEC,EAAAA,KAAK,EAAE,aAAT;AAAwBD,EAAAA,KAAK,EAAE;AAA/B,CAHc,EAId;AAAEC,EAAAA,KAAK,EAAE,UAAT;AAAqBD,EAAAA,KAAK,EAAE;AAA5B,CAJc,EAKd;AAAEC,EAAAA,KAAK,EAAE,UAAT;AAAqBD,EAAAA,KAAK,EAAE;AAA5B,CALc,EAMd;AAAEC,EAAAA,KAAK,EAAE,SAAT;AAAoBD,EAAAA,KAAK,EAAE;AAA3B,CANc,CAAhB;AASA,OAAO6B,iBAAP,MAA8B,6BAA9B;;IAGMC,a;;;AACJ,yBAAY3B,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,uFAAMA,KAAN;;AADiB,UAqBnBgB,YArBmB,GAqBJ,UAAAlB,KAAK,EAAI;AACtB;AACA,YAAKE,KAAL,CAAW4B,QAAX,CAAoB,QAApB,EAA8B9B,KAA9B;AACD,KAxBkB;;AAAA,UA0BnBmB,UA1BmB,GA0BN,YAAM;AACjB;AACA,YAAKjB,KAAL,CAAW6B,MAAX,CAAkB,QAAlB,EAA4B,IAA5B;AACD,KA7BkB;;AAAA;AAGlB;;;;wCAGmB;AAAA;;AAClBH,MAAAA,iBAAiB,CAACI,YAAlB,GACGC,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,QAAQ,CAACG,IAAtC;;AACA,QAAA,MAAI,CAACC,QAAL,CAAc;AACZC,UAAAA,MAAM,EAAEL,QAAQ,CAACG;AADL,SAAd;;AAGAG,QAAAA,QAAQ,GAAGN,QAAQ,CAACG,IAApB;AAED,OARH,EAQKI,KARL,CASI,UAAAC,KAAK,EAAI;AACPP,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBM,KAAjC;AACD,OAXL;AAaD;;;6BAWQ;AACP,aACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAEE,oBAAC,MAAD;AACE,QAAA,EAAE,EAAC,OADL;AAEE,QAAA,OAAO,EAAEhB,OAFX;AAGE,QAAA,QAAQ,EAAE,KAAKT,YAHjB;AAIE,QAAA,MAAM,EAAE,KAAKC,UAJf;AAKE,QAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWF,KALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EASG,CAAC,CAAC,KAAKE,KAAL,CAAWwC,KAAb,IAAsB,KAAKxC,KAAL,CAAWa,OAAjC,IACC;AAAK,QAAA,KAAK,EAAE;AAAEU,UAAAA,KAAK,EAAE,KAAT;AAAgBC,UAAAA,SAAS,EAAE;AAA3B,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKxB,KAAL,CAAWwC,KADd,CAVJ,CADF;AAiBD;;;;EAlDyB5E,S;;AAqD5B,eAAe+D,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport { withFormik } from \"formik\";\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\n// React select\nimport states from '../Forms/AdvancedForms/data/states';\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.min.css';\n\n\n\nconst formikEnhancer = withFormik({\n  validationSchema: Yup.object().shape({\n    email: Yup.string()\n      .email(\"Invalid email address\")\n      .required(\"Email is required!\"),\n    topics: Yup.array()\n      .max(1, \"Pick at least 3 tags\")\n      .of(\n        Yup.object().shape({\n          label: Yup.string().required(),\n          value: Yup.string().required()\n        })\n      )\n  }),\n  mapPropsToValues: props => ({\n    email: \"\",\n    topics: []\n  }),\n  handleSubmit: (values, { setSubmitting }) => {\n    const payload = {\n      ...values,\n      topics: values.topics.map(t => t.value)\n    };\n    setTimeout(() => {\n      alert(JSON.stringify(payload, null, 2));\n      setSubmitting(false);\n    }, 1000);\n  },\n  displayName: \"MyForm\"\n});\n\nconst MyForm = props => {\n  const {\n    values,\n    touched,\n    dirty,\n    errors,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    handleReset,\n    setFieldValue,\n    setFieldTouched,\n    isSubmitting\n  } = props;\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"email\" style={{ display: \"block\" }}>\n        Email\n      </label>\n      <input\n        id=\"email\"\n        placeholder=\"Enter your email\"\n        type=\"email\"\n        value={values.email}\n        onChange={handleChange}\n        onBlur={handleBlur}\n      />\n      {errors.email && touched.email && (\n        <div style={{ color: \"red\", marginTop: \".5rem\" }}>{errors.email}</div>\n      )}\n      <MySelect\n        value={values.topics}\n        onChange={setFieldValue}\n        onBlur={setFieldTouched}\n        error={errors.topics}\n        touched={touched.topics}\n      />\n      <button\n        type=\"button\"\n        className=\"outline\"\n        onClick={handleReset}\n        disabled={!dirty || isSubmitting}\n      >\n        Reset\n      </button>\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n\n      <DisplayFormikState {...props} />\n    </form>\n  );\n};\n\nconst options = [\n  { value: \"Food\", label: \"Food\" },\n  { value: \"Being Fabulous\", label: \"Being Fabulous\" },\n  { value: \"Ken Wheeler\", label: \"Ken Wheeler\" },\n  { value: \"ReasonML\", label: \"ReasonML\" },\n  { value: \"Unicorns\", label: \"Unicorns\" },\n  { value: \"Kittens\", label: \"Kittens\" }\n];\n\nimport HealthAreaService from \"../../api/HealthAreaService\";\n\n\nclass AddHealthArea extends Component {\n  constructor(props) {\n    super(props);\n\n  }\n\n\n  componentDidMount() {\n    HealthAreaService.getRealmList()\n      .then(response => {\n        console.log(\"realm list---\", response.data);\n        this.setState({\n          realms: response.data\n        });\n        options1 = response.data\n\n      }).catch(\n        error => {\n          console.log(\"error occured---\" + error);\n        }\n      );\n  }\n  handleChange = value => {\n    // this is going to call setFieldValue and manually update values.topcis\n    this.props.onChange(\"topics\", value);\n  };\n\n  handleBlur = () => {\n    // this is going to call setFieldTouched and manually update touched.topcis\n    this.props.onBlur(\"topics\", true);\n  };\n\n  render() {\n    return (\n      <div style={{ margin: \"1rem 0\" }}>\n        <label htmlFor=\"color\">Topics (select at least 3) </label>\n        <Select\n          id=\"color\"\n          options={options}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n          value={this.props.value}\n        />\n        {!!this.props.error && this.props.touched && (\n          <div style={{ color: \"red\", marginTop: \".5rem\" }}>\n            {this.props.error}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AddHealthArea;\n"]},"metadata":{},"sourceType":"module"}