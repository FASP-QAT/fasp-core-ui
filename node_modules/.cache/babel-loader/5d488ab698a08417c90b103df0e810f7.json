{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/Editors/CodeEditors/CodeEditors.js\";\nimport React, { Component } from 'react';\nimport { Card, CardHeader, CardBody, CardFooter, Form, FormGroup, Input } from 'reactstrap';\nimport { UnControlled as CodeMirror } from 'react-codemirror2';\nimport 'codemirror/lib/codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/eclipse.css';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/xml/xml';\nimport sampleCode from './_examples'; // const defaults = sampleCode\n\nvar CodeEditors = /*#__PURE__*/function (_Component) {\n  _inherits(CodeEditors, _Component);\n\n  function CodeEditors(props) {\n    var _this;\n\n    _classCallCheck(this, CodeEditors);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CodeEditors).call(this, props));\n    _this.state = {\n      readOnly: false,\n      theme: 'eclipse',\n      mode: 'markdown',\n      code: sampleCode.markdown\n    };\n    return _this;\n  }\n\n  _createClass(CodeEditors, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        mode: 'xml',\n        code: sampleCode.xml\n      });\n\n      if (this.editor.editor.options.autofocus) {\n        this.editor.editor.setSize('100%', '50vh');\n        this.editor.editor.focus();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var options = {\n        lineNumbers: true,\n        readOnly: this.state.readOnly,\n        mode: this.state.mode,\n        theme: this.state.theme,\n        autofocus: true\n      }; // temp fix\n\n      if (this.instance) {\n        setTimeout(function () {\n          return _this2.instance.refresh();\n        }, 200);\n      }\n\n      return React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, \"CodeMirror\", ' ', React.createElement(\"a\", {\n        href: \"https://coreui.io/pro/react/\",\n        className: \"badge badge-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"CoreUI Pro Component\"), React.createElement(\"div\", {\n        className: \"card-header-actions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"https://github.com/scniro/react-codemirror2\",\n        rel: \"noopener noreferrer\",\n        target: \"_blank\",\n        className: \"card-header-action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, \"docs\")))), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(CodeMirror, {\n        ref: function ref(node) {\n          return _this2.editor = node;\n        },\n        value: this.state.code,\n        options: options,\n        onBeforeChange: function onBeforeChange(editor, data, value) {\n          _this2.setState({\n            value: value\n          });\n        },\n        onChange: function onChange(editor, metadata, value) {},\n        editorDidMount: function editorDidMount(editor) {\n          // temp fix\n          _this2.instance = editor;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      })), React.createElement(CardFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Form, {\n        inline: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"select\",\n        bsSize: \"sm\",\n        name: \"theme\",\n        id: \"theme\",\n        onChange: function onChange(e) {\n          return _this2.changeTheme(e);\n        },\n        value: this.state.theme,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"material\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"material\"), React.createElement(\"option\", {\n        value: \"eclipse\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"eclipse\"))), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Input, {\n        type: \"select\",\n        bsSize: \"sm\",\n        name: \"mode\",\n        id: \"mode\",\n        onChange: function onChange(e) {\n          return _this2.changeMode(e);\n        },\n        value: this.state.mode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"markdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"markdown\"), React.createElement(\"option\", {\n        value: \"javascript\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"javascript\"), React.createElement(\"option\", {\n        value: \"xml\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"html\"))))));\n    }\n  }, {\n    key: \"changeMode\",\n    value: function changeMode(e) {\n      var mode = e.target.value;\n      this.setState({\n        mode: mode,\n        code: sampleCode[mode]\n      });\n      this.editor.editor.focus();\n    }\n  }, {\n    key: \"changeTheme\",\n    value: function changeTheme(e) {\n      var theme = e.target.value;\n      this.setState({\n        theme: theme\n      });\n    }\n  }, {\n    key: \"toggleReadOnly\",\n    value: function toggleReadOnly() {\n      var _this3 = this;\n\n      this.setState({\n        readOnly: !this.state.readOnly\n      }, function () {\n        _this3.editor.editor.focus();\n      });\n    }\n  }]);\n\n  return CodeEditors;\n}(Component);\n\nexport default CodeEditors;","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/Editors/CodeEditors/CodeEditors.js"],"names":["React","Component","Card","CardHeader","CardBody","CardFooter","Form","FormGroup","Input","UnControlled","CodeMirror","sampleCode","CodeEditors","props","state","readOnly","theme","mode","code","markdown","setState","xml","editor","options","autofocus","setSize","focus","lineNumbers","instance","setTimeout","refresh","node","data","value","metadata","e","changeTheme","changeMode","target"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Card, CardHeader, CardBody, CardFooter, Form, FormGroup, Input } from 'reactstrap';\n\nimport {UnControlled as CodeMirror} from 'react-codemirror2'\nimport 'codemirror/lib/codemirror';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/theme/eclipse.css';\nimport 'codemirror/mode/markdown/markdown';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/mode/xml/xml';\n\nimport sampleCode from './_examples';\n\n// const defaults = sampleCode\n\nclass CodeEditors extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      readOnly: false,\n      theme: 'eclipse',\n      mode: 'markdown',\n      code: sampleCode.markdown\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      mode: 'xml',\n      code: sampleCode.xml\n    });\n    if (this.editor.editor.options.autofocus) {\n      this.editor.editor.setSize('100%', '50vh')\n      this.editor.editor.focus();\n    }\n  }\n\n  render() {\n\n    const options = {\n      lineNumbers: true,\n      readOnly: this.state.readOnly,\n      mode: this.state.mode,\n      theme: this.state.theme,\n      autofocus: true\n    }\n\n    // temp fix\n    if(this.instance) {\n      setTimeout(()=> this.instance.refresh(), 200);\n    }\n\n    return (\n      <Card>\n        <CardHeader>\n          CodeMirror{' '}\n          <a href=\"https://coreui.io/pro/react/\" className=\"badge badge-danger\">CoreUI Pro Component</a>\n          <div className=\"card-header-actions\">\n            <a href=\"https://github.com/scniro/react-codemirror2\" rel=\"noopener noreferrer\" target=\"_blank\" className=\"card-header-action\">\n              <small className=\"text-muted\">docs</small>\n            </a>\n          </div>\n        </CardHeader>\n        <CardBody>\n          <CodeMirror\n            ref={(node) => this.editor = node}\n            value={this.state.code}\n            options={options}\n            onBeforeChange={(editor, data, value) => { this.setState({value}); }}\n            onChange={(editor, metadata, value) => { }}\n            editorDidMount={editor => {\n              // temp fix\n              this.instance = editor;\n            }}\n          />\n        </CardBody>\n        <CardFooter>\n          <Form inline>\n            <FormGroup>\n                <Input type=\"select\" bsSize=\"sm\" name=\"theme\" id=\"theme\" onChange={(e) => this.changeTheme(e)} value={this.state.theme} >\n                  <option value=\"material\">material</option>\n                  <option value=\"eclipse\">eclipse</option>\n                </Input>\n            </FormGroup>\n            <FormGroup>\n                <Input type=\"select\" bsSize=\"sm\" name=\"mode\" id=\"mode\" onChange={(e) => this.changeMode(e)} value={this.state.mode} >\n                  <option value=\"markdown\">markdown</option>\n                  <option value=\"javascript\">javascript</option>\n                  <option value=\"xml\">html</option>\n                </Input>\n            </FormGroup>\n          </Form>\n        </CardFooter>\n      </Card>\n    );\n  }\n\n  changeMode(e) {\n    const mode = e.target.value;\n    this.setState({\n      mode: mode,\n      code: sampleCode[mode]\n    });\n    this.editor.editor.focus();\n  }\n\n  changeTheme(e) {\n    const theme = e.target.value;\n    this.setState({\n      theme: theme,\n    });\n  }\n\n  toggleReadOnly() {\n    this.setState({\n      readOnly: !this.state.readOnly\n    }, () => { this.editor.editor.focus() })\n  }\n}\n\nexport default CodeEditors;\n"]},"metadata":{},"sourceType":"module"}