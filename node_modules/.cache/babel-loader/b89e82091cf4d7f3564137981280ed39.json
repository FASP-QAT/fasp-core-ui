{"ast":null,"code":"'use strict';\n\nvar external = require(\"./external\");\n\nvar DataWorker = require('./stream/DataWorker');\n\nvar DataLengthProbe = require('./stream/DataLengthProbe');\n\nvar Crc32Probe = require('./stream/Crc32Probe');\n\nvar DataLengthProbe = require('./stream/DataLengthProbe');\n/**\n * Represent a compressed object, with everything needed to decompress it.\n * @constructor\n * @param {number} compressedSize the size of the data compressed.\n * @param {number} uncompressedSize the size of the data after decompression.\n * @param {number} crc32 the crc32 of the decompressed file.\n * @param {object} compression the type of compression, see lib/compressions.js.\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the compressed data.\n */\n\n\nfunction CompressedObject(compressedSize, uncompressedSize, crc32, compression, data) {\n  this.compressedSize = compressedSize;\n  this.uncompressedSize = uncompressedSize;\n  this.crc32 = crc32;\n  this.compression = compression;\n  this.compressedContent = data;\n}\n\nCompressedObject.prototype = {\n  /**\n   * Create a worker to get the uncompressed content.\n   * @return {GenericWorker} the worker.\n   */\n  getContentWorker: function getContentWorker() {\n    var worker = new DataWorker(external.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new DataLengthProbe(\"data_length\"));\n    var that = this;\n    worker.on(\"end\", function () {\n      if (this.streamInfo['data_length'] !== that.uncompressedSize) {\n        throw new Error(\"Bug : uncompressed data size mismatch\");\n      }\n    });\n    return worker;\n  },\n\n  /**\n   * Create a worker to get the compressed content.\n   * @return {GenericWorker} the worker.\n   */\n  getCompressedWorker: function getCompressedWorker() {\n    return new DataWorker(external.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\", this.compressedSize).withStreamInfo(\"uncompressedSize\", this.uncompressedSize).withStreamInfo(\"crc32\", this.crc32).withStreamInfo(\"compression\", this.compression);\n  }\n};\n/**\n * Chain the given worker with other workers to compress the content with the\n * given compresion.\n * @param {GenericWorker} uncompressedWorker the worker to pipe.\n * @param {Object} compression the compression object.\n * @param {Object} compressionOptions the options to use when compressing.\n * @return {GenericWorker} the new worker compressing the content.\n */\n\nCompressedObject.createWorkerFrom = function (uncompressedWorker, compression, compressionOptions) {\n  return uncompressedWorker.pipe(new Crc32Probe()).pipe(new DataLengthProbe(\"uncompressedSize\")).pipe(compression.compressWorker(compressionOptions)).pipe(new DataLengthProbe(\"compressedSize\")).withStreamInfo(\"compression\", compression);\n};\n\nmodule.exports = CompressedObject;","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/jszip/lib/compressedObject.js"],"names":["external","require","DataWorker","DataLengthProbe","Crc32Probe","CompressedObject","compressedSize","uncompressedSize","crc32","compression","data","compressedContent","prototype","getContentWorker","worker","Promise","resolve","pipe","uncompressWorker","that","on","streamInfo","Error","getCompressedWorker","withStreamInfo","createWorkerFrom","uncompressedWorker","compressionOptions","compressWorker","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,UAAU,GAAGD,OAAO,CAAC,qBAAD,CAAxB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,0BAAD,CAA7B;;AACA,IAAIG,UAAU,GAAGH,OAAO,CAAC,qBAAD,CAAxB;;AACA,IAAIE,eAAe,GAAGF,OAAO,CAAC,0BAAD,CAA7B;AAEA;;;;;;;;;;;AASA,SAASI,gBAAT,CAA0BC,cAA1B,EAA0CC,gBAA1C,EAA4DC,KAA5D,EAAmEC,WAAnE,EAAgFC,IAAhF,EAAsF;AAClF,OAAKJ,cAAL,GAAsBA,cAAtB;AACA,OAAKC,gBAAL,GAAwBA,gBAAxB;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,WAAL,GAAmBA,WAAnB;AACA,OAAKE,iBAAL,GAAyBD,IAAzB;AACH;;AAEDL,gBAAgB,CAACO,SAAjB,GAA6B;AACzB;;;;AAIAC,EAAAA,gBAAgB,EAAG,4BAAY;AAC3B,QAAIC,MAAM,GAAG,IAAIZ,UAAJ,CAAeF,QAAQ,CAACe,OAAT,CAAiBC,OAAjB,CAAyB,KAAKL,iBAA9B,CAAf,EACZM,IADY,CACP,KAAKR,WAAL,CAAiBS,gBAAjB,EADO,EAEZD,IAFY,CAEP,IAAId,eAAJ,CAAoB,aAApB,CAFO,CAAb;AAIA,QAAIgB,IAAI,GAAG,IAAX;AACAL,IAAAA,MAAM,CAACM,EAAP,CAAU,KAAV,EAAiB,YAAY;AACzB,UAAG,KAAKC,UAAL,CAAgB,aAAhB,MAAmCF,IAAI,CAACZ,gBAA3C,EAA6D;AACzD,cAAM,IAAIe,KAAJ,CAAU,uCAAV,CAAN;AACH;AACJ,KAJD;AAKA,WAAOR,MAAP;AACH,GAjBwB;;AAkBzB;;;;AAIAS,EAAAA,mBAAmB,EAAG,+BAAY;AAC9B,WAAO,IAAIrB,UAAJ,CAAeF,QAAQ,CAACe,OAAT,CAAiBC,OAAjB,CAAyB,KAAKL,iBAA9B,CAAf,EACNa,cADM,CACS,gBADT,EAC2B,KAAKlB,cADhC,EAENkB,cAFM,CAES,kBAFT,EAE6B,KAAKjB,gBAFlC,EAGNiB,cAHM,CAGS,OAHT,EAGkB,KAAKhB,KAHvB,EAINgB,cAJM,CAIS,aAJT,EAIwB,KAAKf,WAJ7B,CAAP;AAMH;AA7BwB,CAA7B;AAgCA;;;;;;;;;AAQAJ,gBAAgB,CAACoB,gBAAjB,GAAoC,UAAUC,kBAAV,EAA8BjB,WAA9B,EAA2CkB,kBAA3C,EAA+D;AAC/F,SAAOD,kBAAkB,CACxBT,IADM,CACD,IAAIb,UAAJ,EADC,EAENa,IAFM,CAED,IAAId,eAAJ,CAAoB,kBAApB,CAFC,EAGNc,IAHM,CAGDR,WAAW,CAACmB,cAAZ,CAA2BD,kBAA3B,CAHC,EAINV,IAJM,CAID,IAAId,eAAJ,CAAoB,gBAApB,CAJC,EAKNqB,cALM,CAKS,aALT,EAKwBf,WALxB,CAAP;AAMH,CAPD;;AASAoB,MAAM,CAACC,OAAP,GAAiBzB,gBAAjB","sourcesContent":["'use strict';\n\nvar external = require(\"./external\");\nvar DataWorker = require('./stream/DataWorker');\nvar DataLengthProbe = require('./stream/DataLengthProbe');\nvar Crc32Probe = require('./stream/Crc32Probe');\nvar DataLengthProbe = require('./stream/DataLengthProbe');\n\n/**\n * Represent a compressed object, with everything needed to decompress it.\n * @constructor\n * @param {number} compressedSize the size of the data compressed.\n * @param {number} uncompressedSize the size of the data after decompression.\n * @param {number} crc32 the crc32 of the decompressed file.\n * @param {object} compression the type of compression, see lib/compressions.js.\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the compressed data.\n */\nfunction CompressedObject(compressedSize, uncompressedSize, crc32, compression, data) {\n    this.compressedSize = compressedSize;\n    this.uncompressedSize = uncompressedSize;\n    this.crc32 = crc32;\n    this.compression = compression;\n    this.compressedContent = data;\n}\n\nCompressedObject.prototype = {\n    /**\n     * Create a worker to get the uncompressed content.\n     * @return {GenericWorker} the worker.\n     */\n    getContentWorker : function () {\n        var worker = new DataWorker(external.Promise.resolve(this.compressedContent))\n        .pipe(this.compression.uncompressWorker())\n        .pipe(new DataLengthProbe(\"data_length\"));\n\n        var that = this;\n        worker.on(\"end\", function () {\n            if(this.streamInfo['data_length'] !== that.uncompressedSize) {\n                throw new Error(\"Bug : uncompressed data size mismatch\");\n            }\n        });\n        return worker;\n    },\n    /**\n     * Create a worker to get the compressed content.\n     * @return {GenericWorker} the worker.\n     */\n    getCompressedWorker : function () {\n        return new DataWorker(external.Promise.resolve(this.compressedContent))\n        .withStreamInfo(\"compressedSize\", this.compressedSize)\n        .withStreamInfo(\"uncompressedSize\", this.uncompressedSize)\n        .withStreamInfo(\"crc32\", this.crc32)\n        .withStreamInfo(\"compression\", this.compression)\n        ;\n    }\n};\n\n/**\n * Chain the given worker with other workers to compress the content with the\n * given compresion.\n * @param {GenericWorker} uncompressedWorker the worker to pipe.\n * @param {Object} compression the compression object.\n * @param {Object} compressionOptions the options to use when compressing.\n * @return {GenericWorker} the new worker compressing the content.\n */\nCompressedObject.createWorkerFrom = function (uncompressedWorker, compression, compressionOptions) {\n    return uncompressedWorker\n    .pipe(new Crc32Probe())\n    .pipe(new DataLengthProbe(\"uncompressedSize\"))\n    .pipe(compression.compressWorker(compressionOptions))\n    .pipe(new DataLengthProbe(\"compressedSize\"))\n    .withStreamInfo(\"compression\", compression);\n};\n\nmodule.exports = CompressedObject;\n"]},"metadata":{},"sourceType":"script"}