{"ast":null,"code":"'use strict';\n\nvar GenericWorker = require('./GenericWorker');\n\nvar crc32 = require('../crc32');\n\nvar utils = require('../utils');\n/**\n * A worker which calculate the crc32 of the data flowing through.\n * @constructor\n */\n\n\nfunction Crc32Probe() {\n  GenericWorker.call(this, \"Crc32Probe\");\n  this.withStreamInfo(\"crc32\", 0);\n}\n\nutils.inherits(Crc32Probe, GenericWorker);\n/**\n * @see GenericWorker.processChunk\n */\n\nCrc32Probe.prototype.processChunk = function (chunk) {\n  this.streamInfo.crc32 = crc32(chunk.data, this.streamInfo.crc32 || 0);\n  this.push(chunk);\n};\n\nmodule.exports = Crc32Probe;","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/node_modules/jszip/lib/stream/Crc32Probe.js"],"names":["GenericWorker","require","crc32","utils","Crc32Probe","call","withStreamInfo","inherits","prototype","processChunk","chunk","streamInfo","data","push","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,UAAD,CAAnB;AAEA;;;;;;AAIA,SAASG,UAAT,GAAsB;AAClBJ,EAAAA,aAAa,CAACK,IAAd,CAAmB,IAAnB,EAAyB,YAAzB;AACA,OAAKC,cAAL,CAAoB,OAApB,EAA6B,CAA7B;AACH;;AACDH,KAAK,CAACI,QAAN,CAAeH,UAAf,EAA2BJ,aAA3B;AAEA;;;;AAGAI,UAAU,CAACI,SAAX,CAAqBC,YAArB,GAAoC,UAAUC,KAAV,EAAiB;AACjD,OAAKC,UAAL,CAAgBT,KAAhB,GAAwBA,KAAK,CAACQ,KAAK,CAACE,IAAP,EAAa,KAAKD,UAAL,CAAgBT,KAAhB,IAAyB,CAAtC,CAA7B;AACA,OAAKW,IAAL,CAAUH,KAAV;AACH,CAHD;;AAIAI,MAAM,CAACC,OAAP,GAAiBX,UAAjB","sourcesContent":["'use strict';\n\nvar GenericWorker = require('./GenericWorker');\nvar crc32 = require('../crc32');\nvar utils = require('../utils');\n\n/**\n * A worker which calculate the crc32 of the data flowing through.\n * @constructor\n */\nfunction Crc32Probe() {\n    GenericWorker.call(this, \"Crc32Probe\");\n    this.withStreamInfo(\"crc32\", 0);\n}\nutils.inherits(Crc32Probe, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nCrc32Probe.prototype.processChunk = function (chunk) {\n    this.streamInfo.crc32 = crc32(chunk.data, this.streamInfo.crc32 || 0);\n    this.push(chunk);\n};\nmodule.exports = Crc32Probe;\n"]},"metadata":{},"sourceType":"script"}