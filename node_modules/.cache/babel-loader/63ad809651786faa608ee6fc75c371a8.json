{"ast":null,"code":"var _this = this;\n\nimport * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport * as SqlWeb from \"sqlweb\";\nimport { Query } from \"sqlweb\";\nimport CryptoJS from 'crypto-js';\nimport { SECRET_KEY } from '../Constants.js'; // This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\n\nJsStore.useSqlWeb(SqlWeb);\nexport var idbCon = new JsStore.Instance();\nexport var dbname = 'fasp';\n\nvar getDatabase = function getDatabase() {\n  var tblStudent = {\n    name: 'programData',\n    columns: {\n      id: {\n        primaryKey: true\n      },\n      programId: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      },\n      version: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      },\n      programName: {\n        notNull: true,\n        dataType: DATA_TYPE.String\n      },\n      programData: {\n        dataType: DATA_TYPE.String,\n        notNull: true\n      },\n      userId: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      }\n    }\n  };\n  var dataBase = {\n    name: dbname,\n    tables: [tblStudent]\n  };\n  return dataBase;\n};\n\nexport var getDbQuery = function getDbQuery() {\n  var db = \"DEFINE DB fasp;\";\n  var tblStudentQry = \"DEFINE TABLE programData(\\n        id PRIMARYKEY,\\n        programId NUMBER NOTNULL ,\\n        version NOTNULL NUMBER,\\n        programName NOTNULL STRING,\\n        programData STRING NOTNULL,\\n        userId NUMBER NOTNULL\\n    );\";\n  var lastSyncDate = \"DEFINE TABLE lastSyncDate(\\n        id PRIMARYKEY,\\n        lastSyncDate date_time\\n    );\";\n  var currency = \"DEFINE TABLE currency (\\n    currencyId PRIMARYKEY,\\n    conversionRateToUsd number,\\n    currencyCode STRING,\\n    currencySymbol STRING,\\n    label object\\n     );\";\n  var dataSource = \"DEFINE TABLE dataSource (\\n        dataSourceId PRIMARYKEY,\\n        active boolean,\\n        dataSourceType object,\\n        label object\\n         );\";\n  var dataSourceType = \"DEFINE TABLE dataSourceType (\\n            dataSourceTypeId PRIMARYKEY,\\n            active boolean,\\n            label object\\n             );\";\n  var fundingSource = \"DEFINE TABLE fundingSource (\\n                fundingSourceId PRIMARYKEY,\\n                active boolean,\\n                label object,\\n                realmId number\\n                 );\";\n  var healthArea = \"DEFINE TABLE healthArea (\\n                    healthAreaId PRIMARYKEY,\\n                    active boolean,\\n                    label object,\\n                    realmId number\\n                     );\"; // const lu = `DEFINE TABLE logisticsUnit (\n  //     logisticsUnitId PRIMARYKEY,\n  //     active boolean,\n  //     heightQty number,\n  //     heightUnit object,\n  //     lengthQty number,\n  //     lengthUnit object,\n  //     manufacturer object,\n  //     planningUnit object,\n  //     qtyInEuro1 number,\n  //     qtyInEuro2 number,\n  //     qtyOfPlanningUnits number,\n  //     unit object,\n  //     weightQty number,\n  //     weightUnit object,\n  //     widthQty number,\n  //     widthUnit object,\n  //     label object,\n  //     realmId number\n  //      );`\n  // const manufacturer = `DEFINE TABLE manufacturer (\n  //     manufacturerId PRIMARYKEY,\n  //     active boolean,\n  //     label object,\n  //     realmId number\n  //      );`\n  // const organisation = `DEFINE TABLE organisation (\n  //     organisationId PRIMARYKEY,\n  //     active boolean,\n  //     label object,\n  //     realmId number\n  //      );`\n  // const planningUnit = `DEFINE TABLE planningUnit (\n  //     planningUnitId PRIMARYKEY,\n  //     active boolean,\n  //     label object,\n  //     realmId number,\n  //     price number,\n  //     productId number,\n  //     qtyOfForecastingUnits number,\n  //     unit object\n  //      );`\n  // const product = `DEFINE TABLE product (\n  //     productId PRIMARYKEY,\n  //     active boolean,\n  //     label object,\n  //     realmId number,\n  //     forecastUnit object,\n  //     genericLabel object,\n  //     productCategory object,\n  //      );`\n  // const productCategory = `DEFINE TABLE productCategory (\n  //     productCategoryId PRIMARYKEY,\n  //     active boolean,\n  //     label object\n  //      );`\n  // const region = `DEFINE TABLE region (\n  //     regionId PRIMARYKEY,\n  //     active boolean,\n  //     label object,\n  //     realmId number,\n  //     capacityCbm number\n  //      );`\n  // const shipmentStatus = `DEFINE TABLE shipmentStatus (\n  //     shipmentStatusId PRIMARYKEY,\n  //     active boolean,\n  //     label object\n  //      );`\n  // const shipmentStatusAllowed = `DEFINE TABLE shipmentStatusAllowed (\n  //     nextShipmentStatusId number,\n  //     shipmentStatusAllowedId number,\n  //     shipmentStatusId number\n  //      );`\n  // const unit = `DEFINE TABLE unit (\n  //     unitId PRIMARYKEY,\n  //     active boolean,\n  //     label object,\n  //     unitCode string,\n  //     unitType object\n  //      );`\n  // const unitType = `DEFINE TABLE unitType (\n  //     unitTypeId PRIMARYKEY\n  //     label object\n  //      );`\n  // const subFundingSource = `DEFINE TABLE subFundingSource (\n  //     subFundingSourceId PRIMARYKEY\n  //     label object,\n  //     active boolean,\n  //     fundingSource object,\n  //     realmId number\n  //      );`\n  // const country = `DEFINE TABLE country (\n  //     countryId PRIMARYKEY\n  //     label object,\n  //     active boolean,\n  //     currency object,\n  //     language object\n  //      );`\n  // const language = `DEFINE TABLE language (\n  //     languageId PRIMARYKEY\n  //     active boolean,\n  //     languageName string\n  //      );`\n\n  var dbCreatequery = db + tblStudentQry + lastSyncDate + currency + dataSource + dataSourceType + fundingSource + healthArea; // + lu \n  // + manufacturer + organisation + planningUnit \n  // + product + productCategory + region\n  // + shipmentStatus + shipmentStatusAllowed + unit + unitType + subFundingSource + country + language;\n\n  return dbCreatequery;\n};\nexport var initJsStore = function initJsStore() {\n  var qry = getDbQuery();\n  console.log(\"this\", _this);\n  idbCon.runSql(qry).then(function () {\n    console.log('db initiated');\n  }).catch(function (ex) {\n    console.error(ex);\n  });\n};\nexport function saveProgram(programJson) {\n  console.log(\"in save program\");\n\n  for (var i = 0; i < programJson.length; i++) {\n    console.log(\"in for loop\");\n    var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(programJson[i]), SECRET_KEY);\n    var programName = CryptoJS.AES.encrypt(JSON.stringify(programJson[i].label), SECRET_KEY);\n    var qry = new Query(\"insert into programData \\n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\\n    \");\n    qry.map(\"@id\", programJson[i].programId + \"_v\" + programJson[i].programVersion + \"_uId_\" + 1);\n    qry.map(\"@programId\", programJson[i].programId);\n    qry.map(\"@version\", programJson[i].programVersion);\n    qry.map(\"@programName\", programName.toString());\n    qry.map(\"@programData\", encryptedText.toString());\n    qry.map(\"@userId\", 1);\n    idbCon.runSql(qry);\n  }\n\n  return 1;\n}\nexport function getProgramDataByprogramIds(programIds) {\n  var qry = new Query(\"select * from programData where id In (\".concat(programIds, \")\"));\n  return idbCon.runSql(qry);\n}\nexport function getProgramDataList() {\n  var userId = 1;\n  var qry = new Query(\"select * from programData where userId=\".concat(userId));\n  return idbCon.runSql(qry);\n}\nexport function importProgram(programJson) {\n  console.log(\"ProgramJson\", programJson);\n  console.log(\"in import program\");\n  var qry = new Query(\"insert into programData \\n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\\n    \");\n  qry.map(\"@id\", programJson.programId + \"_v\" + programJson.version + \"_uId_\" + 1);\n  qry.map(\"@programId\", programJson.programId);\n  qry.map(\"@version\", programJson.version);\n  qry.map(\"@programName\", programJson.programName);\n  qry.map(\"@programData\", programJson.programData);\n  qry.map(\"@userId\", 1);\n  console.log(\"Qry\", qry);\n  idbCon.runSql(qry);\n  return 1;\n}\nexport function getLastSyncDateForApplicationMaster() {\n  var qry = new Query(\"select * from lastSyncDate where id=0\");\n  return idbCon.runSql(qry);\n}\nexport function syncCurrency(json) {\n  console.log(\"in sync currency\");\n\n  for (var i = 0; i < json.length; i++) {\n    console.log(\"in for\", json[i]);\n    var qry = new Query(\"insert into currency \\n    values ({currencyId:'@currencyId',conversionRateToUsd:'@conversionRateToUsd',\\n    currencyCode:'@currencyCode',\\n    currencySymbol:'@currencySymbol',\\n    label:'@label'}) return\\n    \");\n    qry.map(\"@currencyId\", json[i].currencyId);\n    qry.map(\"@conversionRateToUsd\", json[i].conversionRateToUsd);\n    qry.map(\"@currencyCode\", json[i].currencyCode);\n    qry.map(\"@currencySymbol\", json[i].currencySymbol);\n    qry.map(\"@label\", json[i].label);\n    idbCon.runSql(qry);\n  }\n\n  return 1;\n}\nexport function syncDataSource(json) {\n  console.log(\"in data source\");\n\n  for (var i = 0; i < json.length; i++) {\n    console.log(\"json\", json);\n    var qry = new Query(\"insert into dataSource \\n    values ({dataSourceId:'@dataSourceId',active:'@active',\\n    dataSourceType:'@dataSourceType',\\n    label:'@label'}) return\\n    \");\n    qry.map(\"@dataSourceId\", json[i].dataSourceId);\n    qry.map(\"@active\", json[i].active);\n    qry.map(\"@dataSourceType\", json[i].dataSourceType);\n    qry.map(\"@label\", json[i].label);\n    idbCon.runSql(qry);\n  }\n\n  return 1;\n}\nexport function syncDataSourceType(json) {\n  console.log(\"in data source type\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      dataSourceTypeId: json[i].dataSourceTypeId,\n      active: json[i].active,\n      label: json[i].label\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into dataSourceType Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function getLastSyncDateForRealm(realmId) {\n  var qry = new Query(\"select * from lastSyncDate where id=\".concat(realmId));\n  return idbCon.runSql(qry);\n}\nexport function syncFundingSource(json) {\n  console.log(\"in funding source type\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      fundingSourceId: json[i].fundingSourceId,\n      active: json[i].active,\n      label: json[i].label,\n      realmId: json[i].realmId\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into fundingSource Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncHealthArea(json) {\n  console.log(\"in ha\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      healthAreaId: json[i].healthAreaId,\n      active: json[i].active,\n      label: json[i].label,\n      realmId: json[i].realmId\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into healthArea Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncLogisticsUnit(json) {\n  console.log(\"in ha\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      logisticsUnitId: json[i].logisticsUnitId,\n      active: json[i].active,\n      heightQty: json[i].heightQty,\n      heightUnit: json[i].heightUnit,\n      lengthQty: json[i].lengthQty,\n      lengthUnit: json[i].lengthUnit,\n      manufacturer: json[i].manufacturer,\n      planningUnit: json[i].planningUnit,\n      qtyInEuro1: json[i].qtyInEuro1,\n      qtyInEuro2: json[i].qtyInEuro2,\n      qtyOfPlanningUnits: json[i].qtyOfPlanningUnits,\n      unit: json[i].unit,\n      weightQty: json[i].weightQty,\n      weightUnit: json[i].weightUnit,\n      widthQty: json[i].widthQty,\n      widthUnit: json[i].widthUnit,\n      label: json[i].label,\n      realmId: json[i].realmId\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into logisticsUnit Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncManufacturer(json) {\n  console.log(\"in man\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      manufacturerId: json[i].manufacturerId,\n      active: json[i].active,\n      label: json[i].label,\n      realmId: json[i].realmId\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into manufacturer Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncOrganisation(json) {\n  console.log(\"in man\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      organisationId: json[i].organisationId,\n      active: json[i].active,\n      label: json[i].label,\n      realmId: json[i].realmId\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into organisation Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncPlanningUnit(json) {\n  console.log(\"in mpu\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      planningUnitId: json[i].planningUnitId,\n      active: json[i].active,\n      label: json[i].label,\n      realmId: json[i].realmId,\n      productId: json[i].productId,\n      price: json[i].price,\n      qtyOfForecastingUnits: json[i].qtyOfForecastingUnits,\n      unit: json[i].unit\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into planningUnit Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncProduct(json) {\n  console.log(\"in mpu\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      productId: json[i].productId,\n      active: json[i].active,\n      label: json[i].label,\n      realmId: json[i].realmId,\n      forecastUnit: json[i].forecastUnit,\n      genericLabel: json[i].genericLabel,\n      productCategory: json[i].productCategory\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into product Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncProductCategory(json) {\n  console.log(\"in mpu\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      productCategoryId: json[i].productCategoryId,\n      active: json[i].active,\n      label: json[i].label\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into productCategory Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncRegion(json) {\n  console.log(\"in mpu\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      regionId: json[i].regionId,\n      active: json[i].active,\n      label: json[i].label,\n      realmId: json[i].realmId,\n      capacityCbm: json[i].capacityCbm\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into region Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncShipmentStatus(json) {\n  console.log(\"in ha\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      shipmentStatusId: json[i].shipmentStatusId,\n      active: json[i].active,\n      label: json[i].label\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into shipmentStatus Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncShipmentStatusAllowed(json) {\n  console.log(\"in ha\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      nextShipmentStatusId: json[i].nextShipmentStatusId,\n      shipmentStatusAllowedId: json[i].shipmentStatusAllowedId,\n      shipmentStatusId: json[i].shipmentStatusId\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into shipmentStatusAllowed Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncUnit(json) {\n  console.log(\"in ha\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      unitId: json[i].unitId,\n      active: json[i].active,\n      label: json[i].label,\n      unitCode: json[i].unitCode,\n      unitType: json[i].unitType\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into unit Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncUnitType(json) {\n  console.log(\"in ha\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      unitTypeId: json[i].unitId,\n      label: json[i].label\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into unitType Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncSubFundingSource(json) {\n  console.log(\"in ha\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      subFundingSourceId: json[i].subFundingSourceId,\n      label: json[i].label,\n      active: json[i].active,\n      fundingSource: json[i].fundingSource,\n      realmId: json[i].realmId\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into subFundingSource Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncCountry(json) {\n  console.log(\"in ha\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      countryId: json[i].countryId,\n      label: json[i].label,\n      active: json[i].active,\n      currency: json[i].currency,\n      language: json[i].language\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into country Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}\nexport function syncLanguage(json) {\n  console.log(\"in ha\");\n  var data = [];\n\n  for (var i = 0; i < json.length; i++) {\n    data[i] = {\n      languageId: json[i].languageId,\n      languageName: json[i].languageName,\n      active: json[i].active\n    };\n  }\n\n  var qry = new SqlWeb.Query(\"insert into language Values='@values'\");\n  qry.map(\"@values\", data);\n  idbCon.runSql(qry);\n}","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/CommonComponent/JsStoreFunctions.js"],"names":["JsStore","IDataBase","DATA_TYPE","ITable","SqlWeb","Query","CryptoJS","SECRET_KEY","useSqlWeb","idbCon","Instance","dbname","getDatabase","tblStudent","name","columns","id","primaryKey","programId","notNull","dataType","Number","version","programName","String","programData","userId","dataBase","tables","getDbQuery","db","tblStudentQry","lastSyncDate","currency","dataSource","dataSourceType","fundingSource","healthArea","dbCreatequery","initJsStore","qry","console","log","runSql","then","catch","ex","error","saveProgram","programJson","i","length","encryptedText","AES","encrypt","JSON","stringify","label","map","programVersion","toString","getProgramDataByprogramIds","programIds","getProgramDataList","importProgram","getLastSyncDateForApplicationMaster","syncCurrency","json","currencyId","conversionRateToUsd","currencyCode","currencySymbol","syncDataSource","dataSourceId","active","syncDataSourceType","data","dataSourceTypeId","getLastSyncDateForRealm","realmId","syncFundingSource","fundingSourceId","syncHealthArea","healthAreaId","syncLogisticsUnit","logisticsUnitId","heightQty","heightUnit","lengthQty","lengthUnit","manufacturer","planningUnit","qtyInEuro1","qtyInEuro2","qtyOfPlanningUnits","unit","weightQty","weightUnit","widthQty","widthUnit","syncManufacturer","manufacturerId","syncOrganisation","organisationId","syncPlanningUnit","planningUnitId","productId","price","qtyOfForecastingUnits","syncProduct","forecastUnit","genericLabel","productCategory","syncProductCategory","productCategoryId","syncRegion","regionId","capacityCbm","syncShipmentStatus","shipmentStatusId","syncShipmentStatusAllowed","nextShipmentStatusId","shipmentStatusAllowedId","syncUnit","unitId","unitCode","unitType","syncUnitType","unitTypeId","syncSubFundingSource","subFundingSourceId","syncCountry","countryId","language","syncLanguage","languageId","languageName"],"mappings":"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","sourcesContent":["import * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport * as SqlWeb from \"sqlweb\";\nimport {\n    Query\n} from \"sqlweb\";\nimport CryptoJS from 'crypto-js'\nimport { SECRET_KEY } from '../Constants.js'\n// This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\nJsStore.useSqlWeb(SqlWeb);\nexport const idbCon = new JsStore.Instance();\nexport const dbname = 'fasp';\n\nconst getDatabase = () => {\n    const tblStudent = {\n        name: 'programData',\n        columns: {\n            id: {\n                primaryKey: true\n            },\n            programId: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            },\n            version: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            },\n            programName: {\n                notNull: true,\n                dataType: DATA_TYPE.String\n            },\n            programData: {\n                dataType: DATA_TYPE.String,\n                notNull: true\n            },\n            userId: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            }\n        }\n    };\n    const dataBase = {\n        name: dbname,\n        tables: [tblStudent]\n    };\n    return dataBase;\n};\n\nexport const getDbQuery = () => {\n    const db = `DEFINE DB fasp;`;\n    const tblStudentQry = `DEFINE TABLE programData(\n        id PRIMARYKEY,\n        programId NUMBER NOTNULL ,\n        version NOTNULL NUMBER,\n        programName NOTNULL STRING,\n        programData STRING NOTNULL,\n        userId NUMBER NOTNULL\n    );`\n    const lastSyncDate = `DEFINE TABLE lastSyncDate(\n        id PRIMARYKEY,\n        lastSyncDate date_time\n    );`\n    const currency = `DEFINE TABLE currency (\n    currencyId PRIMARYKEY,\n    conversionRateToUsd number,\n    currencyCode STRING,\n    currencySymbol STRING,\n    label object\n     );`\n    const dataSource = `DEFINE TABLE dataSource (\n        dataSourceId PRIMARYKEY,\n        active boolean,\n        dataSourceType object,\n        label object\n         );`\n    const dataSourceType = `DEFINE TABLE dataSourceType (\n            dataSourceTypeId PRIMARYKEY,\n            active boolean,\n            label object\n             );`\n\n    const fundingSource = `DEFINE TABLE fundingSource (\n                fundingSourceId PRIMARYKEY,\n                active boolean,\n                label object,\n                realmId number\n                 );`\n\n    const healthArea = `DEFINE TABLE healthArea (\n                    healthAreaId PRIMARYKEY,\n                    active boolean,\n                    label object,\n                    realmId number\n                     );`\n\n    // const lu = `DEFINE TABLE logisticsUnit (\n    //     logisticsUnitId PRIMARYKEY,\n    //     active boolean,\n    //     heightQty number,\n    //     heightUnit object,\n    //     lengthQty number,\n    //     lengthUnit object,\n    //     manufacturer object,\n    //     planningUnit object,\n    //     qtyInEuro1 number,\n    //     qtyInEuro2 number,\n    //     qtyOfPlanningUnits number,\n    //     unit object,\n    //     weightQty number,\n    //     weightUnit object,\n    //     widthQty number,\n    //     widthUnit object,\n    //     label object,\n    //     realmId number\n    //      );`\n\n    // const manufacturer = `DEFINE TABLE manufacturer (\n    //     manufacturerId PRIMARYKEY,\n    //     active boolean,\n    //     label object,\n    //     realmId number\n    //      );`\n\n    // const organisation = `DEFINE TABLE organisation (\n    //     organisationId PRIMARYKEY,\n    //     active boolean,\n    //     label object,\n    //     realmId number\n    //      );`\n\n    // const planningUnit = `DEFINE TABLE planningUnit (\n    //     planningUnitId PRIMARYKEY,\n    //     active boolean,\n    //     label object,\n    //     realmId number,\n    //     price number,\n    //     productId number,\n    //     qtyOfForecastingUnits number,\n    //     unit object\n    //      );`\n\n    // const product = `DEFINE TABLE product (\n    //     productId PRIMARYKEY,\n    //     active boolean,\n    //     label object,\n    //     realmId number,\n    //     forecastUnit object,\n    //     genericLabel object,\n    //     productCategory object,\n    //      );`\n\n    // const productCategory = `DEFINE TABLE productCategory (\n    //     productCategoryId PRIMARYKEY,\n    //     active boolean,\n    //     label object\n    //      );`\n\n    // const region = `DEFINE TABLE region (\n    //     regionId PRIMARYKEY,\n    //     active boolean,\n    //     label object,\n    //     realmId number,\n    //     capacityCbm number\n    //      );`\n\n    // const shipmentStatus = `DEFINE TABLE shipmentStatus (\n    //     shipmentStatusId PRIMARYKEY,\n    //     active boolean,\n    //     label object\n    //      );`\n\n    // const shipmentStatusAllowed = `DEFINE TABLE shipmentStatusAllowed (\n    //     nextShipmentStatusId number,\n    //     shipmentStatusAllowedId number,\n    //     shipmentStatusId number\n    //      );`\n\n    // const unit = `DEFINE TABLE unit (\n    //     unitId PRIMARYKEY,\n    //     active boolean,\n    //     label object,\n    //     unitCode string,\n    //     unitType object\n    //      );`\n\n    // const unitType = `DEFINE TABLE unitType (\n    //     unitTypeId PRIMARYKEY\n    //     label object\n    //      );`\n\n    // const subFundingSource = `DEFINE TABLE subFundingSource (\n    //     subFundingSourceId PRIMARYKEY\n    //     label object,\n    //     active boolean,\n    //     fundingSource object,\n    //     realmId number\n    //      );`\n\n    // const country = `DEFINE TABLE country (\n    //     countryId PRIMARYKEY\n    //     label object,\n    //     active boolean,\n    //     currency object,\n    //     language object\n    //      );`\n\n    // const language = `DEFINE TABLE language (\n    //     languageId PRIMARYKEY\n    //     active boolean,\n    //     languageName string\n    //      );`\n\n    const dbCreatequery = db + tblStudentQry + lastSyncDate + currency + dataSource +\n        dataSourceType + fundingSource +healthArea \n        // + lu \n        // + manufacturer + organisation + planningUnit \n        // + product + productCategory + region\n        // + shipmentStatus + shipmentStatusAllowed + unit + unitType + subFundingSource + country + language;\n    return dbCreatequery;\n}\n\nexport const initJsStore = () => {\n    const qry = getDbQuery();\n    console.log(\"this\", this);\n    idbCon.runSql(qry).then(function () {\n        console.log('db initiated');\n    }).catch(function (ex) {\n        console.error(ex);\n    })\n};\n\nexport function saveProgram(programJson) {\n    console.log(\"in save program\");\n    for (var i = 0; i < programJson.length; i++) {\n        console.log(\"in for loop\")\n        var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(programJson[i]), SECRET_KEY);\n        var programName = CryptoJS.AES.encrypt(JSON.stringify(programJson[i].label), SECRET_KEY);\n        const qry = new Query(`insert into programData \n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n    `);\n        qry.map(\"@id\", programJson[i].programId + \"_v\" + programJson[i].programVersion + \"_uId_\" + 1);\n        qry.map(\"@programId\", programJson[i].programId);\n        qry.map(\"@version\", programJson[i].programVersion);\n        qry.map(\"@programName\", programName.toString());\n        qry.map(\"@programData\", encryptedText.toString());\n        qry.map(\"@userId\", 1);\n        idbCon.runSql(qry);\n    }\n    return 1;\n}\n\nexport function getProgramDataByprogramIds(programIds) {\n    const qry = new Query(`select * from programData where id In (${programIds})`);\n    return idbCon.runSql(qry);\n}\n\nexport function getProgramDataList() {\n    var userId = 1;\n    const qry = new Query(`select * from programData where userId=${userId}`);\n    return idbCon.runSql(qry);\n}\n\nexport function importProgram(programJson) {\n    console.log(\"ProgramJson\", programJson)\n    console.log(\"in import program\");\n    const qry = new Query(`insert into programData \n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n    `);\n    qry.map(\"@id\", programJson.programId + \"_v\" + programJson.version + \"_uId_\" + 1);\n    qry.map(\"@programId\", programJson.programId);\n    qry.map(\"@version\", programJson.version);\n    qry.map(\"@programName\", programJson.programName);\n    qry.map(\"@programData\", programJson.programData);\n    qry.map(\"@userId\", 1);\n    console.log(\"Qry\", qry);\n    idbCon.runSql(qry);\n    return 1;\n}\n\nexport function getLastSyncDateForApplicationMaster() {\n    const qry = new Query(`select * from lastSyncDate where id=0`);\n    return idbCon.runSql(qry);\n}\n\nexport function syncCurrency(json) {\n    console.log(\"in sync currency\")\n    for (var i = 0; i < json.length; i++) {\n        console.log(\"in for\", json[i])\n        const qry = new Query(`insert into currency \n    values ({currencyId:'@currencyId',conversionRateToUsd:'@conversionRateToUsd',\n    currencyCode:'@currencyCode',\n    currencySymbol:'@currencySymbol',\n    label:'@label'}) return\n    `);\n        qry.map(\"@currencyId\", json[i].currencyId);\n        qry.map(\"@conversionRateToUsd\", json[i].conversionRateToUsd);\n        qry.map(\"@currencyCode\", json[i].currencyCode);\n        qry.map(\"@currencySymbol\", json[i].currencySymbol);\n        qry.map(\"@label\", json[i].label);\n        idbCon.runSql(qry);\n    }\n    return 1;\n}\n\nexport function syncDataSource(json) {\n    console.log(\"in data source\")\n    for (var i = 0; i < json.length; i++) {\n        console.log(\"json\", json)\n        const qry = new Query(`insert into dataSource \n    values ({dataSourceId:'@dataSourceId',active:'@active',\n    dataSourceType:'@dataSourceType',\n    label:'@label'}) return\n    `);\n        qry.map(\"@dataSourceId\", json[i].dataSourceId);\n        qry.map(\"@active\", json[i].active);\n        qry.map(\"@dataSourceType\", json[i].dataSourceType);\n        qry.map(\"@label\", json[i].label);\n        idbCon.runSql(qry);\n    }\n    return 1;\n}\n\n\nexport function syncDataSourceType(json) {\n    console.log(\"in data source type\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            dataSourceTypeId: json[i].dataSourceTypeId,\n            active: json[i].active,\n            label: json[i].label\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into dataSourceType Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\n\nexport function getLastSyncDateForRealm(realmId) {\n    const qry = new Query(`select * from lastSyncDate where id=${realmId}`);\n    return idbCon.runSql(qry);\n}\n\nexport function syncFundingSource(json) {\n    console.log(\"in funding source type\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            fundingSourceId: json[i].fundingSourceId,\n            active: json[i].active,\n            label: json[i].label,\n            realmId: json[i].realmId\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into fundingSource Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\nexport function syncHealthArea(json) {\n    console.log(\"in ha\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            healthAreaId: json[i].healthAreaId,\n            active: json[i].active,\n            label: json[i].label,\n            realmId: json[i].realmId\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into healthArea Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\nexport function syncLogisticsUnit(json) {\n    console.log(\"in ha\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            logisticsUnitId: json[i].logisticsUnitId,\n            active: json[i].active,\n            heightQty: json[i].heightQty,\n            heightUnit: json[i].heightUnit,\n            lengthQty: json[i].lengthQty,\n            lengthUnit: json[i].lengthUnit,\n            manufacturer: json[i].manufacturer,\n            planningUnit: json[i].planningUnit,\n            qtyInEuro1: json[i].qtyInEuro1,\n            qtyInEuro2: json[i].qtyInEuro2,\n            qtyOfPlanningUnits: json[i].qtyOfPlanningUnits,\n            unit: json[i].unit,\n            weightQty: json[i].weightQty,\n            weightUnit: json[i].weightUnit,\n            widthQty: json[i].widthQty,\n            widthUnit: json[i].widthUnit,\n            label: json[i].label,\n            realmId: json[i].realmId\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into logisticsUnit Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\nexport function syncManufacturer(json) {\n    console.log(\"in man\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            manufacturerId: json[i].manufacturerId,\n            active: json[i].active,\n            label: json[i].label,\n            realmId: json[i].realmId\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into manufacturer Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\nexport function syncOrganisation(json) {\n    console.log(\"in man\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            organisationId: json[i].organisationId,\n            active: json[i].active,\n            label: json[i].label,\n            realmId: json[i].realmId\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into organisation Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\nexport function syncPlanningUnit(json) {\n    console.log(\"in mpu\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            planningUnitId: json[i].planningUnitId,\n            active: json[i].active,\n            label: json[i].label,\n            realmId: json[i].realmId,\n            productId: json[i].productId,\n            price: json[i].price,\n            qtyOfForecastingUnits: json[i].qtyOfForecastingUnits,\n            unit: json[i].unit\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into planningUnit Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\nexport function syncProduct(json) {\n    console.log(\"in mpu\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            productId: json[i].productId,\n            active: json[i].active,\n            label: json[i].label,\n            realmId: json[i].realmId,\n            forecastUnit: json[i].forecastUnit,\n            genericLabel: json[i].genericLabel,\n            productCategory: json[i].productCategory\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into product Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\n\nexport function syncProductCategory(json) {\n    console.log(\"in mpu\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            productCategoryId: json[i].productCategoryId,\n            active: json[i].active,\n            label: json[i].label\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into productCategory Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\n\nexport function syncRegion(json) {\n    console.log(\"in mpu\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            regionId: json[i].regionId,\n            active: json[i].active,\n            label: json[i].label,\n            realmId: json[i].realmId,\n            capacityCbm: json[i].capacityCbm\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into region Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\nexport function syncShipmentStatus(json) {\n    console.log(\"in ha\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            shipmentStatusId: json[i].shipmentStatusId,\n            active: json[i].active,\n            label: json[i].label\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into shipmentStatus Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\nexport function syncShipmentStatusAllowed(json) {\n    console.log(\"in ha\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            nextShipmentStatusId: json[i].nextShipmentStatusId,\n            shipmentStatusAllowedId: json[i].shipmentStatusAllowedId,\n            shipmentStatusId: json[i].shipmentStatusId,\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into shipmentStatusAllowed Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\nexport function syncUnit(json) {\n    console.log(\"in ha\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            unitId: json[i].unitId,\n            active: json[i].active,\n            label: json[i].label,\n            unitCode: json[i].unitCode,\n            unitType: json[i].unitType,\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into unit Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\n\nexport function syncUnitType(json) {\n    console.log(\"in ha\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            unitTypeId: json[i].unitId,\n            label: json[i].label\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into unitType Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\n\nexport function syncSubFundingSource(json) {\n    console.log(\"in ha\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            subFundingSourceId: json[i].subFundingSourceId,\n            label: json[i].label,\n            active: json[i].active,\n            fundingSource: json[i].fundingSource,\n            realmId: json[i].realmId\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into subFundingSource Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\nexport function syncCountry(json) {\n    console.log(\"in ha\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            countryId: json[i].countryId,\n            label: json[i].label,\n            active: json[i].active,\n            currency: json[i].currency,\n            language: json[i].language\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into country Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}\n\nexport function syncLanguage(json) {\n    console.log(\"in ha\")\n    var data = []\n    for (var i = 0; i < json.length; i++) {\n        data[i] = {\n            languageId: json[i].languageId,\n            languageName: json[i].languageName,\n            active: json[i].active\n        }\n    }\n    var qry = new SqlWeb.Query(\"insert into language Values='@values'\");\n    qry.map(\"@values\", data);\n    idbCon.runSql(qry);\n}"]},"metadata":{},"sourceType":"module"}