{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/DataSourceType/DataSourceTypeListComponent.jsx\";\nimport React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { NavLink } from 'react-router-dom';\nimport { Card, CardHeader, CardBody } from 'reactstrap';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport 'react-bootstrap-table/dist//react-bootstrap-table-all.min.css';\nimport data from '../Tables/DataTable/_data';\nimport i18n from '../../i18n';\n\nvar DataSourceListComponent = /*#__PURE__*/function (_Component) {\n  _inherits(DataSourceListComponent, _Component);\n\n  function DataSourceListComponent(props) {\n    var _this;\n\n    _classCallCheck(this, DataSourceListComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataSourceListComponent).call(this, props));\n    _this.table = data.rows;\n    _this.options = {\n      sortIndicator: true,\n      hideSizePerPage: true,\n      paginationSize: 3,\n      hidePageListOnlyOnePage: true,\n      clearSearch: true,\n      alwaysShowAllBtns: false,\n      withFirstAndLast: false,\n      onRowClick: function (row) {\n        // console.log(\"row--------------\", row);\n        this.editDataSourceType(row);\n      }.bind(_assertThisInitialized(_this))\n    };\n    _this.state = {\n      dataSourceList: []\n    };\n    _this.editDataSourceType = _this.editDataSourceType.bind(_assertThisInitialized(_this));\n    _this.addNewDataSourceType = _this.addNewDataSourceType.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(DataSourceListComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      AuthenticationService.setupAxiosInterceptors();\n      DataSourceTypeService.getDataSourceTypeList().then(function (response) {\n        //console.log(response.data)\n        _this2.setState({\n          dataSourceList: response.data\n        });\n      }).catch(function (error) {\n        switch (error.message) {\n          case \"Network Error\":\n            _this2.setState({\n              message: error.message\n            });\n\n            break;\n\n          default:\n            _this2.setState({\n              message: error.message\n            });\n\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"editDataSourceType\",\n    value: function editDataSourceType(dataSourceType) {\n      this.props.history.push({\n        pathname: \"/dataSourceType/editDataSourceType\",\n        state: {\n          dataSourceType: dataSourceType\n        }\n      });\n    }\n  }, {\n    key: \"addNewDataSourceType\",\n    value: function addNewDataSourceType() {\n      if (navigator.onLine) {\n        this.props.history.push(\"/dataSourceType/addDataSourceType\");\n      } else {\n        alert(\"You must be Online.\");\n      }\n    }\n  }, {\n    key: \"showCountryLabel\",\n    value: function showCountryLabel(cell, row) {\n      return cell.label_en;\n    } // render() {\n    //     return (\n    //         <div className=\"page-content-wrap\">\n    //             <div className=\"row\">\n    //                 <ul class=\"breadcrumb text-left\"><li><a href=\"#\">Home</a></li><li><a href=\"#\">Admin</a></li><li><a href=\"#\">Datasource type</a></li><li><a href=\"#\">Datasource type list</a></li></ul>\n    //                 <div className=\"help-block\">{this.props.match.params.message}</div>\n    //                 <div className=\"col-md-12\">\n    //                     <div className=\" mt-2 \">\n    //                         <div className=\"panel panel-default\">\n    //                             <div className=\"panel-heading\">\n    //                                 <h3 className=\"panel-title\">Language list</h3>\n    //                                 <button className=\"btn btn-info pull-right\" onClick={this.addNewDataSourceType}><i class=\"fa fa-plus\" ></i></button>\n    //                             </div>\n    //                             <div className=\"panel-body text-left\">\n    //                                 <div className=\"col-md-12\">\n    //                                     <div className=\"table-responsive\">\n    //                                         <table className=\"table datatable\">\n    //                                             <thead>\n    //                                             <tr>\n    //                 <th>Data source type name (English)</th>\n    //                 <th>Data source type name (French)</th>\n    //                 <th>Data source type name (Spanish)</th>\n    //                 <th>Data source type name (portuguese)</th>\n    //                 <th>Status</th>\n    //             </tr>\n    //                                             </thead>\n    //                                             <tbody>\n    //                                             {\n    //                 this.state.dataSourceList.map(dataSourceType =>\n    //                     <tr key={dataSourceType.dataSourceTypeId} onClick={() => this.editDataSourceType(dataSourceType)}>\n    //                         <td>{dataSourceType.label.label_en}</td>\n    //                         <td>{dataSourceType.label.label_fr}</td>\n    //                         <td>{dataSourceType.label.label_sp}</td>\n    //                         <td>{dataSourceType.label.label_pr}</td>\n    //                         <td>{dataSourceType.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td>\n    //                     </tr>\n    //                 )\n    //             }\n    //                                             </tbody>\n    //                                         </table>\n    //                                     </div>\n    //                                 </div>\n    //                             </div>\n    //                         </div>\n    //                     </div>\n    //                 </div>\n    //             </div>\n    //         </div>\n    //     );\n    // }\n\n  }, {\n    key: \"showStatus\",\n    value: function showStatus(cell, row) {\n      if (cell) {\n        return \"Active\";\n      } else {\n        return \"Disabled\";\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"animated\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-menu\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), i18n.t('static.datasourcetype.datasourcetypelist'), React.createElement(\"div\", {\n        className: \"card-header-actions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-header-action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"javascript:void();\",\n        title: \"Add datasource type\",\n        onClick: this.addNewDataSourceType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-plus-square\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }))))), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(BootstrapTable, {\n        data: this.state.dataSourceList,\n        version: \"4\",\n        hover: true,\n        pagination: true,\n        search: true,\n        options: this.options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(TableHeaderColumn, {\n        isKey: true,\n        filterFormatted: true,\n        dataField: \"label\",\n        dataSort: true,\n        dataFormat: this.showCountryLabel,\n        dataAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, i18n.t('static.datasourcetype.datasourcetype')), React.createElement(TableHeaderColumn, {\n        dataField: \"active\",\n        dataSort: true,\n        dataFormat: this.showStatus,\n        dataAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, i18n.t('static.common.status'))))));\n    }\n  }]);\n\n  return DataSourceListComponent;\n}(Component);\n\nexport { DataSourceListComponent as default };","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/DataSourceType/DataSourceTypeListComponent.jsx"],"names":["React","Component","DataSourceTypeService","AuthenticationService","NavLink","Card","CardHeader","CardBody","BootstrapTable","TableHeaderColumn","data","i18n","DataSourceListComponent","props","table","rows","options","sortIndicator","hideSizePerPage","paginationSize","hidePageListOnlyOnePage","clearSearch","alwaysShowAllBtns","withFirstAndLast","onRowClick","row","editDataSourceType","bind","state","dataSourceList","addNewDataSourceType","setupAxiosInterceptors","getDataSourceTypeList","then","response","setState","catch","error","message","dataSourceType","history","push","pathname","navigator","onLine","alert","cell","label_en","t","showCountryLabel","showStatus"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DataSourceTypeService from '../../api/DataSourceTypeService'\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport { NavLink } from 'react-router-dom'\nimport { Card, CardHeader, CardBody } from 'reactstrap';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport 'react-bootstrap-table/dist//react-bootstrap-table-all.min.css';\nimport data from '../Tables/DataTable/_data';\nimport i18n from '../../i18n';\n\nexport default class DataSourceListComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.table = data.rows;\n        this.options = {\n            sortIndicator: true,\n            hideSizePerPage: true,\n            paginationSize: 3,\n            hidePageListOnlyOnePage: true,\n            clearSearch: true,\n            alwaysShowAllBtns: false,\n            withFirstAndLast: false,\n            onRowClick: function (row) {\n                // console.log(\"row--------------\", row);\n                this.editDataSourceType(row);\n            }.bind(this)\n\n        }\n        this.state = {\n            dataSourceList: []\n        }\n\n        this.editDataSourceType = this.editDataSourceType.bind(this);\n        this.addNewDataSourceType = this.addNewDataSourceType.bind(this);\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        DataSourceTypeService.getDataSourceTypeList().then(response => {\n            //console.log(response.data)\n            this.setState({\n                dataSourceList: response.data\n            })\n        })\n            .catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                    }\n                }\n            );\n    }\n\n    editDataSourceType(dataSourceType) {\n        this.props.history.push({\n            pathname: \"/dataSourceType/editDataSourceType\",\n            state: { dataSourceType: dataSourceType }\n        });\n\n    }\n\n    addNewDataSourceType() {\n\n        if (navigator.onLine) {\n            this.props.history.push(`/dataSourceType/addDataSourceType`)\n        } else {\n            alert(\"You must be Online.\")\n        }\n\n\n    }\n\n    showCountryLabel(cell, row) {\n        return cell.label_en;\n    }\n\n\n    // render() {\n    //     return (\n\n\n\n\n    //         <div className=\"page-content-wrap\">\n\n\n    //             <div className=\"row\">\n\n    //                 <ul class=\"breadcrumb text-left\"><li><a href=\"#\">Home</a></li><li><a href=\"#\">Admin</a></li><li><a href=\"#\">Datasource type</a></li><li><a href=\"#\">Datasource type list</a></li></ul>\n    //                 <div className=\"help-block\">{this.props.match.params.message}</div>\n\n    //                 <div className=\"col-md-12\">\n\n    //                     <div className=\" mt-2 \">\n\n\n    //                         <div className=\"panel panel-default\">\n\n\n    //                             <div className=\"panel-heading\">\n    //                                 <h3 className=\"panel-title\">Language list</h3>\n    //                                 <button className=\"btn btn-info pull-right\" onClick={this.addNewDataSourceType}><i class=\"fa fa-plus\" ></i></button>\n    //                             </div>\n    //                             <div className=\"panel-body text-left\">\n    //                                 <div className=\"col-md-12\">\n\n\n\n    //                                     <div className=\"table-responsive\">\n    //                                         <table className=\"table datatable\">\n    //                                             <thead>\n    //                                             <tr>\n    //                 <th>Data source type name (English)</th>\n    //                 <th>Data source type name (French)</th>\n    //                 <th>Data source type name (Spanish)</th>\n    //                 <th>Data source type name (portuguese)</th>\n    //                 <th>Status</th>\n\n    //             </tr>\n    //                                             </thead>\n    //                                             <tbody>\n    //                                             {\n    //                 this.state.dataSourceList.map(dataSourceType =>\n\n    //                     <tr key={dataSourceType.dataSourceTypeId} onClick={() => this.editDataSourceType(dataSourceType)}>\n    //                         <td>{dataSourceType.label.label_en}</td>\n    //                         <td>{dataSourceType.label.label_fr}</td>\n    //                         <td>{dataSourceType.label.label_sp}</td>\n    //                         <td>{dataSourceType.label.label_pr}</td>\n    //                         <td>{dataSourceType.active.toString() == \"true\" ? \"Active\" : \"Disabled\"}</td>\n    //                     </tr>\n    //                 )\n\n    //             }\n\n    //                                             </tbody>\n    //                                         </table>\n    //                                     </div>\n\n    //                                 </div>\n\n    //                             </div>\n\n\n\n    //                         </div>\n\n\n    //                     </div>\n\n\n    //                 </div>\n\n\n    //             </div>\n\n\n    //         </div>\n    //     );\n    // }\n    showStatus(cell, row) {\n        if (cell) {\n            return \"Active\";\n        } else {\n            return \"Disabled\";\n        }\n    }\n\n    render() {\n\n        return (\n            <div className=\"animated\">\n                <Card>\n                    <CardHeader>\n                        <i className=\"icon-menu\"></i>{i18n.t('static.datasourcetype.datasourcetypelist')}\n                        <div className=\"card-header-actions\">\n                            <div className=\"card-header-action\">\n                                <a href=\"javascript:void();\" title=\"Add datasource type\" onClick={this.addNewDataSourceType}><i className=\"fa fa-plus-square\"></i></a>\n                            </div>\n                        </div>\n\n                    </CardHeader>\n                    <CardBody>\n                        <BootstrapTable data={this.state.dataSourceList} version=\"4\"  hover pagination search options={this.options}>\n                            <TableHeaderColumn isKey filterFormatted dataField=\"label\" dataSort dataFormat={this.showCountryLabel} dataAlign=\"center\">{i18n.t('static.datasourcetype.datasourcetype')}</TableHeaderColumn>\n                            <TableHeaderColumn dataField=\"active\" dataSort dataFormat={this.showStatus} dataAlign=\"center\">{i18n.t('static.common.status')}</TableHeaderColumn>\n                        </BootstrapTable>\n                    </CardBody>\n                </Card>\n            </div>\n        );\n    }\n\n}"]},"metadata":{},"sourceType":"module"}