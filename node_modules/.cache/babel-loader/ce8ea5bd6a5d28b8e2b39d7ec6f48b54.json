{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/user/EditUserComponent.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport i18n from '../../i18n';\nimport UserService from \"../../api/UserService\";\nimport RealmService from \"../../api/RealmService\";\nimport LanguageService from \"../../api/LanguageService\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nvar initialValues = {\n  username: \"\",\n  realmId: [],\n  emailId: \"\",\n  phoneNumber: \"\",\n  languageId: []\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    username: Yup.string().min(6, \"Username has to be at least 6 characters\").max(30, \"Password could be max 30 characters\").matches(/^(?=.*[a-zA-Z]).*$/, 'Username must contain atleast 1 alphabet').matches(/^\\S*$/, 'Username should not contain spaces').required('Please enter username'),\n    roleId: Yup.string().required('Please select role'),\n    languageId: Yup.string().required('Please select language'),\n    emailId: Yup.string().email('Invalid email address').required('Please enter email id'),\n    phoneNumber: Yup.string().min(4, \"Phone number has to be at least 6 characters\").max(15, \"Phone number could be max 15 characters\").matches(/^[0-9]*$/, 'Only numbers allowed').required('Please enter phone number.')\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar EditUserComponent = /*#__PURE__*/function (_Component) {\n  _inherits(EditUserComponent, _Component);\n\n  function EditUserComponent(props) {\n    var _this;\n\n    _classCallCheck(this, EditUserComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditUserComponent).call(this, props));\n    _this.state = {\n      realms: [],\n      languages: [],\n      roles: [],\n      user: _this.props.location.state.user,\n      message: ''\n    };\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    _this.dataChange = _this.dataChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(EditUserComponent, [{\n    key: \"dataChange\",\n    value: function dataChange(event) {\n      var user = this.state.user;\n\n      if (event.target.name == \"username\") {\n        user.username = event.target.value;\n      }\n\n      if (event.target.name == \"emailId\") {\n        user.emailId = event.target.value;\n      }\n\n      if (event.target.name == \"phoneNumber\") {\n        user.phoneNumber = event.target.value;\n      }\n\n      if (event.target.name == \"roleId\") {\n        user.roles = Array.from(event.target.selectedOptions, function (item) {\n          return item.value;\n        });\n      }\n\n      if (event.target.name == \"realmId\") {\n        user.realm.realmId = event.target.value;\n      }\n\n      if (event.target.name == \"languageId\") {\n        user.language.languageId = event.target.value;\n      }\n\n      if (event.target.name == \"active\") {\n        user.active = event.target.id === \"active2\" ? false : true;\n      }\n\n      this.setState({\n        user: user\n      }, function () {});\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        username: true,\n        realmId: true,\n        emailId: true,\n        phoneNumber: true,\n        roles: true,\n        languageId: true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('userForm', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      AuthenticationService.setupAxiosInterceptors();\n      LanguageService.getLanguageList().then(function (response) {\n        _this2.setState({\n          languages: response.data\n        });\n      }).catch(function (error) {\n        if (error.message === \"Network Error\") {\n          _this2.setState({\n            message: error.message\n          });\n        } else {\n          switch (error.response ? error.response.status : \"\") {\n            case 500:\n            case 401:\n            case 404:\n            case 406:\n            case 412:\n              _this2.setState({\n                message: error.response.data.messageCode\n              });\n\n              break;\n\n            default:\n              _this2.setState({\n                message: 'static.unkownError'\n              });\n\n              break;\n          }\n        }\n      });\n      RealmService.getRealmListAll().then(function (response) {\n        _this2.setState({\n          realms: response.data.data\n        });\n      }).catch(function (error) {\n        if (error.message === \"Network Error\") {\n          _this2.setState({\n            message: error.message\n          });\n        } else {\n          switch (error.response ? error.response.status : \"\") {\n            case 500:\n            case 401:\n            case 404:\n            case 406:\n            case 412:\n              _this2.setState({\n                message: error.response.data.messageCode\n              });\n\n              break;\n\n            default:\n              _this2.setState({\n                message: 'static.unkownError'\n              });\n\n              break;\n          }\n        }\n      });\n      UserService.getRoleList().then(function (response) {\n        _this2.setState({\n          roles: response.data\n        });\n      }).catch(function (error) {\n        if (error.message === \"Network Error\") {\n          _this2.setState({\n            message: error.message\n          });\n        } else {\n          switch (error.response ? error.response.status : \"\") {\n            case 500:\n            case 401:\n            case 404:\n            case 406:\n            case 412:\n              _this2.setState({\n                message: error.response.data.messageCode\n              });\n\n              break;\n\n            default:\n              _this2.setState({\n                message: 'static.unkownError'\n              });\n\n              console.log(\"Error code unkown\");\n              break;\n          }\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var roles = this.state.roles;\n      var realms = this.state.realms;\n      var languages = this.state.languages;\n      var realmList = realms.length > 0 && realms.map(function (item, i) {\n        return React.createElement(\"option\", {\n          key: i,\n          value: item.realmId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }, item.label.label_en);\n      }, this);\n      var roleList = roles.length > 0 && roles.map(function (item, i) {\n        return React.createElement(\"option\", {\n          key: i,\n          value: item.roleId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, item.label.label_en);\n      }, this);\n      var languageList = languages.length > 0 && languages.map(function (item, i) {\n        return React.createElement(\"option\", {\n          key: i,\n          value: item.languageId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, item.languageName);\n      }, this);\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, i18n.t(this.state.message)), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, i18n.t('static.user.useredittext')), ' '), React.createElement(Formik, {\n        initialValues: {\n          username: this.state.user.username,\n          realmId: this.state.user.realm.realmId,\n          emailId: this.state.user.emailId,\n          phoneNumber: this.state.user.phoneNumber,\n          roles: this.state.user.roles,\n          languageId: this.state.user.language.languageId\n        },\n        validate: validate(validationSchema),\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting,\n              setErrors = _ref.setErrors;\n          UserService.editUser(_this3.state.user).then(function (response) {\n            if (response.status == 200) {\n              _this3.props.history.push(\"/user/listUser/\".concat(response.data.messageCode));\n            } else {\n              _this3.setState({\n                message: response.data.messageCode\n              });\n            }\n          }).catch(function (error) {\n            if (error.message === \"Network Error\") {\n              _this3.setState({\n                message: error.message\n              });\n            } else {\n              switch (error.response ? error.response.status : \"\") {\n                case 500:\n                case 401:\n                case 404:\n                case 406:\n                case 412:\n                  _this3.setState({\n                    message: error.response.data.messageCode\n                  });\n\n                  break;\n\n                default:\n                  _this3.setState({\n                    message: 'static.unkownError'\n                  });\n\n                  console.log(\"Error code unkown\");\n                  break;\n              }\n            }\n          });\n        },\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"userForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 315\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 316\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 317\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"realmId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318\n            },\n            __self: this\n          }, i18n.t('static.realm.realmname')), React.createElement(Input, {\n            type: \"select\",\n            name: \"realmId\",\n            id: \"realmId\",\n            bsSize: \"sm\",\n            valid: !errors.realmId,\n            invalid: touched.realmId && !!errors.realmId,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            value: _this3.state.user.realm.realmId,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 319\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"0\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 331\n            },\n            __self: this\n          }, i18n.t('static.common.select')), realmList), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 334\n            },\n            __self: this\n          }, errors.realmId)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 336\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"username\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 337\n            },\n            __self: this\n          }, i18n.t('static.user.username')), React.createElement(Input, {\n            type: \"text\",\n            name: \"username\",\n            id: \"username\",\n            bsSize: \"sm\",\n            valid: !errors.username,\n            invalid: touched.username && !!errors.username,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            value: _this3.state.user.username,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 338\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 349\n            },\n            __self: this\n          }, errors.username)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 351\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"emailId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 352\n            },\n            __self: this\n          }, i18n.t('static.common.emailid')), React.createElement(Input, {\n            type: \"text\",\n            name: \"emailId\",\n            id: \"emailId\",\n            bsSize: \"sm\",\n            valid: !errors.emailId,\n            invalid: touched.emailId && !!errors.emailId,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            value: _this3.state.user.emailId,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 353\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 364\n            },\n            __self: this\n          }, errors.emailId)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 366\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"phoneNumber\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 367\n            },\n            __self: this\n          }, i18n.t('static.common.phoneNumber')), React.createElement(Input, {\n            type: \"text\",\n            name: \"phoneNumber\",\n            id: \"phoneNumber\",\n            bsSize: \"sm\",\n            valid: !errors.phoneNumber,\n            invalid: touched.phoneNumber && !!errors.phoneNumber,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            value: _this3.state.user.phoneNumber,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 368\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 379\n            },\n            __self: this\n          }, errors.phoneNumber)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 381\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"roleId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 382\n            },\n            __self: this\n          }, i18n.t('static.role.rolename')), React.createElement(Input, {\n            type: \"select\",\n            name: \"roleId\",\n            id: \"roleId\",\n            bsSize: \"sm\",\n            valid: !errors.roleId,\n            invalid: touched.roleId && !!errors.roleId,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            value: _this3.state.user.roles,\n            multiple: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 383\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"0\",\n            disabled: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 396\n            },\n            __self: this\n          }, i18n.t('static.common.select')), roleList), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 399\n            },\n            __self: this\n          }, errors.roleId)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 401\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"languageId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 402\n            },\n            __self: this\n          }, i18n.t('static.language.language')), React.createElement(Input, {\n            type: \"select\",\n            name: \"languageId\",\n            id: \"languageId\",\n            bsSize: \"sm\",\n            valid: !errors.languageId,\n            invalid: touched.languageId && !!errors.languageId,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            value: _this3.state.user.language.languageId,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 403\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"0\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 415\n            },\n            __self: this\n          }, i18n.t('static.common.select')), languageList), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 418\n            },\n            __self: this\n          }, errors.languageId)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 420\n            },\n            __self: this\n          }, React.createElement(Label, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 421\n            },\n            __self: this\n          }, i18n.t('static.common.status')), React.createElement(FormGroup, {\n            check: true,\n            inline: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 422\n            },\n            __self: this\n          }, React.createElement(Input, {\n            className: \"form-check-input\",\n            type: \"radio\",\n            id: \"active1\",\n            name: \"active\",\n            value: true,\n            checked: _this3.state.user.active === true,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 423\n            },\n            __self: this\n          }), React.createElement(Label, {\n            className: \"form-check-label\",\n            check: true,\n            htmlFor: \"inline-radio1\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 432\n            },\n            __self: this\n          }, i18n.t('static.common.active'))), React.createElement(FormGroup, {\n            check: true,\n            inline: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 438\n            },\n            __self: this\n          }, React.createElement(Input, {\n            className: \"form-check-input\",\n            type: \"radio\",\n            id: \"active2\",\n            name: \"active\",\n            value: false,\n            checked: _this3.state.user.active === false,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this3.dataChange(e);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 439\n            },\n            __self: this\n          }), React.createElement(Label, {\n            className: \"form-check-label\",\n            check: true,\n            htmlFor: \"inline-radio2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 448\n            },\n            __self: this\n          }, i18n.t('static.common.disabled'))))), React.createElement(CardFooter, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 456\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 457\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"button\",\n            size: \"sm\",\n            color: \"danger\",\n            className: \"float-right mr-1\",\n            onClick: _this3.cancelClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 458\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-times\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 458\n            },\n            __self: this\n          }), \" \", i18n.t('static.common.cancel')), React.createElement(Button, {\n            type: \"submit\",\n            size: \"sm\",\n            color: \"success\",\n            className: \"float-right mr-1\",\n            onClick: function onClick() {\n              return _this3.touchAll(setTouched, errors);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 459\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-check\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 459\n            },\n            __self: this\n          }), i18n.t('static.common.update')), \"\\xA0\")));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/user/listUser/\" + \"static.actionCancelled\");\n    }\n  }]);\n\n  return EditUserComponent;\n}(Component);\n\nexport default EditUserComponent;","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/user/EditUserComponent.js"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","Formik","Yup","i18n","UserService","RealmService","LanguageService","AuthenticationService","initialValues","username","realmId","emailId","phoneNumber","languageId","validationSchema","values","object","shape","string","min","max","matches","required","roleId","email","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","EditUserComponent","props","state","realms","languages","roles","user","location","message","cancelClicked","bind","dataChange","event","target","name","value","Array","from","selectedOptions","item","realm","language","active","id","setState","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","setupAxiosInterceptors","getLanguageList","then","response","data","catch","status","messageCode","getRealmListAll","getRoleList","console","log","realmList","map","label","label_en","roleList","languageList","languageName","t","flexBasis","setSubmitting","setErrors","editUser","history","push","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","e","touchAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\nimport i18n from '../../i18n'\nimport UserService from \"../../api/UserService\";\nimport RealmService from \"../../api/RealmService\";\nimport LanguageService from \"../../api/LanguageService\";\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nconst initialValues = {\n    username: \"\",\n    realmId: [],\n    emailId: \"\",\n    phoneNumber: \"\",\n    languageId: []\n}\n\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        username: Yup.string()\n            .min(6, `Username has to be at least 6 characters`)\n            .max(30, `Password could be max 30 characters`)\n            .matches(/^(?=.*[a-zA-Z]).*$/, 'Username must contain atleast 1 alphabet')\n            .matches(/^\\S*$/, 'Username should not contain spaces')\n            .required('Please enter username'),\n        roleId: Yup.string()\n            .required('Please select role'),\n        languageId: Yup.string()\n            .required('Please select language'),\n        emailId: Yup.string()\n            .email('Invalid email address')\n            .required('Please enter email id'),\n        phoneNumber: Yup.string()\n            .min(4, `Phone number has to be at least 6 characters`)\n            .max(15, `Phone number could be max 15 characters`)\n            .matches(/^[0-9]*$/, 'Only numbers allowed')\n            .required('Please enter phone number.')\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\nclass EditUserComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            realms: [],\n            languages: [],\n            roles: [],\n            user: this.props.location.state.user,\n            message: ''\n        }\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    dataChange(event) {\n        let { user } = this.state;\n        if (event.target.name == \"username\") {\n            user.username = event.target.value;\n        }\n        if (event.target.name == \"emailId\") {\n            user.emailId = event.target.value;\n        }\n        if (event.target.name == \"phoneNumber\") {\n            user.phoneNumber = event.target.value;\n        }\n        if (event.target.name == \"roleId\") {\n            user.roles = Array.from(event.target.selectedOptions, (item) => item.value);\n        }\n        if (event.target.name == \"realmId\") {\n            user.realm.realmId = event.target.value;\n        }\n        if (event.target.name == \"languageId\") {\n            user.language.languageId = event.target.value;\n        }\n        if (event.target.name == \"active\") {\n            user.active = event.target.id === \"active2\" ? false : true;\n        }\n        this.setState({\n            user\n        },\n            () => { });\n    };\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            username: true,\n            realmId: true,\n            emailId: true,\n            phoneNumber: true,\n            roles: true,\n            languageId: true\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('userForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        LanguageService.getLanguageList()\n            .then(response => {\n                this.setState({\n                    languages: response.data\n                })\n            }).catch(\n                error => {\n                    if (error.message === \"Network Error\") {\n                        this.setState({ message: error.message });\n                    } else {\n                        switch (error.response ? error.response.status : \"\") {\n                            case 500:\n                            case 401:\n                            case 404:\n                            case 406:\n                            case 412:\n                                this.setState({ message: error.response.data.messageCode });\n                                break;\n                            default:\n                                this.setState({ message: 'static.unkownError' });\n                                break;\n                        }\n                    }\n                }\n            );\n\n        RealmService.getRealmListAll()\n            .then(response => {\n                this.setState({\n                    realms: response.data.data\n                })\n            }).catch(\n                error => {\n                    if (error.message === \"Network Error\") {\n                        this.setState({ message: error.message });\n                    } else {\n                        switch (error.response ? error.response.status : \"\") {\n                            case 500:\n                            case 401:\n                            case 404:\n                            case 406:\n                            case 412:\n                                this.setState({ message: error.response.data.messageCode });\n                                break;\n                            default:\n                                this.setState({ message: 'static.unkownError' });\n                                break;\n                        }\n                    }\n                }\n            );\n\n        UserService.getRoleList()\n            .then(response => {\n                this.setState({\n                    roles: response.data\n                })\n            }).catch(\n                error => {\n                    if (error.message === \"Network Error\") {\n                        this.setState({ message: error.message });\n                    } else {\n                        switch (error.response ? error.response.status : \"\") {\n                            case 500:\n                            case 401:\n                            case 404:\n                            case 406:\n                            case 412:\n                                this.setState({ message: error.response.data.messageCode });\n                                break;\n                            default:\n                                this.setState({ message: 'static.unkownError' });\n                                console.log(\"Error code unkown\");\n                                break;\n                        }\n                    }\n                }\n            );\n    }\n\n    render() {\n        const { roles } = this.state;\n        const { realms } = this.state;\n        const { languages } = this.state;\n\n        let realmList = realms.length > 0\n            && realms.map((item, i) => {\n                return (\n                    <option key={i} value={item.realmId}>\n                        {item.label.label_en}\n                    </option>\n                )\n            }, this);\n        let roleList = roles.length > 0\n            && roles.map((item, i) => {\n                return (\n                    <option key={i} value={item.roleId}>\n                        {item.label.label_en}\n                    </option>\n                )\n            }, this);\n\n        let languageList = languages.length > 0\n            && languages.map((item, i) => {\n                return (\n                    <option key={i} value={item.languageId}>\n                        {item.languageName}\n                    </option>\n                )\n            }, this);\n\n\n        return (\n            <div className=\"animated fadeIn\">\n                <h5>{i18n.t(this.state.message)}</h5>\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>{i18n.t('static.user.useredittext')}</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                initialValues={{\n                                    username: this.state.user.username,\n                                    realmId: this.state.user.realm.realmId,\n                                    emailId: this.state.user.emailId,\n                                    phoneNumber: this.state.user.phoneNumber,\n                                    roles: this.state.user.roles,\n                                    languageId: this.state.user.language.languageId\n                                }}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {\n                                    UserService.editUser(this.state.user)\n                                        .then(response => {\n                                            if (response.status == 200) {\n                                                this.props.history.push(`/user/listUser/${response.data.messageCode}`)\n                                            } else {\n                                                this.setState({\n                                                    message: response.data.messageCode\n                                                })\n                                            }\n\n                                        })\n                                        .catch(\n                                            error => {\n                                                if (error.message === \"Network Error\") {\n                                                    this.setState({ message: error.message });\n                                                } else {\n                                                    switch (error.response ? error.response.status : \"\") {\n                                                        case 500:\n                                                        case 401:\n                                                        case 404:\n                                                        case 406:\n                                                        case 412:\n                                                            this.setState({ message: error.response.data.messageCode });\n                                                            break;\n                                                        default:\n                                                            this.setState({ message: 'static.unkownError' });\n                                                            console.log(\"Error code unkown\");\n                                                            break;\n                                                    }\n                                                }\n                                            }\n                                        );\n\n\n                                }}\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='userForm'>\n                                                <CardBody>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"realmId\">{i18n.t('static.realm.realmname')}</Label>\n                                                        <Input\n                                                            type=\"select\"\n                                                            name=\"realmId\"\n                                                            id=\"realmId\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.realmId}\n                                                            invalid={touched.realmId && !!errors.realmId}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            value={this.state.user.realm.realmId}\n                                                        >\n                                                            <option value=\"0\">{i18n.t('static.common.select')}</option>\n                                                            {realmList}\n                                                        </Input>\n                                                        <FormFeedback>{errors.realmId}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"username\">{i18n.t('static.user.username')}</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"username\"\n                                                            id=\"username\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.username}\n                                                            invalid={touched.username && !!errors.username}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            value={this.state.user.username}\n                                                        />\n                                                        <FormFeedback>{errors.username}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"emailId\">{i18n.t('static.common.emailid')}</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"emailId\"\n                                                            id=\"emailId\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.emailId}\n                                                            invalid={touched.emailId && !!errors.emailId}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            value={this.state.user.emailId}\n                                                        />\n                                                        <FormFeedback>{errors.emailId}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"phoneNumber\">{i18n.t('static.common.phoneNumber')}</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"phoneNumber\"\n                                                            id=\"phoneNumber\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.phoneNumber}\n                                                            invalid={touched.phoneNumber && !!errors.phoneNumber}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            value={this.state.user.phoneNumber}\n                                                        />\n                                                        <FormFeedback>{errors.phoneNumber}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"roleId\">{i18n.t('static.role.rolename')}</Label>\n                                                        <Input\n                                                            type=\"select\"\n                                                            name=\"roleId\"\n                                                            id=\"roleId\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.roleId}\n                                                            invalid={touched.roleId && !!errors.roleId}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            value={this.state.user.roles}\n                                                            multiple={true}\n                                                        >\n                                                            <option value=\"0\" disabled>{i18n.t('static.common.select')}</option>\n                                                            {roleList}\n                                                        </Input>\n                                                        <FormFeedback>{errors.roleId}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"languageId\">{i18n.t('static.language.language')}</Label>\n                                                        <Input\n                                                            type=\"select\"\n                                                            name=\"languageId\"\n                                                            id=\"languageId\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.languageId}\n                                                            invalid={touched.languageId && !!errors.languageId}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            value={this.state.user.language.languageId}\n                                                        >\n                                                            <option value=\"0\">{i18n.t('static.common.select')}</option>\n                                                            {languageList}\n                                                        </Input>\n                                                        <FormFeedback>{errors.languageId}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label>{i18n.t('static.common.status')}</Label>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active1\"\n                                                                name=\"active\"\n                                                                value={true}\n                                                                checked={this.state.user.active === true}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-radio1\">\n                                                                {i18n.t('static.common.active')}\n                                                            </Label>\n                                                        </FormGroup>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active2\"\n                                                                name=\"active\"\n                                                                value={false}\n                                                                checked={this.state.user.active === false}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-radio2\">\n                                                                {i18n.t('static.common.disabled')}\n                                                            </Label>\n                                                        </FormGroup>\n                                                    </FormGroup>\n                                                </CardBody>\n                                                <CardFooter>\n                                                    <FormGroup>\n                                                        <Button type=\"button\" size=\"sm\" color=\"danger\" className=\"float-right mr-1\" onClick={this.cancelClicked}><i className=\"fa fa-times\"></i> {i18n.t('static.common.cancel')}</Button>\n                                                        <Button type=\"submit\" size=\"sm\" color=\"success\" className=\"float-right mr-1\" onClick={() => this.touchAll(setTouched, errors)} ><i className=\"fa fa-check\"></i>{i18n.t('static.common.update')}</Button>\n\n                                                        &nbsp;\n                          </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n                                        )} />\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n    cancelClicked() {\n        this.props.history.push(`/user/listUser/` + \"static.actionCancelled\")\n    }\n}\n\nexport default EditUserComponent;\n"]},"metadata":{},"sourceType":"module"}