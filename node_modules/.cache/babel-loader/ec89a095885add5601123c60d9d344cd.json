{"ast":null,"code":"import _classCallCheck from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/src/views/HealthArea/AddHealthArea.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik'; // React select\n\nimport states from '../Forms/AdvancedForms/data/states';\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.min.css';\nvar options = states.US;\nvar initialValues = {\n  realmId: \"\",\n  countryId: \"\",\n  healthAreaName: \"\"\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    realmId: Yup.string().required('Please select realm.'),\n    countryId: Yup.string().required('Please select country'),\n    healthAreaName: Yup.string().min(100, \"Username has to be at least 5 characters\").required('Please enter health area'),\n    email: Yup.string().email('Invalid email address').required('Email is required!'),\n    password: Yup.string().min(6, \"Password has to be at least \".concat(6, \" characters!\")).matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/, 'Password must contain: numbers, uppercase and lowercase letters\\n').required('Password is required'),\n    confirmPassword: Yup.string().oneOf([values.password], 'Passwords must match').required('Password confirmation is required'),\n    accept: Yup.bool().required('* required').test('accept', 'You have to accept our Terms and Conditions!', function (value) {\n      return value === true;\n    })\n  });\n};\n\nvar AddHealthArea = /*#__PURE__*/function (_Component) {\n  _inherits(AddHealthArea, _Component);\n\n  function AddHealthArea(props) {\n    var _this;\n\n    _classCallCheck(this, AddHealthArea);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddHealthArea).call(this, props));\n    _this.saveRealmChanges = _this.saveRealmChanges.bind(_assertThisInitialized(_this));\n    _this.saveCountryChanges = _this.saveCountryChanges.bind(_assertThisInitialized(_this));\n    _this.state = {\n      realmId: [],\n      countryId: [],\n      healthAreaName: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(AddHealthArea, [{\n    key: \"saveRealmChanges\",\n    value: function saveRealmChanges(value1) {\n      this.setState({\n        value1: value1\n      });\n    }\n  }, {\n    key: \"saveCountryChanges\",\n    value: function saveCountryChanges(value2) {\n      this.setState({\n        value2: value2\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Add Health Area\"), ' '), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Formik, {\n        initialValues: initialValues,\n        validate: validate(validationSchema),\n        onSubmit: onSubmit,\n        render: function render(_ref) {\n          var values = _ref.values,\n              errors = _ref.errors,\n              touched = _ref.touched,\n              status = _ref.status,\n              dirty = _ref.dirty,\n              handleChange = _ref.handleChange,\n              handleBlur = _ref.handleBlur,\n              handleSubmit = _ref.handleSubmit,\n              isSubmitting = _ref.isSubmitting,\n              isValid = _ref.isValid,\n              handleReset = _ref.handleReset,\n              setTouched = _ref.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"simpleForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 93\n            },\n            __self: this\n          }, React.createElement(Label, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 94\n            },\n            __self: this\n          }, \"Realm\"), React.createElement(Select, {\n            name: \"realmId\",\n            value: _this2.state.value1,\n            options: options,\n            onChange: _this2.saveRealmChanges,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          })), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 103\n            },\n            __self: this\n          }, React.createElement(Label, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 104\n            },\n            __self: this\n          }, \"Country\"), React.createElement(Select, {\n            name: \"countryId\",\n            value: _this2.state.value2,\n            options: options,\n            onChange: _this2.saveCountryChanges,\n            multi: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 105\n            },\n            __self: this\n          })), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"healthArea\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 114\n            },\n            __self: this\n          }, \"Health Area\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"healthAreaName\",\n            id: \"healthAreaName\",\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          })), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120\n            },\n            __self: this\n          }));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })), React.createElement(CardFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        size: \"md\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-dot-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), \" Submit\"), React.createElement(Button, {\n        type: \"reset\",\n        size: \"md\",\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-ban\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), \" Cancel\"))))));\n    }\n  }]);\n\n  return AddHealthArea;\n}(Component);\n\nexport default AddHealthArea;","map":{"version":3,"sources":["/home/altius/Documents/FASP/coreui-pro-react-2019-06-21/coreui-pro-react-admin-template-2.6.0/src/views/HealthArea/AddHealthArea.js"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","CardBody","Form","FormGroup","Label","Input","FormText","InputGroup","InputGroupAddon","InputGroupText","Formik","states","Select","options","US","initialValues","realmId","countryId","healthAreaName","validationSchema","values","Yup","object","shape","string","required","min","email","password","matches","confirmPassword","oneOf","accept","bool","test","value","AddHealthArea","props","saveRealmChanges","bind","saveCountryChanges","state","value1","setState","value2","flexBasis","validate","onSubmit","errors","touched","status","dirty","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","handleReset","setTouched"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\n// React select\nimport states from '../Forms/AdvancedForms/data/states';\nimport Select from 'react-select';\nimport 'react-select/dist/react-select.min.css';\n\nconst options = states.US;\n\nconst initialValues = {\n  realmId: \"\",\n  countryId: \"\",\n  healthAreaName: \"\"\n}\n\nconst validationSchema = function (values) {\n  return Yup.object().shape({\n    realmId: Yup.string()\n    .required('Please select realm.'),\n    countryId: Yup.string()\n    .required('Please select country'),\n    healthAreaName: Yup.string()\n    .min(100, `Username has to be at least 5 characters`)\n    .required('Please enter health area'),\n    email: Yup.string()\n    .email('Invalid email address')\n    .required('Email is required!'),\n    password: Yup.string()\n    .min(6, `Password has to be at least ${6} characters!`)\n    .matches(/(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/, 'Password must contain: numbers, uppercase and lowercase letters\\n')\n    .required('Password is required'),\n    confirmPassword: Yup.string()\n    .oneOf([values.password], 'Passwords must match')\n    .required('Password confirmation is required'),\n    accept: Yup.bool()\n    .required('* required')\n    .test('accept', 'You have to accept our Terms and Conditions!', value => value === true),\n  })\n}\n\nclass AddHealthArea extends Component {\n  constructor(props) {\n    super(props);\n    this.saveRealmChanges = this.saveRealmChanges.bind(this);\n    this.saveCountryChanges = this.saveCountryChanges.bind(this);\n    this.state = {\n      realmId: [],\n      countryId: [],\n      healthAreaName: \"\"\n    };\n  }\n\n  saveRealmChanges(value1) {\n    this.setState({ value1 });\n  }\n\n  saveCountryChanges(value2) {\n    this.setState({ value2 });\n  }\n\n  render() {\n\n    return (\n      <div className=\"animated fadeIn\">\n        <Row>\n          <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n            <Card>\n              <CardHeader>\n                <i className=\"icon-note\"></i><strong>Add Health Area</strong>{' '}\n              </CardHeader>\n              <CardBody>\n                <Formik\n                  initialValues={initialValues}\n                  validate={validate(validationSchema)}\n                  onSubmit={onSubmit}\n                  render={\n                    ({\n                      values,\n                      errors,\n                      touched,\n                      status,\n                      dirty,\n                      handleChange,\n                      handleBlur,\n                      handleSubmit,\n                      isSubmitting,\n                      isValid,\n                      handleReset,\n                      setTouched\n                    }) => (\n                        <Form onSubmit={handleSubmit} noValidate name='simpleForm'>\n                          <FormGroup>\n                            <Label>Realm</Label>\n                            <Select\n                              name=\"realmId\"\n                              value={this.state.value1}\n                              options={options}\n                              onChange={this.saveRealmChanges}\n\n                            />\n                          </FormGroup>\n                          <FormGroup>\n                            <Label>Country</Label>\n                            <Select\n                              name=\"countryId\"\n                              value={this.state.value2}\n                              options={options}\n                              onChange={this.saveCountryChanges}\n                              multi\n                            />\n                          </FormGroup>\n                          <FormGroup>\n                            <Label for=\"healthArea\">Health Area</Label>\n                            <Input type=\"text\"\n                              name=\"healthAreaName\"\n                              id=\"healthAreaName\"\n                              required />\n                          </FormGroup>\n                          <FormGroup>\n                            {/* <Button type=\"submit\" color=\"primary\" className=\"mr-1\" disabled={isSubmitting || !isValid}>{isSubmitting ? 'Wait...' : 'Submit'}</Button> */}\n                            {/* <Button type=\"button\" color=\"success\" className=\"mr-1\" onClick={() => this.touchAll(setTouched, errors)}  disabled={isValid}>Validate</Button> */}\n                            {/* <Button type=\"reset\" color=\"danger\" className=\"mr-1\" onClick={handleReset}>Cancel</Button> */}\n                          </FormGroup>\n                        </Form>\n                      )} />\n              </CardBody>\n              <CardFooter>\n                <Button type=\"submit\" size=\"md\" color=\"primary\"><i className=\"fa fa-dot-circle-o\"></i> Submit</Button>\n                <Button type=\"reset\" size=\"md\" color=\"danger\"><i className=\"fa fa-ban\"></i> Cancel</Button>\n              </CardFooter>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default AddHealthArea;\n"]},"metadata":{},"sourceType":"module"}