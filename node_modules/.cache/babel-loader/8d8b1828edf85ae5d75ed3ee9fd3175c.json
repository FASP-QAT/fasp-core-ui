{"ast":null,"code":"'use strict';\n\nvar USE_TYPEDARRAY = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Uint32Array !== 'undefined';\n\nvar pako = require(\"pako\");\n\nvar utils = require(\"./utils\");\n\nvar GenericWorker = require(\"./stream/GenericWorker\");\n\nvar ARRAY_TYPE = USE_TYPEDARRAY ? \"uint8array\" : \"array\";\nexports.magic = \"\\x08\\x00\";\n/**\n * Create a worker that uses pako to inflate/deflate.\n * @constructor\n * @param {String} action the name of the pako function to call : either \"Deflate\" or \"Inflate\".\n * @param {Object} options the options to use when (de)compressing.\n */\n\nfunction FlateWorker(action, options) {\n  GenericWorker.call(this, \"FlateWorker/\" + action);\n  this._pako = null;\n  this._pakoAction = action;\n  this._pakoOptions = options; // the `meta` object from the last chunk received\n  // this allow this worker to pass around metadata\n\n  this.meta = {};\n}\n\nutils.inherits(FlateWorker, GenericWorker);\n/**\n * @see GenericWorker.processChunk\n */\n\nFlateWorker.prototype.processChunk = function (chunk) {\n  this.meta = chunk.meta;\n\n  if (this._pako === null) {\n    this._createPako();\n  }\n\n  this._pako.push(utils.transformTo(ARRAY_TYPE, chunk.data), false);\n};\n/**\n * @see GenericWorker.flush\n */\n\n\nFlateWorker.prototype.flush = function () {\n  GenericWorker.prototype.flush.call(this);\n\n  if (this._pako === null) {\n    this._createPako();\n  }\n\n  this._pako.push([], true);\n};\n/**\n * @see GenericWorker.cleanUp\n */\n\n\nFlateWorker.prototype.cleanUp = function () {\n  GenericWorker.prototype.cleanUp.call(this);\n  this._pako = null;\n};\n/**\n * Create the _pako object.\n * TODO: lazy-loading this object isn't the best solution but it's the\n * quickest. The best solution is to lazy-load the worker list. See also the\n * issue #446.\n */\n\n\nFlateWorker.prototype._createPako = function () {\n  this._pako = new pako[this._pakoAction]({\n    raw: true,\n    level: this._pakoOptions.level || -1 // default compression\n\n  });\n  var self = this;\n\n  this._pako.onData = function (data) {\n    self.push({\n      data: data,\n      meta: self.meta\n    });\n  };\n};\n\nexports.compressWorker = function (compressionOptions) {\n  return new FlateWorker(\"Deflate\", compressionOptions);\n};\n\nexports.uncompressWorker = function () {\n  return new FlateWorker(\"Inflate\", {});\n};","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/jszip/lib/flate.js"],"names":["USE_TYPEDARRAY","Uint8Array","Uint16Array","Uint32Array","pako","require","utils","GenericWorker","ARRAY_TYPE","exports","magic","FlateWorker","action","options","call","_pako","_pakoAction","_pakoOptions","meta","inherits","prototype","processChunk","chunk","_createPako","push","transformTo","data","flush","cleanUp","raw","level","self","onData","compressWorker","compressionOptions","uncompressWorker"],"mappings":"AAAA;;AACA,IAAIA,cAAc,GAAI,OAAOC,UAAP,KAAsB,WAAvB,IAAwC,OAAOC,WAAP,KAAuB,WAA/D,IAAgF,OAAOC,WAAP,KAAuB,WAA5H;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIE,aAAa,GAAGF,OAAO,CAAC,wBAAD,CAA3B;;AAEA,IAAIG,UAAU,GAAGR,cAAc,GAAG,YAAH,GAAkB,OAAjD;AAEAS,OAAO,CAACC,KAAR,GAAgB,UAAhB;AAEA;;;;;;;AAMA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,OAA7B,EAAsC;AAClCN,EAAAA,aAAa,CAACO,IAAd,CAAmB,IAAnB,EAAyB,iBAAiBF,MAA1C;AAEA,OAAKG,KAAL,GAAa,IAAb;AACA,OAAKC,WAAL,GAAmBJ,MAAnB;AACA,OAAKK,YAAL,GAAoBJ,OAApB,CALkC,CAMlC;AACA;;AACA,OAAKK,IAAL,GAAY,EAAZ;AACH;;AAEDZ,KAAK,CAACa,QAAN,CAAeR,WAAf,EAA4BJ,aAA5B;AAEA;;;;AAGAI,WAAW,CAACS,SAAZ,CAAsBC,YAAtB,GAAqC,UAAUC,KAAV,EAAiB;AAClD,OAAKJ,IAAL,GAAYI,KAAK,CAACJ,IAAlB;;AACA,MAAI,KAAKH,KAAL,KAAe,IAAnB,EAAyB;AACrB,SAAKQ,WAAL;AACH;;AACD,OAAKR,KAAL,CAAWS,IAAX,CAAgBlB,KAAK,CAACmB,WAAN,CAAkBjB,UAAlB,EAA8Bc,KAAK,CAACI,IAApC,CAAhB,EAA2D,KAA3D;AACH,CAND;AAQA;;;;;AAGAf,WAAW,CAACS,SAAZ,CAAsBO,KAAtB,GAA8B,YAAY;AACtCpB,EAAAA,aAAa,CAACa,SAAd,CAAwBO,KAAxB,CAA8Bb,IAA9B,CAAmC,IAAnC;;AACA,MAAI,KAAKC,KAAL,KAAe,IAAnB,EAAyB;AACrB,SAAKQ,WAAL;AACH;;AACD,OAAKR,KAAL,CAAWS,IAAX,CAAgB,EAAhB,EAAoB,IAApB;AACH,CAND;AAOA;;;;;AAGAb,WAAW,CAACS,SAAZ,CAAsBQ,OAAtB,GAAgC,YAAY;AACxCrB,EAAAA,aAAa,CAACa,SAAd,CAAwBQ,OAAxB,CAAgCd,IAAhC,CAAqC,IAArC;AACA,OAAKC,KAAL,GAAa,IAAb;AACH,CAHD;AAKA;;;;;;;;AAMAJ,WAAW,CAACS,SAAZ,CAAsBG,WAAtB,GAAoC,YAAY;AAC5C,OAAKR,KAAL,GAAa,IAAIX,IAAI,CAAC,KAAKY,WAAN,CAAR,CAA2B;AACpCa,IAAAA,GAAG,EAAE,IAD+B;AAEpCC,IAAAA,KAAK,EAAE,KAAKb,YAAL,CAAkBa,KAAlB,IAA2B,CAAC,CAFC,CAEC;;AAFD,GAA3B,CAAb;AAIA,MAAIC,IAAI,GAAG,IAAX;;AACA,OAAKhB,KAAL,CAAWiB,MAAX,GAAoB,UAASN,IAAT,EAAe;AAC/BK,IAAAA,IAAI,CAACP,IAAL,CAAU;AACNE,MAAAA,IAAI,EAAGA,IADD;AAENR,MAAAA,IAAI,EAAGa,IAAI,CAACb;AAFN,KAAV;AAIH,GALD;AAMH,CAZD;;AAcAT,OAAO,CAACwB,cAAR,GAAyB,UAAUC,kBAAV,EAA8B;AACnD,SAAO,IAAIvB,WAAJ,CAAgB,SAAhB,EAA2BuB,kBAA3B,CAAP;AACH,CAFD;;AAGAzB,OAAO,CAAC0B,gBAAR,GAA2B,YAAY;AACnC,SAAO,IAAIxB,WAAJ,CAAgB,SAAhB,EAA2B,EAA3B,CAAP;AACH,CAFD","sourcesContent":["'use strict';\nvar USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');\n\nvar pako = require(\"pako\");\nvar utils = require(\"./utils\");\nvar GenericWorker = require(\"./stream/GenericWorker\");\n\nvar ARRAY_TYPE = USE_TYPEDARRAY ? \"uint8array\" : \"array\";\n\nexports.magic = \"\\x08\\x00\";\n\n/**\n * Create a worker that uses pako to inflate/deflate.\n * @constructor\n * @param {String} action the name of the pako function to call : either \"Deflate\" or \"Inflate\".\n * @param {Object} options the options to use when (de)compressing.\n */\nfunction FlateWorker(action, options) {\n    GenericWorker.call(this, \"FlateWorker/\" + action);\n\n    this._pako = null;\n    this._pakoAction = action;\n    this._pakoOptions = options;\n    // the `meta` object from the last chunk received\n    // this allow this worker to pass around metadata\n    this.meta = {};\n}\n\nutils.inherits(FlateWorker, GenericWorker);\n\n/**\n * @see GenericWorker.processChunk\n */\nFlateWorker.prototype.processChunk = function (chunk) {\n    this.meta = chunk.meta;\n    if (this._pako === null) {\n        this._createPako();\n    }\n    this._pako.push(utils.transformTo(ARRAY_TYPE, chunk.data), false);\n};\n\n/**\n * @see GenericWorker.flush\n */\nFlateWorker.prototype.flush = function () {\n    GenericWorker.prototype.flush.call(this);\n    if (this._pako === null) {\n        this._createPako();\n    }\n    this._pako.push([], true);\n};\n/**\n * @see GenericWorker.cleanUp\n */\nFlateWorker.prototype.cleanUp = function () {\n    GenericWorker.prototype.cleanUp.call(this);\n    this._pako = null;\n};\n\n/**\n * Create the _pako object.\n * TODO: lazy-loading this object isn't the best solution but it's the\n * quickest. The best solution is to lazy-load the worker list. See also the\n * issue #446.\n */\nFlateWorker.prototype._createPako = function () {\n    this._pako = new pako[this._pakoAction]({\n        raw: true,\n        level: this._pakoOptions.level || -1 // default compression\n    });\n    var self = this;\n    this._pako.onData = function(data) {\n        self.push({\n            data : data,\n            meta : self.meta\n        });\n    };\n};\n\nexports.compressWorker = function (compressionOptions) {\n    return new FlateWorker(\"Deflate\", compressionOptions);\n};\nexports.uncompressWorker = function () {\n    return new FlateWorker(\"Inflate\", {});\n};\n"]},"metadata":{},"sourceType":"script"}