{"ast":null,"code":"import _classCallCheck from \"/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/src/views/subFundingSource/EditSubFundingSourceComponent.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport FundingSourceService from \"../../api/FundingSourceService\";\nimport AuthenticationService from '../common/AuthenticationService.js';\nvar initialValues = {\n  subFundingSource: \"\"\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    subFundingSource: Yup.string().required('Please enter health area')\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar EditSubFundingSourceComponent = /*#__PURE__*/function (_Component) {\n  _inherits(EditSubFundingSourceComponent, _Component);\n\n  function EditSubFundingSourceComponent(props) {\n    var _this;\n\n    _classCallCheck(this, EditSubFundingSourceComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditSubFundingSourceComponent).call(this, props));\n    _this.state = {\n      subFundingSource: _this.props.location.state.subFundingSource,\n      message: ''\n    };\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    _this.dataChange = _this.dataChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(EditSubFundingSourceComponent, [{\n    key: \"dataChange\",\n    value: function dataChange(event) {\n      var subFundingSource = this.state.subFundingSource;\n\n      if (event.target.name == \"subFundingSource\") {\n        subFundingSource.label.label_en = event.target.value;\n      }\n\n      this.setState({\n        subFundingSource: subFundingSource\n      }, function () {});\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        subFundingSource: true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('subFundingSourceForm', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Edit Sub Funding Source\"), ' '), React.createElement(Formik, {\n        initialValues: initialValues,\n        validate: validate(validationSchema),\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting,\n              setErrors = _ref.setErrors;\n          AuthenticationService.setupAxiosInterceptors();\n          FundingSourceService.updateSubFundingSource(_this2.state.subFundingSource).then(function (response) {\n            if (response.data.status == \"Success\") {\n              _this2.props.history.push(\"/subFundingSource/subFundingSourceList/\".concat(response.data.message));\n            } else {\n              _this2.setState({\n                message: response.data.message\n              });\n            }\n          }).catch(function (error) {\n            switch (error.message) {\n              case \"Network Error\":\n                _this2.setState({\n                  message: error.message\n                });\n\n                break;\n\n              default:\n                _this2.setState({\n                  message: error.response.data.message\n                });\n\n                break;\n            }\n          });\n        },\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"subFundingSourceForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"fundingSourceId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          }, \"Funding Source\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"fundingSourceId\",\n            id: \"fundingSourceId\",\n            bsSize: \"lg\",\n            readOnly: true,\n            value: _this2.state.subFundingSource.fundingSource.label.label_en,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144\n            },\n            __self: this\n          })), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"healthArea\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155\n            },\n            __self: this\n          }, \"Sub Funding Source\"), React.createElement(Input, {\n            type: \"text\",\n            name: \"subFundingSource\",\n            id: \"subFundingSource\",\n            valid: !errors.subFundingSource,\n            invalid: touched.subFundingSource && !!errors.subFundingSource,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this2.dataChange(e);\n            },\n            onBlur: handleBlur,\n            value: _this2.state.subFundingSource.label.label_en,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          }, errors.subFundingSource)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167\n            },\n            __self: this\n          }, React.createElement(Label, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168\n            },\n            __self: this\n          }, \"Inline Radios\"), React.createElement(FormGroup, {\n            check: true,\n            inline: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169\n            },\n            __self: this\n          }, React.createElement(Input, {\n            className: \"form-check-input\",\n            type: \"radio\",\n            id: \"inline-radio1\",\n            name: \"inline-radios\",\n            value: \"option1\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170\n            },\n            __self: this\n          }), React.createElement(Label, {\n            className: \"form-check-label\",\n            check: true,\n            htmlFor: \"inline-radio1\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171\n            },\n            __self: this\n          }, \"One\")), React.createElement(FormGroup, {\n            check: true,\n            inline: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 173\n            },\n            __self: this\n          }, React.createElement(Input, {\n            className: \"form-check-input\",\n            type: \"radio\",\n            id: \"inline-radio2\",\n            name: \"inline-radios\",\n            value: \"option2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174\n            },\n            __self: this\n          }), React.createElement(Label, {\n            className: \"form-check-label\",\n            check: true,\n            htmlFor: \"inline-radio2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175\n            },\n            __self: this\n          }, \"Two\")))), React.createElement(CardFooter, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 179\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"submit\",\n            color: \"success\",\n            className: \"mr-1\",\n            onClick: function onClick() {\n              return _this2.touchAll(setTouched, errors);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181\n            },\n            __self: this\n          }, \"Update\"), React.createElement(Button, {\n            type: \"reset\",\n            color: \"danger\",\n            className: \"mr-1\",\n            onClick: _this2.cancelClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 182\n            },\n            __self: this\n          }, \"Cancel\"))));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/subFundingSource/subFundingSourceList/\" + \"Action Canceled\");\n    }\n  }]);\n\n  return EditSubFundingSourceComponent;\n}(Component);\n\nexport default EditSubFundingSourceComponent;","map":{"version":3,"sources":["/home/altius/NetbeansProjects/gitRepos/fasp-core-ui/src/views/subFundingSource/EditSubFundingSourceComponent.js"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","FormText","InputGroup","InputGroupAddon","InputGroupText","Formik","Yup","FundingSourceService","AuthenticationService","initialValues","subFundingSource","validationSchema","values","object","shape","string","required","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","EditSubFundingSourceComponent","props","state","location","message","cancelClicked","bind","dataChange","event","target","name","label","label_en","value","setState","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","flexBasis","setSubmitting","setErrors","setupAxiosInterceptors","updateSubFundingSource","then","response","data","status","history","push","catch","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","fundingSource","e","touchAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input, FormText, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css'\n\nimport FundingSourceService from \"../../api/FundingSourceService\";\nimport AuthenticationService from '../common/AuthenticationService.js';\n\nlet initialValues = {\n    subFundingSource: \"\"\n}\n\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        subFundingSource: Yup.string()\n            .required('Please enter health area')\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\n\nclass EditSubFundingSourceComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            subFundingSource: this.props.location.state.subFundingSource,\n            message: ''\n        }\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.dataChange = this.dataChange.bind(this);\n    }\n\n    dataChange(event) {\n        let { subFundingSource } = this.state;\n        if (event.target.name == \"subFundingSource\") {\n            subFundingSource.label.label_en = event.target.value;\n        }\n        this.setState({\n            subFundingSource\n        },\n            () => { });\n    };\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            subFundingSource: true\n        }\n        )\n        this.validateForm(errors)\n    }\n    validateForm(errors) {\n        this.findFirstError('subFundingSourceForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"animated fadeIn\">\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>Edit Sub Funding Source</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                initialValues={initialValues}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {\n                                    AuthenticationService.setupAxiosInterceptors();\n                                    FundingSourceService.updateSubFundingSource(this.state.subFundingSource)\n                                        .then(response => {\n                                            if (response.data.status == \"Success\") {\n                                                this.props.history.push(`/subFundingSource/subFundingSourceList/${response.data.message}`)\n                                            } else {\n                                                this.setState({\n                                                    message: response.data.message\n                                                })\n                                            }\n                                        })\n                                        .catch(\n                                            error => {\n                                                switch (error.message) {\n                                                    case \"Network Error\":\n                                                        this.setState({\n                                                            message: error.message\n                                                        })\n                                                        break\n                                                    default:\n                                                        this.setState({\n                                                            message: error.response.data.message\n                                                        })\n                                                        break\n                                                }\n                                            }\n                                        );\n                                }}\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='subFundingSourceForm'>\n                                                <CardBody>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"fundingSourceId\">Funding Source</Label>\n                                                        <Input\n                                                            type=\"text\"\n                                                            name=\"fundingSourceId\"\n                                                            id=\"fundingSourceId\"\n                                                            bsSize=\"lg\"\n                                                            readOnly\n                                                            value={this.state.subFundingSource.fundingSource.label.label_en}\n                                                        >\n                                                        </Input>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"healthArea\">Sub Funding Source</Label>\n                                                        <Input type=\"text\"\n                                                            name=\"subFundingSource\"\n                                                            id=\"subFundingSource\"\n                                                            valid={!errors.subFundingSource}\n                                                            invalid={touched.subFundingSource && !!errors.subFundingSource}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            value={this.state.subFundingSource.label.label_en}\n                                                            required />\n                                                        <FormFeedback>{errors.subFundingSource}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label>Inline Radios</Label>\n                                                        <FormGroup check inline>\n                                                            <Input className=\"form-check-input\" type=\"radio\" id=\"inline-radio1\" name=\"inline-radios\" value=\"option1\" />\n                                                            <Label className=\"form-check-label\" check htmlFor=\"inline-radio1\">One</Label>\n                                                        </FormGroup>\n                                                        <FormGroup check inline>\n                                                            <Input className=\"form-check-input\" type=\"radio\" id=\"inline-radio2\" name=\"inline-radios\" value=\"option2\" />\n                                                            <Label className=\"form-check-label\" check htmlFor=\"inline-radio2\">Two</Label>\n                                                        </FormGroup>\n                                                    </FormGroup>\n                                                </CardBody>\n                                                <CardFooter>\n                                                    <FormGroup>\n                                                        <Button type=\"submit\" color=\"success\" className=\"mr-1\" onClick={() => this.touchAll(setTouched, errors)}>Update</Button>\n                                                        <Button type=\"reset\" color=\"danger\" className=\"mr-1\" onClick={this.cancelClicked}>Cancel</Button>\n                                                    </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n\n                                        )} />\n\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n    cancelClicked() {\n        this.props.history.push(`/subFundingSource/subFundingSourceList/` + \"Action Canceled\")\n    }\n}\n\nexport default EditSubFundingSourceComponent;\n"]},"metadata":{},"sourceType":"module"}