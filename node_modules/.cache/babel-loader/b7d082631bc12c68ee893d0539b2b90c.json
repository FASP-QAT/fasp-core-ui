{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/home/altius/NodeJs/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/altius/NodeJs/fasp-core-ui/src/views/Product/EditProduct.js\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, CardHeader, CardFooter, Button, FormFeedback, CardBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport RealmServcie from '../../api/RealmService';\nimport UnitService from '../../api/UnitService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport getLabelText from '../../CommonComponent/getLabelText';\nimport ProductService from '../../api/ProductService';\nimport i18n from '../../i18n';\nvar initialValues = {\n  productName: '',\n  genericName: '',\n  realmId: '',\n  productCategoryId: '',\n  unitId: ''\n};\n\nvar validationSchema = function validationSchema(values) {\n  return Yup.object().shape({\n    productName: Yup.string().required(i18n.t('static.product.productnametext')),\n    genericName: Yup.string().required(i18n.t('static.product.generictext')),\n    realmId: Yup.string().required(i18n.t('static.product.realmtext')),\n    productCategoryId: Yup.string().required(i18n.t('static.product.productcategorytext')),\n    unitId: Yup.string().required(i18n.t('static.product.productunittext'))\n  });\n};\n\nvar validate = function validate(getValidationSchema) {\n  return function (values) {\n    var validationSchema = getValidationSchema(values);\n\n    try {\n      validationSchema.validateSync(values, {\n        abortEarly: false\n      });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nvar getErrorsFromValidationError = function getErrorsFromValidationError(validationError) {\n  var FIRST_ERROR = 0;\n  return validationError.inner.reduce(function (errors, error) {\n    return _objectSpread({}, errors, _defineProperty({}, error.path, error.errors[FIRST_ERROR]));\n  }, {});\n};\n\nvar EditProduct = /*#__PURE__*/function (_Component) {\n  _inherits(EditProduct, _Component);\n\n  function EditProduct(props) {\n    var _this;\n\n    _classCallCheck(this, EditProduct);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EditProduct).call(this, props));\n    _this.state = {\n      product: _this.props.location.state.product,\n      lan: localStorage.getItem('lang'),\n      realmList: [],\n      productCategoryList: [],\n      unitList: []\n    };\n    initialValues = {\n      productName: getLabelText(_this.props.location.state.product.label, _this.state.lan),\n      genericName: getLabelText(_this.props.location.state.product.genericLabel, _this.state.lan),\n      realmId: _this.props.location.state.product.realm.realmId,\n      productCategoryId: _this.props.location.state.product.productCategory.productCategoryId,\n      unitId: _this.props.location.state.product.forecastingUnit.unitId\n    };\n    _this.dataChange = _this.dataChange.bind(_assertThisInitialized(_this));\n    _this.cancelClicked = _this.cancelClicked.bind(_assertThisInitialized(_this));\n    _this.getDependentLists = _this.getDependentLists.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(EditProduct, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      AuthenticationService.setupAxiosInterceptors();\n      RealmServcie.getRealmListAll().then(function (response) {\n        _this2.setState({\n          realmList: response.data.data\n        });\n      }).catch(function (error) {\n        switch (error.message) {\n          case \"Network Error\":\n            _this2.setState({\n              message: error.message\n            });\n\n            break;\n\n          default:\n            _this2.setState({\n              message: error.response.data.message\n            });\n\n            break;\n        }\n      });\n      UnitService.getUnitListAll().then(function (response) {\n        _this2.setState({\n          unitList: response.data.data\n        });\n      }).catch(function (error) {\n        switch (error.message) {\n          case \"Network Error\":\n            _this2.setState({\n              message: error.message\n            });\n\n            break;\n\n          default:\n            _this2.setState({\n              message: error.response.data.message\n            });\n\n            break;\n        }\n      });\n      ProductService.getProdcutCategoryListByRealmId(this.props.location.state.product.realm.realmId).then(function (response) {\n        console.log(response);\n\n        _this2.setState({\n          productCategoryList: response.data.data\n        });\n      }).catch(function (error) {\n        switch (error.message) {\n          case \"Network Error\":\n            _this2.setState({\n              message: error.message\n            });\n\n            break;\n\n          default:\n            _this2.setState({\n              message: error.response.data.message\n            });\n\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"getDependentLists\",\n    value: function getDependentLists(event) {\n      var _this3 = this;\n\n      AuthenticationService.setupAxiosInterceptors();\n      ProductService.getProdcutCategoryListByRealmId(event.target.value).then(function (response) {\n        console.log(response);\n\n        _this3.setState({\n          productCategoryList: response.data.data\n        });\n      }).catch(function (error) {\n        switch (error.message) {\n          case \"Network Error\":\n            _this3.setState({\n              message: error.message\n            });\n\n            break;\n\n          default:\n            _this3.setState({\n              message: error.response.data.message\n            });\n\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"dataChange\",\n    value: function dataChange(event) {\n      var product = this.state.product;\n\n      if (event.target.name === \"productName\") {\n        product.label.label_en = event.target.value;\n      }\n\n      if (event.target.name === \"genericName\") {\n        product.genericLabel.label_en = event.target.value;\n      }\n\n      if (event.target.name === \"realmId\") {\n        product.realm.realmId = event.target.value;\n      }\n\n      if (event.target.name === \"productCategoryId\") {\n        product.productCategory.productCategoryId = event.target.value;\n      }\n\n      if (event.target.name === \"unitId\") {\n        product.forecastingUnit.unitId = event.target.value;\n      }\n\n      if (event.target.name === \"stopDate\") {\n        product.stopDate = event.target.value;\n      }\n\n      if (event.target.name === \"active\") {\n        product.active = event.target.id === \"active2\" ? false : true;\n      }\n\n      this.setState({\n        product: product\n      }, function () {\n        console.log(product);\n      });\n    }\n  }, {\n    key: \"touchAll\",\n    value: function touchAll(setTouched, errors) {\n      setTouched({\n        productName: true,\n        genericName: true,\n        realmId: true,\n        productCategoryId: true,\n        unitId: true\n      });\n      this.validateForm(errors);\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm(errors) {\n      this.findFirstError('productForm', function (fieldName) {\n        return Boolean(errors[fieldName]);\n      });\n    }\n  }, {\n    key: \"findFirstError\",\n    value: function findFirstError(formName, hasError) {\n      var form = document.forms[formName];\n\n      for (var i = 0; i < form.length; i++) {\n        if (hasError(form[i].name)) {\n          form[i].focus();\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var realmList = this.state.realmList;\n      var unitList = this.state.unitList;\n      var productCategoryList = this.state.productCategoryList;\n      var realms = realmList.length > 0 && realmList.map(function (item, i) {\n        return React.createElement(\"option\", {\n          key: i,\n          value: item.realmId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          },\n          __self: this\n        }, getLabelText(item.label, _this4.state.lan));\n      }, this);\n      var units = unitList.length > 0 && unitList.map(function (item, i) {\n        return React.createElement(\"option\", {\n          key: i,\n          value: item.unitId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }, getLabelText(item.label, _this4.state.lan));\n      }, this);\n      var productCategories = productCategoryList.length > 0 && productCategoryList.map(function (item, i) {\n        return React.createElement(\"option\", {\n          key: i,\n          value: item.productCategoryId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 255\n          },\n          __self: this\n        }, getLabelText(item.label, _this4.state.lan));\n      }, this);\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(Col, {\n        sm: 12,\n        md: 6,\n        style: {\n          flexBasis: 'auto'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }), React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, i18n.t('static.product.productedit')), ' '), React.createElement(Formik, {\n        initialValues: initialValues,\n        validate: validate(validationSchema),\n        onSubmit: function onSubmit(values, _ref) {\n          var setSubmitting = _ref.setSubmitting,\n              setErrors = _ref.setErrors;\n          // AuthenticationService.setupAxiosInterceptors();\n          console.log(\"==============\", _this4.state.product);\n          ProductService.editProduct(_this4.state.product).then(function (response) {\n            if (response.status == \"200\") {\n              console.log(response);\n\n              _this4.props.history.push(\"/product/listProduct/\".concat(response.data.message));\n            } else {\n              _this4.setState({\n                message: response.data.message\n              });\n            }\n          }).catch(function (error) {\n            switch (error.message) {\n              case \"Network Error\":\n                _this4.setState({\n                  message: error.message\n                });\n\n                break;\n\n              default:\n                _this4.setState({\n                  message: error.response.data.message\n                });\n\n                break;\n            }\n          });\n        },\n        render: function render(_ref2) {\n          var values = _ref2.values,\n              errors = _ref2.errors,\n              touched = _ref2.touched,\n              handleChange = _ref2.handleChange,\n              handleBlur = _ref2.handleBlur,\n              handleSubmit = _ref2.handleSubmit,\n              isSubmitting = _ref2.isSubmitting,\n              isValid = _ref2.isValid,\n              setTouched = _ref2.setTouched;\n          return React.createElement(Form, {\n            onSubmit: handleSubmit,\n            noValidate: true,\n            name: \"productForm\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 314\n            },\n            __self: this\n          }, React.createElement(CardBody, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 315\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 316\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"product\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 317\n            },\n            __self: this\n          }, i18n.t('static.product.product')), React.createElement(Input // value={getLabelText(this.state.product.label,this.state.lan)}\n          , {\n            value: _this4.state.product.label.label_en,\n            type: \"text\",\n            name: \"productName\",\n            id: \"productName\",\n            bsSize: \"sm\",\n            valid: !errors.productName,\n            invalid: touched.productName && !!errors.productName,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this4.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 330\n            },\n            __self: this\n          }, errors.productName)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 332\n            },\n            __self: this\n          }, React.createElement(Label, {\n            for: \"product\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 333\n            },\n            __self: this\n          }, i18n.t('static.product.productgenericname')), React.createElement(Input, {\n            type: \"text\" // value={getLabelText(this.state.product.genericLabel, this.state.lan)}\n            ,\n            value: _this4.state.product.genericLabel.label_en,\n            name: \"genericName\",\n            id: \"genericName\",\n            bsSize: \"sm\",\n            valid: !errors.genericName,\n            invalid: touched.genericName && !!errors.genericName,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this4.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 334\n            },\n            __self: this\n          }), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 345\n            },\n            __self: this\n          }, errors.genericName)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 347\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"realmId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 348\n            },\n            __self: this\n          }, i18n.t('static.product.realm')), React.createElement(Input, {\n            type: \"select\",\n            name: \"realmId\",\n            id: \"realmId\",\n            bsSize: \"sm\",\n            valid: !errors.realmId,\n            invalid: touched.realmId && !!errors.realmId,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this4.dataChange(e);\n\n              _this4.getDependentLists(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            disabled: true,\n            value: _this4.state.product.realm.realmId,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 349\n            },\n            __self: this\n          }, React.createElement(\"option\", {\n            value: \"0\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 362\n            },\n            __self: this\n          }, i18n.t('static.common.select')), realms), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 365\n            },\n            __self: this\n          }, errors.realmId)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 367\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 368\n            },\n            __self: this\n          }, i18n.t('static.product.productcategory')), React.createElement(Input, {\n            type: \"select\",\n            name: \"productCategoryId\",\n            id: \"productCategoryId\",\n            bsSize: \"sm\",\n            valid: !errors.productCategoryId,\n            invalid: touched.productCategoryId && !!errors.productCategoryId,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this4.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            value: _this4.state.product.productCategory.productCategoryId,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 369\n            },\n            __self: this\n          }, productCategories), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 387\n            },\n            __self: this\n          }, errors.productCategoryId)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 389\n            },\n            __self: this\n          }, React.createElement(Label, {\n            htmlFor: \"unitId\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 390\n            },\n            __self: this\n          }, \"Forcasting Unit\"), React.createElement(Input, {\n            type: \"select\",\n            name: \"unitId\",\n            id: \"unitId\",\n            bsSize: \"sm\",\n            valid: !errors.unitId,\n            invalid: touched.unitId && !!errors.unitId,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this4.dataChange(e);\n            },\n            onBlur: handleBlur,\n            required: true,\n            value: _this4.state.product.forecastingUnit.unitId,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 391\n            },\n            __self: this\n          }, units), React.createElement(FormFeedback, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 406\n            },\n            __self: this\n          }, errors.unitId)), React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 408\n            },\n            __self: this\n          }, React.createElement(Label, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 409\n            },\n            __self: this\n          }, i18n.t('static.common.status'), \"\\xA0\\xA0\"), React.createElement(FormGroup, {\n            check: true,\n            inline: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 410\n            },\n            __self: this\n          }, React.createElement(Input, {\n            className: \"form-check-input\",\n            type: \"radio\",\n            id: \"active1\",\n            name: \"active\",\n            value: true,\n            checked: _this4.state.product.active === true,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this4.dataChange(e);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 411\n            },\n            __self: this\n          }), React.createElement(Label, {\n            className: \"form-check-label\",\n            check: true,\n            htmlFor: \"inline-active1\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 420\n            },\n            __self: this\n          }, i18n.t('static.common.active'))), React.createElement(FormGroup, {\n            check: true,\n            inline: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 426\n            },\n            __self: this\n          }, React.createElement(Input, {\n            className: \"form-check-input\",\n            type: \"radio\",\n            id: \"active2\",\n            name: \"active\",\n            value: false,\n            checked: _this4.state.product.active === false,\n            onChange: function onChange(e) {\n              handleChange(e);\n\n              _this4.dataChange(e);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 427\n            },\n            __self: this\n          }), React.createElement(Label, {\n            className: \"form-check-label\",\n            check: true,\n            htmlFor: \"inline-active2\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 436\n            },\n            __self: this\n          }, i18n.t('static.common.disabled'))))), React.createElement(CardFooter, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 444\n            },\n            __self: this\n          }, React.createElement(FormGroup, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 445\n            },\n            __self: this\n          }, React.createElement(Button, {\n            type: \"button\",\n            size: \"sm\",\n            color: \"danger\",\n            className: \"float-right mr-1\",\n            onClick: _this4.cancelClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 448\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-times\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 448\n            },\n            __self: this\n          }), \" \", i18n.t('static.common.cancel')), React.createElement(Button, {\n            type: \"submit\",\n            size: \"sm\",\n            color: \"success\",\n            className: \"float-right mr-1\",\n            onClick: function onClick() {\n              return _this4.touchAll(setTouched, errors);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 449\n            },\n            __self: this\n          }, React.createElement(\"i\", {\n            className: \"fa fa-check\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 449\n            },\n            __self: this\n          }), \"Update\"), \"\\xA0\")));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      })))));\n    }\n  }, {\n    key: \"cancelClicked\",\n    value: function cancelClicked() {\n      this.props.history.push(\"/product/listProduct/\" + \"Action Canceled\");\n    }\n  }]);\n\n  return EditProduct;\n}(Component);\n\nexport { EditProduct as default };","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/src/views/Product/EditProduct.js"],"names":["React","Component","Row","Col","Card","CardHeader","CardFooter","Button","FormFeedback","CardBody","Form","FormGroup","Label","Input","Formik","Yup","RealmServcie","UnitService","AuthenticationService","getLabelText","ProductService","i18n","initialValues","productName","genericName","realmId","productCategoryId","unitId","validationSchema","values","object","shape","string","required","t","validate","getValidationSchema","validateSync","abortEarly","error","getErrorsFromValidationError","validationError","FIRST_ERROR","inner","reduce","errors","path","EditProduct","props","state","product","location","lan","localStorage","getItem","realmList","productCategoryList","unitList","label","genericLabel","realm","productCategory","forecastingUnit","dataChange","bind","cancelClicked","getDependentLists","setupAxiosInterceptors","getRealmListAll","then","response","setState","data","catch","message","getUnitListAll","getProdcutCategoryListByRealmId","console","log","event","target","value","name","label_en","stopDate","active","id","setTouched","validateForm","findFirstError","fieldName","Boolean","formName","hasError","form","document","forms","i","length","focus","realms","map","item","units","productCategories","flexBasis","setSubmitting","setErrors","editProduct","status","history","push","touched","handleChange","handleBlur","handleSubmit","isSubmitting","isValid","e","touchAll"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Row, Col, Card, CardHeader,\n    CardFooter, Button, FormFeedback, CardBody,\n    Form, FormGroup, Label, Input\n} from 'reactstrap';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup'\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport RealmServcie from '../../api/RealmService';\nimport UnitService from '../../api/UnitService';\nimport AuthenticationService from '../common/AuthenticationService.js';\nimport getLabelText from '../../CommonComponent/getLabelText'\nimport ProductService from '../../api/ProductService';\nimport i18n from '../../i18n'\nlet initialValues = {\n    productName: '',\n    genericName: '',\n    realmId: '',\n    productCategoryId: '',\n    unitId: ''\n}\nconst validationSchema = function (values) {\n    return Yup.object().shape({\n        productName: Yup.string()\n        .required(i18n.t('static.product.productnametext')),\n    genericName: Yup.string()\n    .required(i18n.t('static.product.generictext')),\n    realmId: Yup.string()\n    .required(i18n.t('static.product.realmtext')),\n    productCategoryId: Yup.string()\n    .required(i18n.t('static.product.productcategorytext')),\n    unitId: Yup.string()\n    .required(i18n.t('static.product.productunittext'))\n    })\n}\n\nconst validate = (getValidationSchema) => {\n    return (values) => {\n        const validationSchema = getValidationSchema(values)\n        try {\n            validationSchema.validateSync(values, { abortEarly: false })\n            return {}\n        } catch (error) {\n            return getErrorsFromValidationError(error)\n        }\n    }\n}\n\nconst getErrorsFromValidationError = (validationError) => {\n    const FIRST_ERROR = 0\n    return validationError.inner.reduce((errors, error) => {\n        return {\n            ...errors,\n            [error.path]: error.errors[FIRST_ERROR],\n        }\n    }, {})\n}\n\n\nexport default class EditProduct extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            product: this.props.location.state.product,\n            lan: localStorage.getItem('lang'),\n            realmList: [],\n            productCategoryList: [],\n            unitList: []\n        }\n        initialValues = {\n            productName: getLabelText(this.props.location.state.product.label, this.state.lan),\n            genericName: getLabelText(this.props.location.state.product.genericLabel, this.state.lan),\n            realmId: this.props.location.state.product.realm.realmId,\n            productCategoryId: this.props.location.state.product.productCategory.productCategoryId,\n            unitId: this.props.location.state.product.forecastingUnit.unitId,\n\n        }\n\n        this.dataChange = this.dataChange.bind(this);\n        this.cancelClicked = this.cancelClicked.bind(this);\n        this.getDependentLists = this.getDependentLists.bind(this);\n    }\n    componentDidMount() {\n        AuthenticationService.setupAxiosInterceptors();\n        RealmServcie.getRealmListAll()\n            .then(response => {\n                this.setState({\n                    realmList: response.data.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n        UnitService.getUnitListAll()\n            .then(response => {\n                this.setState({\n                    unitList: response.data.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n        ProductService.getProdcutCategoryListByRealmId(this.props.location.state.product.realm.realmId)\n            .then(response => {\n                console.log(response);\n                this.setState({\n                    productCategoryList: response.data.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n\n    }\n    getDependentLists(event) {\n        AuthenticationService.setupAxiosInterceptors();\n        ProductService.getProdcutCategoryListByRealmId(event.target.value)\n            .then(response => {\n                console.log(response);\n                this.setState({\n                    productCategoryList: response.data.data\n                })\n            }).catch(\n                error => {\n                    switch (error.message) {\n                        case \"Network Error\":\n                            this.setState({\n                                message: error.message\n                            })\n                            break\n                        default:\n                            this.setState({\n                                message: error.response.data.message\n                            })\n                            break\n                    }\n                }\n            );\n\n    }\n    dataChange(event) {\n        let { product } = this.state;\n        if (event.target.name === \"productName\") {\n            product.label.label_en = event.target.value;\n        }\n        if (event.target.name === \"genericName\") {\n            product.genericLabel.label_en = event.target.value;\n        }\n        if (event.target.name === \"realmId\") {\n            product.realm.realmId = event.target.value;\n        }\n        if (event.target.name === \"productCategoryId\") {\n            product.productCategory.productCategoryId = event.target.value;\n        }\n        if (event.target.name === \"unitId\") {\n            product.forecastingUnit.unitId = event.target.value;\n        }\n        if (event.target.name === \"stopDate\") {\n            product.stopDate = event.target.value;\n        }\n        if (event.target.name === \"active\") {\n            product.active = event.target.id === \"active2\" ? false : true;\n        }\n        this.setState({\n            product\n        },\n            () => { console.log(product) });\n    };\n\n    touchAll(setTouched, errors) {\n        setTouched({\n            productName: true,\n            genericName: true,\n            realmId: true,\n            productCategoryId: true,\n            unitId: true,\n        }\n        );\n        this.validateForm(errors);\n    }\n    validateForm(errors) {\n        this.findFirstError('productForm', (fieldName) => {\n            return Boolean(errors[fieldName])\n        })\n    }\n    findFirstError(formName, hasError) {\n        const form = document.forms[formName]\n        for (let i = 0; i < form.length; i++) {\n            if (hasError(form[i].name)) {\n                form[i].focus()\n                break\n            }\n        }\n    }\n    render() {\n        const { realmList } = this.state;\n        const { unitList } = this.state;\n        const { productCategoryList } = this.state;\n        let realms = realmList.length > 0 && realmList.map((item, i) => {\n            return (\n                <option key={i} value={item.realmId}>\n                    {getLabelText(item.label, this.state.lan)}\n                </option>\n            )\n        }, this);\n        let units = unitList.length > 0 && unitList.map((item, i) => {\n            return (\n                <option key={i} value={item.unitId}>\n                    {getLabelText(item.label, this.state.lan)}\n                </option>\n            )\n        }, this);\n        let productCategories = productCategoryList.length > 0 && productCategoryList.map((item, i) => {\n            return (\n                <option key={i} value={item.productCategoryId}>\n                    {getLabelText(item.label, this.state.lan)}\n                </option>\n            )\n        }, this);\n        return (\n            <div className=\"animated fadeIn\">\n                <Row>\n                    <Col sm={12} md={6} style={{ flexBasis: 'auto' }}>\n                        <Card>\n                            <CardHeader>\n                                <i className=\"icon-note\"></i><strong>{i18n.t('static.product.productedit')}</strong>{' '}\n                            </CardHeader>\n                            <Formik\n                                initialValues={initialValues}\n                                validate={validate(validationSchema)}\n                                onSubmit={(values, { setSubmitting, setErrors }) => {\n                                    // AuthenticationService.setupAxiosInterceptors();\n                                    console.log(\"==============\", this.state.product);\n                                    ProductService.editProduct(this.state.product)\n                                        .then(response => {\n                                            if (response.status == \"200\") {\n                                                console.log(response);\n                                                this.props.history.push(`/product/listProduct/${response.data.message}`)\n                                            } else {\n                                                this.setState({\n                                                    message: response.data.message\n                                                })\n                                            }\n                                        })\n                                        .catch(\n                                            error => {\n                                                switch (error.message) {\n                                                    case \"Network Error\":\n                                                        this.setState({\n                                                            message: error.message\n                                                        })\n                                                        break\n                                                    default:\n                                                        this.setState({\n                                                            message: error.response.data.message\n                                                        })\n                                                        break\n                                                }\n                                            }\n                                        );\n                                }}\n                                render={\n                                    ({\n                                        values,\n                                        errors,\n                                        touched,\n                                        handleChange,\n                                        handleBlur,\n                                        handleSubmit,\n                                        isSubmitting,\n                                        isValid,\n                                        setTouched\n                                    }) => (\n                                            <Form onSubmit={handleSubmit} noValidate name='productForm'>\n                                                <CardBody>\n                                                    <FormGroup>\n                                                        <Label for=\"product\">{i18n.t('static.product.product')}</Label>\n                                                        <Input \n                                                            // value={getLabelText(this.state.product.label,this.state.lan)}\n                                                            value={this.state.product.label.label_en}\n                                                            type=\"text\"\n                                                            name=\"productName\"\n                                                            id=\"productName\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.productName}\n                                                            invalid={touched.productName && !!errors.productName}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required />\n                                                        <FormFeedback>{errors.productName}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label for=\"product\">{i18n.t('static.product.productgenericname')}</Label>\n                                                        <Input type=\"text\"\n                                                            // value={getLabelText(this.state.product.genericLabel, this.state.lan)}\n                                                            value={this.state.product.genericLabel.label_en}\n                                                            name=\"genericName\"\n                                                            id=\"genericName\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.genericName}\n                                                            invalid={touched.genericName && !!errors.genericName}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required />\n                                                        <FormFeedback>{errors.genericName}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"realmId\">{i18n.t('static.product.realm')}</Label>\n                                                        <Input\n                                                            type=\"select\"\n                                                            name=\"realmId\"\n                                                            id=\"realmId\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.realmId}\n                                                            invalid={touched.realmId && !!errors.realmId}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e); this.getDependentLists(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            disabled\n                                                            value={this.state.product.realm.realmId}\n                                                        >\n                                                            <option value=\"0\">{i18n.t('static.common.select')}</option>\n                                                            {realms}\n                                                        </Input>\n                                                        <FormFeedback>{errors.realmId}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"\">{i18n.t('static.product.productcategory')}</Label>\n                                                        <Input\n                                                            type=\"select\"\n                                                            name=\"productCategoryId\"\n                                                            id=\"productCategoryId\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.productCategoryId}\n                                                            invalid={touched.productCategoryId && !!errors.productCategoryId}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            value={this.state.product.productCategory.productCategoryId}\n                                                        >\n                                                            {/* <option value=\"0\">Please select</option> */}\n                                                            {/* <option value=\"1\">Product Category One</option>\n                                                            <option value=\"2\">Product Category Two</option>\n                                                            <option value=\"3\">Product Category Three</option> */}\n                                                            {productCategories}\n                                                        </Input>\n                                                        <FormFeedback>{errors.productCategoryId}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                        <Label htmlFor=\"unitId\">Forcasting Unit</Label>\n                                                        <Input\n                                                            type=\"select\"\n                                                            name=\"unitId\"\n                                                            id=\"unitId\"\n                                                            bsSize=\"sm\"\n                                                            valid={!errors.unitId}\n                                                            invalid={touched.unitId && !!errors.unitId}\n                                                            onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            onBlur={handleBlur}\n                                                            required\n                                                            value={this.state.product.forecastingUnit.unitId}\n                                                        >\n                                                            {/* <option value=\"0\">Please select</option> */}\n                                                            {units}\n                                                        </Input>\n                                                        <FormFeedback>{errors.unitId}</FormFeedback>\n                                                    </FormGroup>\n                                                    <FormGroup>\n                                                    <Label>{i18n.t('static.common.status')}&nbsp;&nbsp;</Label>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active1\"\n                                                                name=\"active\"\n                                                                value={true}\n                                                                checked={this.state.product.active === true}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-active1\">\n                                                                {i18n.t('static.common.active')}\n                                                                </Label>\n                                                        </FormGroup>\n                                                        <FormGroup check inline>\n                                                            <Input\n                                                                className=\"form-check-input\"\n                                                                type=\"radio\"\n                                                                id=\"active2\"\n                                                                name=\"active\"\n                                                                value={false}\n                                                                checked={this.state.product.active === false}\n                                                                onChange={(e) => { handleChange(e); this.dataChange(e) }}\n                                                            />\n                                                            <Label\n                                                                className=\"form-check-label\"\n                                                                check htmlFor=\"inline-active2\">\n                                                                {i18n.t('static.common.disabled')}\n                                                                </Label>\n                                                        </FormGroup>\n                                                    </FormGroup>\n                                                </CardBody>\n                                                <CardFooter>\n                                                    <FormGroup>\n\n                                                        {/* <Button type=\"reset\" size=\"sm\" color=\"warning\" className=\"float-right mr-1\"><i className=\"fa fa-refresh\"></i> Reset</Button> */}\n                                                        <Button type=\"button\" size=\"sm\" color=\"danger\" className=\"float-right mr-1\" onClick={this.cancelClicked}><i className=\"fa fa-times\"></i> {i18n.t('static.common.cancel')}</Button>\n                                                        <Button type=\"submit\" size=\"sm\" color=\"success\" className=\"float-right mr-1\" onClick={() => this.touchAll(setTouched, errors)}><i className=\"fa fa-check\"></i>Update</Button>\n                                                        &nbsp;\n                                                </FormGroup>\n                                                </CardFooter>\n                                            </Form>\n                                        )} />\n                        </Card>\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n    cancelClicked() {\n        this.props.history.push(`/product/listProduct/` + \"Action Canceled\")\n    }\n\n}"]},"metadata":{},"sourceType":"module"}