{"ast":null,"code":"\"use strict\";\n\nvar utils = require('../utils');\n\nvar GenericWorker = require('../stream/GenericWorker');\n/**\n * A worker that use a nodejs stream as source.\n * @constructor\n * @param {String} filename the name of the file entry for this stream.\n * @param {Readable} stream the nodejs stream.\n */\n\n\nfunction NodejsStreamInputAdapter(filename, stream) {\n  GenericWorker.call(this, \"Nodejs stream input adapter for \" + filename);\n  this._upstreamEnded = false;\n\n  this._bindStream(stream);\n}\n\nutils.inherits(NodejsStreamInputAdapter, GenericWorker);\n/**\n * Prepare the stream and bind the callbacks on it.\n * Do this ASAP on node 0.10 ! A lazy binding doesn't always work.\n * @param {Stream} stream the nodejs stream to use.\n */\n\nNodejsStreamInputAdapter.prototype._bindStream = function (stream) {\n  var self = this;\n  this._stream = stream;\n  stream.pause();\n  stream.on(\"data\", function (chunk) {\n    self.push({\n      data: chunk,\n      meta: {\n        percent: 0\n      }\n    });\n  }).on(\"error\", function (e) {\n    if (self.isPaused) {\n      this.generatedError = e;\n    } else {\n      self.error(e);\n    }\n  }).on(\"end\", function () {\n    if (self.isPaused) {\n      self._upstreamEnded = true;\n    } else {\n      self.end();\n    }\n  });\n};\n\nNodejsStreamInputAdapter.prototype.pause = function () {\n  if (!GenericWorker.prototype.pause.call(this)) {\n    return false;\n  }\n\n  this._stream.pause();\n\n  return true;\n};\n\nNodejsStreamInputAdapter.prototype.resume = function () {\n  if (!GenericWorker.prototype.resume.call(this)) {\n    return false;\n  }\n\n  if (this._upstreamEnded) {\n    this.end();\n  } else {\n    this._stream.resume();\n  }\n\n  return true;\n};\n\nmodule.exports = NodejsStreamInputAdapter;","map":{"version":3,"sources":["/home/altius/NodeJs/fasp-core-ui/node_modules/jszip/lib/nodejs/NodejsStreamInputAdapter.js"],"names":["utils","require","GenericWorker","NodejsStreamInputAdapter","filename","stream","call","_upstreamEnded","_bindStream","inherits","prototype","self","_stream","pause","on","chunk","push","data","meta","percent","e","isPaused","generatedError","error","end","resume","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,IAAIC,aAAa,GAAGD,OAAO,CAAC,yBAAD,CAA3B;AAEA;;;;;;;;AAMA,SAASE,wBAAT,CAAkCC,QAAlC,EAA4CC,MAA5C,EAAoD;AAChDH,EAAAA,aAAa,CAACI,IAAd,CAAmB,IAAnB,EAAyB,qCAAqCF,QAA9D;AACA,OAAKG,cAAL,GAAsB,KAAtB;;AACA,OAAKC,WAAL,CAAiBH,MAAjB;AACH;;AAEDL,KAAK,CAACS,QAAN,CAAeN,wBAAf,EAAyCD,aAAzC;AAEA;;;;;;AAKAC,wBAAwB,CAACO,SAAzB,CAAmCF,WAAnC,GAAiD,UAAUH,MAAV,EAAkB;AAC/D,MAAIM,IAAI,GAAG,IAAX;AACA,OAAKC,OAAL,GAAeP,MAAf;AACAA,EAAAA,MAAM,CAACQ,KAAP;AACAR,EAAAA,MAAM,CACLS,EADD,CACI,MADJ,EACY,UAAUC,KAAV,EAAiB;AACzBJ,IAAAA,IAAI,CAACK,IAAL,CAAU;AACNC,MAAAA,IAAI,EAAEF,KADA;AAENG,MAAAA,IAAI,EAAG;AACHC,QAAAA,OAAO,EAAG;AADP;AAFD,KAAV;AAMH,GARD,EASCL,EATD,CASI,OATJ,EASa,UAAUM,CAAV,EAAa;AACtB,QAAGT,IAAI,CAACU,QAAR,EAAkB;AACd,WAAKC,cAAL,GAAsBF,CAAtB;AACH,KAFD,MAEO;AACHT,MAAAA,IAAI,CAACY,KAAL,CAAWH,CAAX;AACH;AACJ,GAfD,EAgBCN,EAhBD,CAgBI,KAhBJ,EAgBW,YAAY;AACnB,QAAGH,IAAI,CAACU,QAAR,EAAkB;AACdV,MAAAA,IAAI,CAACJ,cAAL,GAAsB,IAAtB;AACH,KAFD,MAEO;AACHI,MAAAA,IAAI,CAACa,GAAL;AACH;AACJ,GAtBD;AAuBH,CA3BD;;AA4BArB,wBAAwB,CAACO,SAAzB,CAAmCG,KAAnC,GAA2C,YAAY;AACnD,MAAG,CAACX,aAAa,CAACQ,SAAd,CAAwBG,KAAxB,CAA8BP,IAA9B,CAAmC,IAAnC,CAAJ,EAA8C;AAC1C,WAAO,KAAP;AACH;;AACD,OAAKM,OAAL,CAAaC,KAAb;;AACA,SAAO,IAAP;AACH,CAND;;AAOAV,wBAAwB,CAACO,SAAzB,CAAmCe,MAAnC,GAA4C,YAAY;AACpD,MAAG,CAACvB,aAAa,CAACQ,SAAd,CAAwBe,MAAxB,CAA+BnB,IAA/B,CAAoC,IAApC,CAAJ,EAA+C;AAC3C,WAAO,KAAP;AACH;;AAED,MAAG,KAAKC,cAAR,EAAwB;AACpB,SAAKiB,GAAL;AACH,GAFD,MAEO;AACH,SAAKZ,OAAL,CAAaa,MAAb;AACH;;AAED,SAAO,IAAP;AACH,CAZD;;AAcAC,MAAM,CAACC,OAAP,GAAiBxB,wBAAjB","sourcesContent":["\"use strict\";\n\nvar utils = require('../utils');\nvar GenericWorker = require('../stream/GenericWorker');\n\n/**\n * A worker that use a nodejs stream as source.\n * @constructor\n * @param {String} filename the name of the file entry for this stream.\n * @param {Readable} stream the nodejs stream.\n */\nfunction NodejsStreamInputAdapter(filename, stream) {\n    GenericWorker.call(this, \"Nodejs stream input adapter for \" + filename);\n    this._upstreamEnded = false;\n    this._bindStream(stream);\n}\n\nutils.inherits(NodejsStreamInputAdapter, GenericWorker);\n\n/**\n * Prepare the stream and bind the callbacks on it.\n * Do this ASAP on node 0.10 ! A lazy binding doesn't always work.\n * @param {Stream} stream the nodejs stream to use.\n */\nNodejsStreamInputAdapter.prototype._bindStream = function (stream) {\n    var self = this;\n    this._stream = stream;\n    stream.pause();\n    stream\n    .on(\"data\", function (chunk) {\n        self.push({\n            data: chunk,\n            meta : {\n                percent : 0\n            }\n        });\n    })\n    .on(\"error\", function (e) {\n        if(self.isPaused) {\n            this.generatedError = e;\n        } else {\n            self.error(e);\n        }\n    })\n    .on(\"end\", function () {\n        if(self.isPaused) {\n            self._upstreamEnded = true;\n        } else {\n            self.end();\n        }\n    });\n};\nNodejsStreamInputAdapter.prototype.pause = function () {\n    if(!GenericWorker.prototype.pause.call(this)) {\n        return false;\n    }\n    this._stream.pause();\n    return true;\n};\nNodejsStreamInputAdapter.prototype.resume = function () {\n    if(!GenericWorker.prototype.resume.call(this)) {\n        return false;\n    }\n\n    if(this._upstreamEnded) {\n        this.end();\n    } else {\n        this._stream.resume();\n    }\n\n    return true;\n};\n\nmodule.exports = NodejsStreamInputAdapter;\n"]},"metadata":{},"sourceType":"script"}