{"ast":null,"code":"'use strict';\n\nvar utils = require('./utils');\n/**\n * The following functions come from pako, from pako/lib/zlib/crc32.js\n * released under the MIT license, see pako https://github.com/nodeca/pako/\n */\n// Use ordinary array, since untyped makes no boost here\n\n\nfunction makeTable() {\n  var c,\n      table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n\n    for (var k = 0; k < 8; k++) {\n      c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;\n    }\n\n    table[n] = c;\n  }\n\n  return table;\n} // Create table on load. Just 255 signed longs. Not a problem.\n\n\nvar crcTable = makeTable();\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n  crc = crc ^ -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return crc ^ -1; // >>> 0;\n} // That's all for the pako functions.\n\n/**\n * Compute the crc32 of a string.\n * This is almost the same as the function crc32, but for strings. Using the\n * same function for the two use cases leads to horrible performances.\n * @param {Number} crc the starting value of the crc.\n * @param {String} str the string to use.\n * @param {Number} len the length of the string.\n * @param {Number} pos the starting position for the crc32 computation.\n * @return {Number} the computed crc32.\n */\n\n\nfunction crc32str(crc, str, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n  crc = crc ^ -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = crc >>> 8 ^ t[(crc ^ str.charCodeAt(i)) & 0xFF];\n  }\n\n  return crc ^ -1; // >>> 0;\n}\n\nmodule.exports = function crc32wrapper(input, crc) {\n  if (typeof input === \"undefined\" || !input.length) {\n    return 0;\n  }\n\n  var isArray = utils.getTypeOf(input) !== \"string\";\n\n  if (isArray) {\n    return crc32(crc | 0, input, input.length, 0);\n  } else {\n    return crc32str(crc | 0, input, input.length, 0);\n  }\n};","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/jszip/lib/crc32.js"],"names":["utils","require","makeTable","c","table","n","k","crcTable","crc32","crc","buf","len","pos","t","end","i","crc32str","str","charCodeAt","module","exports","crc32wrapper","input","length","isArray","getTypeOf"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAAnB;AAEA;;;;AAKA;;;AACA,SAASC,SAAT,GAAqB;AACjB,MAAIC,CAAJ;AAAA,MAAOC,KAAK,GAAG,EAAf;;AAEA,OAAI,IAAIC,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAG,GAAlB,EAAuBA,CAAC,EAAxB,EAA2B;AACvBF,IAAAA,CAAC,GAAGE,CAAJ;;AACA,SAAI,IAAIC,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAG,CAAlB,EAAqBA,CAAC,EAAtB,EAAyB;AACrBH,MAAAA,CAAC,GAAKA,CAAC,GAAC,CAAH,GAAS,aAAcA,CAAC,KAAK,CAA7B,GAAoCA,CAAC,KAAK,CAA/C;AACH;;AACDC,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWF,CAAX;AACH;;AAED,SAAOC,KAAP;AACH,C,CAED;;;AACA,IAAIG,QAAQ,GAAGL,SAAS,EAAxB;;AAGA,SAASM,KAAT,CAAeC,GAAf,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,GAA9B,EAAmC;AAC/B,MAAIC,CAAC,GAAGN,QAAR;AAAA,MAAkBO,GAAG,GAAGF,GAAG,GAAGD,GAA9B;AAEAF,EAAAA,GAAG,GAAGA,GAAG,GAAI,CAAC,CAAd;;AAEA,OAAK,IAAIM,CAAC,GAAGH,GAAb,EAAkBG,CAAC,GAAGD,GAAtB,EAA2BC,CAAC,EAA5B,EAAiC;AAC7BN,IAAAA,GAAG,GAAIA,GAAG,KAAK,CAAT,GAAcI,CAAC,CAAC,CAACJ,GAAG,GAAGC,GAAG,CAACK,CAAD,CAAV,IAAiB,IAAlB,CAArB;AACH;;AAED,SAAQN,GAAG,GAAI,CAAC,CAAhB,CAT+B,CASV;AACxB,C,CAED;;AAEA;;;;;;;;;;;;AAUA,SAASO,QAAT,CAAkBP,GAAlB,EAAuBQ,GAAvB,EAA4BN,GAA5B,EAAiCC,GAAjC,EAAsC;AAClC,MAAIC,CAAC,GAAGN,QAAR;AAAA,MAAkBO,GAAG,GAAGF,GAAG,GAAGD,GAA9B;AAEAF,EAAAA,GAAG,GAAGA,GAAG,GAAI,CAAC,CAAd;;AAEA,OAAK,IAAIM,CAAC,GAAGH,GAAb,EAAkBG,CAAC,GAAGD,GAAtB,EAA2BC,CAAC,EAA5B,EAAiC;AAC7BN,IAAAA,GAAG,GAAIA,GAAG,KAAK,CAAT,GAAcI,CAAC,CAAC,CAACJ,GAAG,GAAGQ,GAAG,CAACC,UAAJ,CAAeH,CAAf,CAAP,IAA4B,IAA7B,CAArB;AACH;;AAED,SAAQN,GAAG,GAAI,CAAC,CAAhB,CATkC,CASb;AACxB;;AAEDU,MAAM,CAACC,OAAP,GAAiB,SAASC,YAAT,CAAsBC,KAAtB,EAA6Bb,GAA7B,EAAkC;AAC/C,MAAI,OAAOa,KAAP,KAAiB,WAAjB,IAAgC,CAACA,KAAK,CAACC,MAA3C,EAAmD;AAC/C,WAAO,CAAP;AACH;;AAED,MAAIC,OAAO,GAAGxB,KAAK,CAACyB,SAAN,CAAgBH,KAAhB,MAA2B,QAAzC;;AAEA,MAAGE,OAAH,EAAY;AACR,WAAOhB,KAAK,CAACC,GAAG,GAAC,CAAL,EAAQa,KAAR,EAAeA,KAAK,CAACC,MAArB,EAA6B,CAA7B,CAAZ;AACH,GAFD,MAEO;AACH,WAAOP,QAAQ,CAACP,GAAG,GAAC,CAAL,EAAQa,KAAR,EAAeA,KAAK,CAACC,MAArB,EAA6B,CAA7B,CAAf;AACH;AACJ,CAZD","sourcesContent":["'use strict';\n\nvar utils = require('./utils');\n\n/**\n * The following functions come from pako, from pako/lib/zlib/crc32.js\n * released under the MIT license, see pako https://github.com/nodeca/pako/\n */\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n    var c, table = [];\n\n    for(var n =0; n < 256; n++){\n        c = n;\n        for(var k =0; k < 8; k++){\n            c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        table[n] = c;\n    }\n\n    return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n    var t = crcTable, end = pos + len;\n\n    crc = crc ^ (-1);\n\n    for (var i = pos; i < end; i++ ) {\n        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n    }\n\n    return (crc ^ (-1)); // >>> 0;\n}\n\n// That's all for the pako functions.\n\n/**\n * Compute the crc32 of a string.\n * This is almost the same as the function crc32, but for strings. Using the\n * same function for the two use cases leads to horrible performances.\n * @param {Number} crc the starting value of the crc.\n * @param {String} str the string to use.\n * @param {Number} len the length of the string.\n * @param {Number} pos the starting position for the crc32 computation.\n * @return {Number} the computed crc32.\n */\nfunction crc32str(crc, str, len, pos) {\n    var t = crcTable, end = pos + len;\n\n    crc = crc ^ (-1);\n\n    for (var i = pos; i < end; i++ ) {\n        crc = (crc >>> 8) ^ t[(crc ^ str.charCodeAt(i)) & 0xFF];\n    }\n\n    return (crc ^ (-1)); // >>> 0;\n}\n\nmodule.exports = function crc32wrapper(input, crc) {\n    if (typeof input === \"undefined\" || !input.length) {\n        return 0;\n    }\n\n    var isArray = utils.getTypeOf(input) !== \"string\";\n\n    if(isArray) {\n        return crc32(crc|0, input, input.length, 0);\n    } else {\n        return crc32str(crc|0, input, input.length, 0);\n    }\n};\n"]},"metadata":{},"sourceType":"script"}