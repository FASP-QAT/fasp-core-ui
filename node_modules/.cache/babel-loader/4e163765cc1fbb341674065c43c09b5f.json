{"ast":null,"code":"import _classCallCheck from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/views/SyncMasterData/SyncMasterData.js\";\nimport React, { Component } from 'react';\nimport { Card, CardBody, CardHeader, CardFooter, Button, Col, Progress } from 'reactstrap';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport 'react-select/dist/react-select.min.css';\nimport * as JsStoreFunction from \"../../CommonComponent/JsStoreFunctions.js\";\nimport * as JsStoreFunctionCore from \"../../CommonComponent/JsStoreFunctionsCore\";\nimport moment from 'moment';\nimport MasterSyncService from '../../api/MasterSyncService.js';\n\nvar SyncMasterData = /*#__PURE__*/function (_Component) {\n  _inherits(SyncMasterData, _Component);\n\n  function SyncMasterData() {\n    var _this;\n\n    _classCallCheck(this, SyncMasterData);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SyncMasterData).call(this));\n    _this.state = {\n      totalMasters: 19,\n      syncedMasters: 0,\n      syncedPercentage: 0\n    };\n    _this.syncMasters = _this.syncMasters.bind(_assertThisInitialized(_this));\n    _this.retryClicked = _this.retryClicked.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SyncMasterData, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.getElementById(\"retryButtonDiv\").style.display = \"none\";\n      this.syncMasters();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, null, React.createElement(Col, {\n        xs: \"12\",\n        sm: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"Master Data Sync\")), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, this.state.syncedPercentage, \"% (Synced \", this.state.syncedMasters, \" of \", this.state.totalMasters, \" masters)\"), React.createElement(Progress, {\n        value: this.state.syncedMasters,\n        max: this.state.totalMasters,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })), React.createElement(CardFooter, {\n        id: \"retryButtonDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"button\",\n        onClick: function onClick() {\n          return _this2.retryClicked();\n        },\n        size: \"sm\",\n        color: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa fa-dot-circle-o\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }), \"Retry\")))));\n    }\n  }, {\n    key: \"syncMasters\",\n    value: function syncMasters() {\n      var _this3 = this;\n\n      if (navigator.onLine) {\n        var realmId = 1;\n        var updatedSyncDate = moment(Date.now()).utcOffset('-0500').format('YYYY-MM-DD HH:mm');\n        var lastSyncDateVar = \"\";\n        var lastSyncDateRealmVar = \"\";\n        JsStoreFunction.getLastSyncDateForApplicationMaster().then(function (response) {\n          if (response.length > 0) {\n            lastSyncDateVar = response[0];\n          } else {\n            lastSyncDateVar = null;\n          }\n\n          JsStoreFunction.getLastSyncDateForRealm(realmId).then(function (response) {\n            if (response.length > 0) {\n              lastSyncDateRealmVar = response[0];\n            } else {\n              lastSyncDateRealmVar = null;\n            }\n\n            if (navigator.onLine) {\n              MasterSyncService.getCurrencyListForSync(lastSyncDateVar).then(function (response) {\n                JsStoreFunction.syncCurrency(response.data).then(function (response) {\n                  _this3.setState({\n                    syncedMasters: _this3.state.syncedMasters + 1,\n                    syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                  });\n\n                  if (navigator.onLine) {\n                    //Code to Sync DataSource list\n                    MasterSyncService.getDataSourceListForSync(lastSyncDateVar).then(function (response) {\n                      JsStoreFunction.syncDataSource(response.data).then(function (response) {\n                        _this3.setState({\n                          syncedMasters: _this3.state.syncedMasters + 1,\n                          syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                        });\n\n                        if (navigator.onLine) {\n                          //Code to Sync DataSourceType list\n                          MasterSyncService.getDataSourceTypeListForSync(lastSyncDateVar).then(function (response) {\n                            JsStoreFunction.syncDataSourceType(response.data).then(function (response) {\n                              _this3.setState({\n                                syncedMasters: _this3.state.syncedMasters + 1,\n                                syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                              });\n\n                              if (navigator.onLine) {\n                                //Code to Sync Funding source list\n                                MasterSyncService.getFundingSourceListForSync(lastSyncDateRealmVar, realmId).then(function (response) {\n                                  JsStoreFunction.syncFundingSource(response.data).then(function (response) {\n                                    _this3.setState({\n                                      syncedMasters: _this3.state.syncedMasters + 1,\n                                      syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                                    });\n\n                                    if (navigator.onLine) {\n                                      //Code to Sync Health area list\n                                      MasterSyncService.getHealthAreaListForSync(lastSyncDateRealmVar, realmId).then(function (response) {\n                                        JsStoreFunction.syncHealthArea(response.data).then(function (response) {\n                                          _this3.setState({\n                                            syncedMasters: _this3.state.syncedMasters + 1,\n                                            syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                                          });\n\n                                          if (navigator.onLine) {\n                                            //Code to Sync Lu list\n                                            MasterSyncService.getLogisticsUnitListForSync(lastSyncDateRealmVar, realmId).then(function (response) {\n                                              JsStoreFunction.syncLogisticsUnit(response.data).then(function (response) {\n                                                _this3.setState({\n                                                  syncedMasters: _this3.state.syncedMasters + 1,\n                                                  syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                                                });\n\n                                                if (navigator.onLine) {\n                                                  //Code to Sync Manufacturer list\n                                                  MasterSyncService.getManufacturerListForSync(lastSyncDateRealmVar, realmId).then(function (response) {\n                                                    JsStoreFunction.syncManufacturer(response.data).then(function (response) {\n                                                      _this3.setState({\n                                                        syncedMasters: _this3.state.syncedMasters + 1,\n                                                        syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                                                      });\n\n                                                      if (navigator.onLine) {\n                                                        //Code to Sync Organisation list\n                                                        MasterSyncService.getOrganisationListForSync(lastSyncDateRealmVar, realmId).then(function (response) {\n                                                          JsStoreFunction.syncOrganisation(response.data).then(function (response) {\n                                                            _this3.setState({\n                                                              syncedMasters: _this3.state.syncedMasters + 1,\n                                                              syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                                                            });\n\n                                                            if (navigator.onLine) {\n                                                              //Code to Sync Pu list\n                                                              MasterSyncService.getPlanningUnitListForSync(lastSyncDateRealmVar, realmId).then(function (response) {\n                                                                JsStoreFunction.syncPlanningUnit(response.data).then(function (response) {\n                                                                  _this3.setState({\n                                                                    syncedMasters: _this3.state.syncedMasters + 1,\n                                                                    syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                                                                  });\n\n                                                                  if (navigator.onLine) {\n                                                                    //Code to Sync Product list\n                                                                    MasterSyncService.getProductListForSync(lastSyncDateRealmVar, realmId).then(function (response) {\n                                                                      JsStoreFunction.syncDataSource(response.data).then(function (response) {\n                                                                        _this3.setState({\n                                                                          syncedMasters: _this3.state.syncedMasters + 1,\n                                                                          syncedPercentage: Math.floor((_this3.state.syncedMasters + 1) / _this3.state.totalMasters * 100)\n                                                                        });\n                                                                      });\n                                                                    }).catch(function (error) {\n                                                                      document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                                                      _this3.setState({\n                                                                        errorMessage: \"Sync failed(\".concat(error, \")\")\n                                                                      });\n                                                                    });\n                                                                  } else {\n                                                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                                                    _this3.setState({\n                                                                      errorMessage: \"Sync failed(Connection lost)\"\n                                                                    });\n                                                                  }\n                                                                });\n                                                              }).catch(function (error) {\n                                                                document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                                                _this3.setState({\n                                                                  errorMessage: \"Sync failed(\".concat(error, \")\")\n                                                                });\n                                                              });\n                                                            } else {\n                                                              document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                                              _this3.setState({\n                                                                errorMessage: \"Sync failed(Connection lost)\"\n                                                              });\n                                                            }\n                                                          });\n                                                        }).catch(function (error) {\n                                                          document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                                          _this3.setState({\n                                                            errorMessage: \"Sync failed(\".concat(error, \")\")\n                                                          });\n                                                        });\n                                                      } else {\n                                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                                        _this3.setState({\n                                                          errorMessage: \"Sync failed(Connection lost)\"\n                                                        });\n                                                      }\n                                                    });\n                                                  }).catch(function (error) {\n                                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                                    _this3.setState({\n                                                      errorMessage: \"Sync failed(\".concat(error, \")\")\n                                                    });\n                                                  });\n                                                } else {\n                                                  document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                                  _this3.setState({\n                                                    errorMessage: \"Sync failed(Connection lost)\"\n                                                  });\n                                                }\n                                              });\n                                            }).catch(function (error) {\n                                              document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                              _this3.setState({\n                                                errorMessage: \"Sync failed(\".concat(error, \")\")\n                                              });\n                                            });\n                                          } else {\n                                            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                            _this3.setState({\n                                              errorMessage: \"Sync failed(Connection lost)\"\n                                            });\n                                          }\n                                        });\n                                      }).catch(function (error) {\n                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                        _this3.setState({\n                                          errorMessage: \"Sync failed(\".concat(error, \")\")\n                                        });\n                                      });\n                                    } else {\n                                      document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                      _this3.setState({\n                                        errorMessage: \"Sync failed(Connection lost)\"\n                                      });\n                                    }\n                                  });\n                                }).catch(function (error) {\n                                  document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                  _this3.setState({\n                                    errorMessage: \"Sync failed(\".concat(error, \")\")\n                                  });\n                                });\n                              } else {\n                                document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                                _this3.setState({\n                                  errorMessage: \"Sync failed(Connection lost)\"\n                                });\n                              }\n                            });\n                          }).catch(function (error) {\n                            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                            _this3.setState({\n                              errorMessage: \"Sync failed(\".concat(error, \")\")\n                            });\n                          });\n                        } else {\n                          document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                          _this3.setState({\n                            errorMessage: \"Sync failed(Connection lost)\"\n                          });\n                        }\n                      });\n                    }).catch(function (error) {\n                      document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                      _this3.setState({\n                        errorMessage: \"Sync failed(\".concat(error, \")\")\n                      });\n                    });\n                  } else {\n                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                    _this3.setState({\n                      errorMessage: \"Sync failed(Connection lost)\"\n                    });\n                  }\n                });\n              }).catch(function (error) {\n                document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n                _this3.setState({\n                  errorMessage: \"Sync failed(\".concat(error, \")\")\n                });\n              });\n            } else {\n              document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n              _this3.setState({\n                errorMessage: \"Sync failed(Connection lost)\"\n              });\n            }\n          }).catch(function (error) {\n            lastSyncDateRealmVar = null;\n            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n            _this3.setState({\n              errorMessage: \"Sync failed(\".concat(error.message, \")\")\n            });\n          });\n        }).catch(function (error) {\n          lastSyncDateVar = null;\n          document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n\n          _this3.setState({\n            errorMessage: \"Sync failed(\".concat(error.message, \")\")\n          });\n        });\n      } else {\n        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n        this.setState({\n          errorMessage: \"Sync failed\"\n        });\n      }\n    }\n  }, {\n    key: \"retryClicked\",\n    value: function retryClicked() {\n      this.setState({\n        totalMasters: 19,\n        syncedMasters: 0,\n        syncedPercentage: 0,\n        errorMessage: \"\",\n        successMessage: \"\"\n      });\n      this.syncMasters();\n    }\n  }]);\n\n  return SyncMasterData;\n}(Component);\n\nexport { SyncMasterData as default };","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/views/SyncMasterData/SyncMasterData.js"],"names":["React","Component","Card","CardBody","CardHeader","CardFooter","Button","Col","Progress","JsStoreFunction","JsStoreFunctionCore","moment","MasterSyncService","SyncMasterData","state","totalMasters","syncedMasters","syncedPercentage","syncMasters","bind","retryClicked","document","getElementById","style","display","navigator","onLine","realmId","updatedSyncDate","Date","now","utcOffset","format","lastSyncDateVar","lastSyncDateRealmVar","getLastSyncDateForApplicationMaster","then","response","length","getLastSyncDateForRealm","getCurrencyListForSync","syncCurrency","data","setState","Math","floor","getDataSourceListForSync","syncDataSource","getDataSourceTypeListForSync","syncDataSourceType","getFundingSourceListForSync","syncFundingSource","getHealthAreaListForSync","syncHealthArea","getLogisticsUnitListForSync","syncLogisticsUnit","getManufacturerListForSync","syncManufacturer","getOrganisationListForSync","syncOrganisation","getPlanningUnitListForSync","syncPlanningUnit","getProductListForSync","catch","error","errorMessage","message","successMessage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Card, CardBody, CardHeader,\n    CardFooter, Button, Col, Progress\n} from 'reactstrap';\nimport '../Forms/ValidationForms/ValidationForms.css';\nimport 'react-select/dist/react-select.min.css';\nimport * as JsStoreFunction from \"../../CommonComponent/JsStoreFunctions.js\"\nimport * as JsStoreFunctionCore from \"../../CommonComponent/JsStoreFunctionsCore\"\nimport moment from 'moment';\nimport MasterSyncService from '../../api/MasterSyncService.js';\n\nexport default class SyncMasterData extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            totalMasters: 19,\n            syncedMasters: 0,\n            syncedPercentage: 0\n        }\n        this.syncMasters = this.syncMasters.bind(this);\n        this.retryClicked = this.retryClicked.bind(this);\n    }\n\n    componentDidMount() {\n        document.getElementById(\"retryButtonDiv\").style.display = \"none\";\n        this.syncMasters();\n    }\n\n    render() {\n        return (\n            <>\n                <Col xs=\"12\" sm=\"12\">\n                    <Card>\n                        <CardHeader>\n                            <strong>Master Data Sync</strong>\n                        </CardHeader>\n                        <CardBody>\n                            <div className=\"text-center\">{this.state.syncedPercentage}% (Synced {this.state.syncedMasters} of {this.state.totalMasters} masters)</div>\n                            <Progress value={this.state.syncedMasters} max={this.state.totalMasters} />\n                        </CardBody>\n\n                        <CardFooter id=\"retryButtonDiv\">\n                            <Button type=\"button\" onClick={() => this.retryClicked()} size=\"sm\" color=\"danger\"><i className=\"fa fa-dot-circle-o\"></i>Retry</Button>\n                        </CardFooter>\n                    </Card>\n                </Col>\n            </>\n        )\n\n    }\n\n\n    syncMasters() {\n        if (navigator.onLine) {\n            const realmId = 1;\n            var updatedSyncDate = ((moment(Date.now()).utcOffset('-0500').format('YYYY-MM-DD HH:mm')));\n            var lastSyncDateVar = \"\";\n            var lastSyncDateRealmVar = \"\";\n            JsStoreFunction.getLastSyncDateForApplicationMaster().then(response => {\n                if (response.length > 0) {\n                    lastSyncDateVar = response[0];\n                } else {\n                    lastSyncDateVar = null;\n                }\n                JsStoreFunction.getLastSyncDateForRealm(realmId).then(response => {\n                    if (response.length > 0) {\n                        lastSyncDateRealmVar = response[0];\n                    } else {\n                        lastSyncDateRealmVar = null;\n                    }\n                    if (navigator.onLine) {\n                        MasterSyncService.getCurrencyListForSync(lastSyncDateVar)\n                            .then(response => {\n                                JsStoreFunction.syncCurrency(response.data).then(response => {\n                                    this.setState({\n                                        syncedMasters: this.state.syncedMasters + 1,\n                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                    })\n                                    if (navigator.onLine) {\n                                        //Code to Sync DataSource list\n                                        MasterSyncService.getDataSourceListForSync(lastSyncDateVar)\n                                            .then(response => {\n                                                JsStoreFunction.syncDataSource(response.data).then(response => {\n                                                    this.setState({\n                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                    })\n                                                    if (navigator.onLine) {\n                                                        //Code to Sync DataSourceType list\n                                                        MasterSyncService.getDataSourceTypeListForSync(lastSyncDateVar)\n                                                            .then(response => {\n                                                                JsStoreFunction.syncDataSourceType(response.data).then(response => {\n                                                                    this.setState({\n                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                    })\n                                                                    if (navigator.onLine) {\n                                                                        //Code to Sync Funding source list\n                                                                        MasterSyncService.getFundingSourceListForSync(lastSyncDateRealmVar, realmId)\n                                                                            .then(response => {\n                                                                                JsStoreFunction.syncFundingSource(response.data).then(response => {\n                                                                                    this.setState({\n                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                    })\n                                                                                    if (navigator.onLine) {\n                                                                                        //Code to Sync Health area list\n                                                                                        MasterSyncService.getHealthAreaListForSync(lastSyncDateRealmVar, realmId)\n                                                                                            .then(response => {\n                                                                                                JsStoreFunction.syncHealthArea(response.data).then(response => {\n                                                                                                    this.setState({\n                                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                    })\n                                                                                                    if (navigator.onLine) {\n                                                                                                        //Code to Sync Lu list\n                                                                                                        MasterSyncService.getLogisticsUnitListForSync(lastSyncDateRealmVar, realmId)\n                                                                                                            .then(response => {\n                                                                                                                JsStoreFunction.syncLogisticsUnit(response.data).then(response => {\n                                                                                                                    this.setState({\n                                                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                    })\n                                                                                                                    if (navigator.onLine) {\n                                                                                                                        //Code to Sync Manufacturer list\n                                                                                                                        MasterSyncService.getManufacturerListForSync(lastSyncDateRealmVar, realmId)\n                                                                                                                            .then(response => {\n                                                                                                                                JsStoreFunction.syncManufacturer(response.data).then(response => {\n                                                                                                                                    this.setState({\n                                                                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                                    })\n                                                                                                                                    if (navigator.onLine) {\n                                                                                                                                        //Code to Sync Organisation list\n                                                                                                                                        MasterSyncService.getOrganisationListForSync(lastSyncDateRealmVar, realmId)\n                                                                                                                                            .then(response => {\n                                                                                                                                                JsStoreFunction.syncOrganisation(response.data).then(response => {\n                                                                                                                                                    this.setState({\n                                                                                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                                                    })\n                                                                                                                                                    if (navigator.onLine) {\n                                                                                                                                                        //Code to Sync Pu list\n                                                                                                                                                        MasterSyncService.getPlanningUnitListForSync(lastSyncDateRealmVar, realmId)\n                                                                                                                                                            .then(response => {\n                                                                                                                                                                JsStoreFunction.syncPlanningUnit(response.data).then(response => {\n                                                                                                                                                                    this.setState({\n                                                                                                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                                                                    })\n                                                                                                                                                                    if (navigator.onLine) {\n                                                                                                                                                                        //Code to Sync Product list\n                                                                                                                                                                        MasterSyncService.getProductListForSync(lastSyncDateRealmVar, realmId)\n                                                                                                                                                                            .then(response => {\n                                                                                                                                                                                JsStoreFunction.syncDataSource(response.data).then(response => {\n                                                                                                                                                                                    this.setState({\n                                                                                                                                                                                        syncedMasters: this.state.syncedMasters + 1,\n                                                                                                                                                                                        syncedPercentage: Math.floor(((this.state.syncedMasters + 1) / this.state.totalMasters) * 100)\n                                                                                                                                                                                    })\n\n                                                                                                                                                                                });\n                                                                                                                                                                            }).catch(\n                                                                                                                                                                                error => {\n                                                                                                                                                                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                                                                                                                    this.setState({\n                                                                                                                                                                                        errorMessage: `Sync failed(${error})`\n                                                                                                                                                                                    })\n                                                                                                                                                                                });\n                                                                                                                                                                    } else {\n                                                                                                                                                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                                                                                                        this.setState({\n                                                                                                                                                                            errorMessage: \"Sync failed(Connection lost)\"\n                                                                                                                                                                        })\n                                                                                                                                                                    }\n\n                                                                                                                                                                });\n                                                                                                                                                            }).catch(\n                                                                                                                                                                error => {\n                                                                                                                                                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                                                                                                    this.setState({\n                                                                                                                                                                        errorMessage: `Sync failed(${error})`\n                                                                                                                                                                    })\n                                                                                                                                                                });\n                                                                                                                                                    } else {\n                                                                                                                                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                                                                                        this.setState({\n                                                                                                                                                            errorMessage: \"Sync failed(Connection lost)\"\n                                                                                                                                                        })\n                                                                                                                                                    }\n\n                                                                                                                                                });\n                                                                                                                                            }).catch(\n                                                                                                                                                error => {\n                                                                                                                                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                                                                                    this.setState({\n                                                                                                                                                        errorMessage: `Sync failed(${error})`\n                                                                                                                                                    })\n                                                                                                                                                });\n                                                                                                                                    } else {\n                                                                                                                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                                                                        this.setState({\n                                                                                                                                            errorMessage: \"Sync failed(Connection lost)\"\n                                                                                                                                        })\n                                                                                                                                    }\n\n                                                                                                                                });\n                                                                                                                            }).catch(\n                                                                                                                                error => {\n                                                                                                                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                                                                    this.setState({\n                                                                                                                                        errorMessage: `Sync failed(${error})`\n                                                                                                                                    })\n                                                                                                                                });\n                                                                                                                    } else {\n                                                                                                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                                                        this.setState({\n                                                                                                                            errorMessage: \"Sync failed(Connection lost)\"\n                                                                                                                        })\n                                                                                                                    }\n                                                                                                                });\n                                                                                                            }).catch(\n                                                                                                                error => {\n                                                                                                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                                                    this.setState({\n                                                                                                                        errorMessage: `Sync failed(${error})`\n                                                                                                                    })\n                                                                                                                });\n                                                                                                    } else {\n                                                                                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                                        this.setState({\n                                                                                                            errorMessage: \"Sync failed(Connection lost)\"\n                                                                                                        })\n                                                                                                    }\n                                                                                                });\n                                                                                            }).catch(\n                                                                                                error => {\n                                                                                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                                    this.setState({\n                                                                                                        errorMessage: `Sync failed(${error})`\n                                                                                                    })\n                                                                                                });\n                                                                                    } else {\n                                                                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                        this.setState({\n                                                                                            errorMessage: \"Sync failed(Connection lost)\"\n                                                                                        })\n                                                                                    }\n                                                                                });\n                                                                            }).catch(\n                                                                                error => {\n                                                                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                                    this.setState({\n                                                                                        errorMessage: `Sync failed(${error})`\n                                                                                    })\n                                                                                });\n                                                                    } else {\n                                                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                        this.setState({\n                                                                            errorMessage: \"Sync failed(Connection lost)\"\n                                                                        })\n                                                                    }\n                                                                });\n                                                            }).catch(\n                                                                error => {\n                                                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                                    this.setState({\n                                                                        errorMessage: `Sync failed(${error})`\n                                                                    })\n                                                                });\n                                                    } else {\n                                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                        this.setState({\n                                                            errorMessage: \"Sync failed(Connection lost)\"\n                                                        })\n                                                    }\n                                                });\n                                            }).catch(\n                                                error => {\n                                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                                    this.setState({\n                                                        errorMessage: `Sync failed(${error})`\n                                                    })\n                                                });\n                                    } else {\n                                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                        this.setState({\n                                            errorMessage: \"Sync failed(Connection lost)\"\n                                        })\n                                    }\n\n                                });\n                            }).catch(\n                                error => {\n                                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                                    this.setState({\n                                        errorMessage: `Sync failed(${error})`\n                                    })\n                                });\n                    } else {\n                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                        this.setState({\n                            errorMessage: \"Sync failed(Connection lost)\"\n                        })\n                    }\n                }).catch(\n                    error => {\n                        lastSyncDateRealmVar = null;\n                        document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                        this.setState({\n                            errorMessage: `Sync failed(${error.message})`\n                        })\n                    })\n            }).catch(\n                error => {\n                    lastSyncDateVar = null;\n                    document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n                    this.setState({\n                        errorMessage: `Sync failed(${error.message})`\n                    })\n                });\n        } else {\n            document.getElementById(\"retryButtonDiv\").style.display = \"block\";\n            this.setState({\n                errorMessage: \"Sync failed\"\n            })\n        }\n    }\n\n\n    retryClicked() {\n        this.setState({\n            totalMasters: 19,\n            syncedMasters: 0,\n            syncedPercentage: 0,\n            errorMessage: \"\",\n            successMessage: \"\"\n        })\n        this.syncMasters();\n    }\n}"]},"metadata":{},"sourceType":"module"}