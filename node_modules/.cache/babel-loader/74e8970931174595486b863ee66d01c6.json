{"ast":null,"code":"var _this = this;\n\nimport * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport * as SqlWeb from \"sqlweb\";\nimport { Query } from \"sqlweb\";\nimport CryptoJS from 'crypto-js';\nimport { SECRET_KEY } from '../Constants.js'; // This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\n\nJsStore.useSqlWeb(SqlWeb);\nexport var idbCon = new JsStore.Instance();\nexport var dbname = 'fasp';\n\nvar getDatabase = function getDatabase() {\n  var tblStudent = {\n    name: 'programData',\n    columns: {\n      id: {\n        primaryKey: true\n      },\n      programId: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      },\n      version: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      },\n      programName: {\n        notNull: true,\n        dataType: DATA_TYPE.String\n      },\n      programData: {\n        dataType: DATA_TYPE.String,\n        notNull: true\n      },\n      userId: {\n        notNull: true,\n        dataType: DATA_TYPE.Number\n      }\n    }\n  };\n  var dataBase = {\n    name: dbname,\n    tables: [tblStudent]\n  };\n  return dataBase;\n};\n\nexport var getDbQuery = function getDbQuery() {\n  var db = \"DEFINE DB fasp;\";\n  var tblStudentQry = \"DEFINE TABLE programData(\\n        id PRIMARYKEY,\\n        programId NUMBER NOTNULL ,\\n        version NOTNULL NUMBER,\\n        programName NOTNULL STRING,\\n        programData STRING NOTNULL,\\n        userId NUMBER NOTNULL\\n    );\";\n  var lastSyncDate = \"DEFINE TABLE lastSyncDate(\\n        id PRIMARYKEY,\\n        lastSyncDate date_time\\n    );\";\n  var currency = \"DEFINE TABLE currency (\\n    currencyId PRIMARYKEY,\\n    conversionRateToUsd number,\\n    currencyCode STRING,\\n    currencySymbol STRING,\\n    label object\\n     );\";\n  var dataSource = \"DEFINE TABLE dataSource (\\n        dataSourceId PRIMARYKEY,\\n        active boolean,\\n        dataSourceType object,\\n        label object\\n         );\";\n  var dbCreatequery = db + tblStudentQry + lastSyncDate + currency + dataSource;\n  return dbCreatequery;\n};\nexport var initJsStore = function initJsStore() {\n  var qry = getDbQuery();\n  console.log(\"this\", _this);\n  idbCon.runSql(qry).then(function () {\n    console.log('db initiated');\n  }).catch(function (ex) {\n    console.error(ex);\n  });\n};\nexport function saveProgram(programJson) {\n  console.log(\"in save program\");\n\n  for (var i = 0; i < programJson.length; i++) {\n    console.log(\"in for loop\");\n    var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(programJson[i]), SECRET_KEY);\n    var programName = CryptoJS.AES.encrypt(JSON.stringify(programJson[i].label), SECRET_KEY);\n    var qry = new Query(\"insert into programData \\n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\\n    \");\n    qry.map(\"@id\", programJson[i].programId + \"_v\" + programJson[i].programVersion + \"_uId_\" + 1);\n    qry.map(\"@programId\", programJson[i].programId);\n    qry.map(\"@version\", programJson[i].programVersion);\n    qry.map(\"@programName\", programName.toString());\n    qry.map(\"@programData\", encryptedText.toString());\n    qry.map(\"@userId\", 1);\n    idbCon.runSql(qry);\n  }\n\n  return 1;\n}\nexport function getProgramDataByprogramIds(programIds) {\n  var qry = new Query(\"select * from programData where id In (\".concat(programIds, \")\"));\n  return idbCon.runSql(qry);\n}\nexport function getProgramDataList() {\n  var userId = 1;\n  var qry = new Query(\"select * from programData where userId=\".concat(userId));\n  return idbCon.runSql(qry);\n}\nexport function importProgram(programJson) {\n  console.log(\"ProgramJson\", programJson);\n  console.log(\"in import program\");\n  var qry = new Query(\"insert into programData \\n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\\n    \");\n  qry.map(\"@id\", programJson.programId + \"_v\" + programJson.version + \"_uId_\" + 1);\n  qry.map(\"@programId\", programJson.programId);\n  qry.map(\"@version\", programJson.version);\n  qry.map(\"@programName\", programJson.programName);\n  qry.map(\"@programData\", programJson.programData);\n  qry.map(\"@userId\", 1);\n  console.log(\"Qry\", qry);\n  idbCon.runSql(qry);\n  return 1;\n}\nexport function getLastSyncDateForApplicationMaster() {\n  var qry = new Query(\"select * from lastSyncDate where id=0\");\n  return idbCon.runSql(qry);\n}\nexport function syncCurrency(json) {\n  console.log(\"in sync currency\");\n\n  for (var i = 0; i < json.length; i++) {\n    console.log(\"in for\", json[i]);\n    var qry = new Query(\"insert into currency \\n    values ({currencyId:'@currencyId',conversionRateToUsd:'@conversionRateToUsd',\\n    currencyCode:'@currencyCode',\\n    currencySymbol:'@currencySymbol',\\n    label:'@label'}) return\\n    \");\n    qry.map(\"@currencyId\", json[i].currencyId);\n    qry.map(\"@conversionRateToUsd\", json[i].conversionRateToUsd);\n    qry.map(\"@currencyCode\", json[i].currencyCode);\n    qry.map(\"@currencySymbol\", json[i].currencySymbol);\n    qry.map(\"@label\", json[i].label);\n    idbCon.runSql(qry);\n  }\n\n  return 1;\n}\nexport function syncDataSource(json) {\n  console.log(\"in data source\");\n\n  for (var i = 0; i < json.length; i++) {\n    var qry = new Query(\"insert into dataSource \\n    values ({dataSourceId:'@dataSourceId',active:'@active',\\n    dataSourceType:'@dataSourceType',\\n    label:'@label'}) return\\n    \");\n    qry.map(\"@dataSourceId\", json[i].dataSourceId);\n    qry.map(\"@active\", json[i].active);\n    qry.map(\"@dataSourceType\", json[i].dataSourceType);\n    qry.map(\"@label\", json[i].label);\n    idbCon.runSql(qry);\n  }\n\n  return 1;\n}","map":{"version":3,"sources":["/home/altius/NodeJs/gitHubRepos/fasp-core-ui/src/CommonComponent/JsStoreFunctions.js"],"names":["JsStore","IDataBase","DATA_TYPE","ITable","SqlWeb","Query","CryptoJS","SECRET_KEY","useSqlWeb","idbCon","Instance","dbname","getDatabase","tblStudent","name","columns","id","primaryKey","programId","notNull","dataType","Number","version","programName","String","programData","userId","dataBase","tables","getDbQuery","db","tblStudentQry","lastSyncDate","currency","dataSource","dbCreatequery","initJsStore","qry","console","log","runSql","then","catch","ex","error","saveProgram","programJson","i","length","encryptedText","AES","encrypt","JSON","stringify","label","map","programVersion","toString","getProgramDataByprogramIds","programIds","getProgramDataList","importProgram","getLastSyncDateForApplicationMaster","syncCurrency","json","currencyId","conversionRateToUsd","currencyCode","currencySymbol","syncDataSource","dataSourceId","active","dataSourceType"],"mappings":"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","sourcesContent":["import * as JsStore from 'jsstore';\nimport { IDataBase, DATA_TYPE, ITable } from 'jsstore';\nimport * as SqlWeb from \"sqlweb\";\nimport {\n    Query\n} from \"sqlweb\";\nimport CryptoJS from 'crypto-js'\nimport { SECRET_KEY } from '../Constants.js'\n// This will ensure that we are using only one instance. \n// Otherwise due to multiple instance multiple worker will be created.\nJsStore.useSqlWeb(SqlWeb);\nexport const idbCon = new JsStore.Instance();\nexport const dbname = 'fasp';\n\nconst getDatabase = () => {\n    const tblStudent = {\n        name: 'programData',\n        columns: {\n            id: {\n                primaryKey: true\n            },\n            programId: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            },\n            version: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            },\n            programName: {\n                notNull: true,\n                dataType: DATA_TYPE.String\n            },\n            programData: {\n                dataType: DATA_TYPE.String,\n                notNull: true\n            },\n            userId: {\n                notNull: true,\n                dataType: DATA_TYPE.Number\n            }\n        }\n    };\n    const dataBase = {\n        name: dbname,\n        tables: [tblStudent]\n    };\n    return dataBase;\n};\n\nexport const getDbQuery = () => {\n    const db = `DEFINE DB fasp;`;\n    const tblStudentQry = `DEFINE TABLE programData(\n        id PRIMARYKEY,\n        programId NUMBER NOTNULL ,\n        version NOTNULL NUMBER,\n        programName NOTNULL STRING,\n        programData STRING NOTNULL,\n        userId NUMBER NOTNULL\n    );`\n    const lastSyncDate = `DEFINE TABLE lastSyncDate(\n        id PRIMARYKEY,\n        lastSyncDate date_time\n    );`\n    const currency = `DEFINE TABLE currency (\n    currencyId PRIMARYKEY,\n    conversionRateToUsd number,\n    currencyCode STRING,\n    currencySymbol STRING,\n    label object\n     );`\n    const dataSource = `DEFINE TABLE dataSource (\n        dataSourceId PRIMARYKEY,\n        active boolean,\n        dataSourceType object,\n        label object\n         );`\n    const dbCreatequery = db + tblStudentQry + lastSyncDate + currency + dataSource;\n    return dbCreatequery;\n}\n\nexport const initJsStore = () => {\n    const qry = getDbQuery();\n    console.log(\"this\", this);\n    idbCon.runSql(qry).then(function () {\n        console.log('db initiated');\n    }).catch(function (ex) {\n        console.error(ex);\n    })\n};\n\nexport function saveProgram(programJson) {\n    console.log(\"in save program\");\n    for (var i = 0; i < programJson.length; i++) {\n        console.log(\"in for loop\")\n        var encryptedText = CryptoJS.AES.encrypt(JSON.stringify(programJson[i]), SECRET_KEY);\n        var programName = CryptoJS.AES.encrypt(JSON.stringify(programJson[i].label), SECRET_KEY);\n        const qry = new Query(`insert into programData \n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n    `);\n        qry.map(\"@id\", programJson[i].programId + \"_v\" + programJson[i].programVersion + \"_uId_\" + 1);\n        qry.map(\"@programId\", programJson[i].programId);\n        qry.map(\"@version\", programJson[i].programVersion);\n        qry.map(\"@programName\", programName.toString());\n        qry.map(\"@programData\", encryptedText.toString());\n        qry.map(\"@userId\", 1);\n        idbCon.runSql(qry);\n    }\n    return 1;\n}\n\nexport function getProgramDataByprogramIds(programIds) {\n    const qry = new Query(`select * from programData where id In (${programIds})`);\n    return idbCon.runSql(qry);\n}\n\nexport function getProgramDataList() {\n    var userId = 1;\n    const qry = new Query(`select * from programData where userId=${userId}`);\n    return idbCon.runSql(qry);\n}\n\nexport function importProgram(programJson) {\n    console.log(\"ProgramJson\", programJson)\n    console.log(\"in import program\");\n    const qry = new Query(`insert into programData \n    values ({id:'@id',programId:'@programId',version:'@version',programName:'@programName',programData:'@programData',userId:'@userId'}) return\n    `);\n    qry.map(\"@id\", programJson.programId + \"_v\" + programJson.version + \"_uId_\" + 1);\n    qry.map(\"@programId\", programJson.programId);\n    qry.map(\"@version\", programJson.version);\n    qry.map(\"@programName\", programJson.programName);\n    qry.map(\"@programData\", programJson.programData);\n    qry.map(\"@userId\", 1);\n    console.log(\"Qry\", qry);\n    idbCon.runSql(qry);\n    return 1;\n}\n\nexport function getLastSyncDateForApplicationMaster() {\n    const qry = new Query(`select * from lastSyncDate where id=0`);\n    return idbCon.runSql(qry);\n}\n\nexport function syncCurrency(json) {\n    console.log(\"in sync currency\")\n    for (var i = 0; i < json.length; i++) {\n        console.log(\"in for\", json[i])\n        const qry = new Query(`insert into currency \n    values ({currencyId:'@currencyId',conversionRateToUsd:'@conversionRateToUsd',\n    currencyCode:'@currencyCode',\n    currencySymbol:'@currencySymbol',\n    label:'@label'}) return\n    `);\n        qry.map(\"@currencyId\", json[i].currencyId);\n        qry.map(\"@conversionRateToUsd\", json[i].conversionRateToUsd);\n        qry.map(\"@currencyCode\", json[i].currencyCode);\n        qry.map(\"@currencySymbol\", json[i].currencySymbol);\n        qry.map(\"@label\", json[i].label);\n        idbCon.runSql(qry);\n    }\n    return 1;\n}\n\nexport function syncDataSource(json) {\n    console.log(\"in data source\")\n    for (var i = 0; i < json.length; i++) {\n        const qry = new Query(`insert into dataSource \n    values ({dataSourceId:'@dataSourceId',active:'@active',\n    dataSourceType:'@dataSourceType',\n    label:'@label'}) return\n    `);\n        qry.map(\"@dataSourceId\", json[i].dataSourceId);\n        qry.map(\"@active\", json[i].active);\n        qry.map(\"@dataSourceType\", json[i].dataSourceType);\n        qry.map(\"@label\", json[i].label);\n        idbCon.runSql(qry);\n    }\n    return 1;\n}"]},"metadata":{},"sourceType":"module"}