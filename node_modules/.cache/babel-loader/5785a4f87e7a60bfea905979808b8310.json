{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar anObject = require('../internals/an-object');\n\nvar aFunction = require('../internals/a-function');\n\nvar iterate = require('../internals/iterate'); // `Set.prototype.isDisjointFrom` method\n// https://tc39.github.io/proposal-set-methods/#Set.prototype.isDisjointFrom\n\n\n$({\n  target: 'Set',\n  proto: true,\n  real: true,\n  forced: IS_PURE\n}, {\n  isDisjointFrom: function isDisjointFrom(iterable) {\n    var set = anObject(this);\n    var hasCheck = aFunction(set.has);\n    return !iterate(iterable, function (value) {\n      if (hasCheck.call(set, value) === true) return iterate.stop();\n    }).stopped;\n  }\n});","map":{"version":3,"sources":["/home/altius/Documents/QAT/fasp-core-ui/node_modules/core-js/modules/esnext.set.is-disjoint-from.js"],"names":["$","require","IS_PURE","anObject","aFunction","iterate","target","proto","real","forced","isDisjointFrom","iterable","set","hasCheck","has","value","call","stop","stopped"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIG,SAAS,GAAGH,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAII,OAAO,GAAGJ,OAAO,CAAC,sBAAD,CAArB,C,CAEA;AACA;;;AACAD,CAAC,CAAC;AAAEM,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,KAAK,EAAE,IAAxB;AAA8BC,EAAAA,IAAI,EAAE,IAApC;AAA0CC,EAAAA,MAAM,EAAEP;AAAlD,CAAD,EAA8D;AAC7DQ,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBC,QAAxB,EAAkC;AAChD,QAAIC,GAAG,GAAGT,QAAQ,CAAC,IAAD,CAAlB;AACA,QAAIU,QAAQ,GAAGT,SAAS,CAACQ,GAAG,CAACE,GAAL,CAAxB;AACA,WAAO,CAACT,OAAO,CAACM,QAAD,EAAW,UAAUI,KAAV,EAAiB;AACzC,UAAIF,QAAQ,CAACG,IAAT,CAAcJ,GAAd,EAAmBG,KAAnB,MAA8B,IAAlC,EAAwC,OAAOV,OAAO,CAACY,IAAR,EAAP;AACzC,KAFc,CAAP,CAELC,OAFH;AAGD;AAP4D,CAA9D,CAAD","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar anObject = require('../internals/an-object');\nvar aFunction = require('../internals/a-function');\nvar iterate = require('../internals/iterate');\n\n// `Set.prototype.isDisjointFrom` method\n// https://tc39.github.io/proposal-set-methods/#Set.prototype.isDisjointFrom\n$({ target: 'Set', proto: true, real: true, forced: IS_PURE }, {\n  isDisjointFrom: function isDisjointFrom(iterable) {\n    var set = anObject(this);\n    var hasCheck = aFunction(set.has);\n    return !iterate(iterable, function (value) {\n      if (hasCheck.call(set, value) === true) return iterate.stop();\n    }).stopped;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}