{"version":3,"file":"react-shallow-equal.esm.js","sources":["../src/helpers.js","../src/equal.js"],"sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nexport function type(value) {\n    if (value === null) return 'null';\n    if (Array.isArray(value)) return 'array';\n    return typeof value;\n}\n","import stylesEqual from 'style-equal';\nimport {type} from './helpers';\n\nexport function elementsEqual(a, b) {\n    const typeOfA = type(a);\n\n    if (typeOfA !== type(b)) return false;\n\n    switch (typeOfA) {\n        case 'array':\n            if (a.length !== b.length) return false;\n            for (let i = 0; i < a.length; i++) {\n                if (!elementsEqual(a[i], b[i])) return false;\n            }\n            return true;\n        case 'object':\n            if (a.type !== b.type) return false;\n            if (a.key !== b.key) return false;\n            if (a.ref !== b.ref) return false;\n            return propsEqual(a.props, b.props); // eslint-disable-line no-use-before-define\n        default:\n            return a === b;\n    }\n}\n\nexport function propsEqual(a, b, options = {}) {\n    const aKeys = Object.keys(a);\n    let aCount = 0;\n    let bCount = 0;\n\n    for (let i = 0, l = aKeys.length; i < l; i++) {\n        const key = aKeys[i];\n        if (!options.ignore || options.ignore.indexOf(key) === -1) {\n            // Compare `style` and `children` props later\n            if (key !== 'style' && key !== 'children' && a[key] !== b[key]) return false;\n            aCount += 1;\n        }\n    }\n\n    const bKeys = Object.keys(b);\n\n    for (let i = 0, l = bKeys.length; i < l; i++) {\n        const key = bKeys[i];\n        if (!options.ignore || options.ignore.indexOf(key) === -1) {\n            bCount += 1;\n        }\n    }\n\n    if (aCount !== bCount) return false;\n\n    // NOTE: Kind of risky, but I'm assuming that a `style` prop is a React Native style,\n    // and using the `styleEqual` algorithm here.\n    if (!stylesEqual(a.style, b.style)) return false;\n\n    // Compare children last\n    return elementsEqual(a.children, b.children);\n}\n"],"names":["type","value","Array","isArray","elementsEqual","a","b","typeOfA","length","i","key","ref","propsEqual","props","options","aKeys","Object","keys","aCount","bCount","l","ignore","indexOf","bKeys","stylesEqual","style","children"],"mappings":";;;;;;;;AAAA;;AAEA,AAAO,SAASA,IAAT,CAAcC,KAAd,EAAqB;QACpBA,UAAU,IAAd,EAAoB,OAAO,MAAP;QAChBC,MAAMC,OAAN,CAAcF,KAAd,CAAJ,EAA0B,OAAO,OAAP;kBACZA,KAAd,yCAAcA,KAAd;;;ACFG,SAASG,aAAT,CAAuBC,CAAvB,EAA0BC,CAA1B,EAA6B;QAC1BC,UAAUP,KAAKK,CAAL,CAAhB;;QAEIE,YAAYP,KAAKM,CAAL,CAAhB,EAAyB,OAAO,KAAP;;YAEjBC,OAAR;aACS,OAAL;gBACQF,EAAEG,MAAF,KAAaF,EAAEE,MAAnB,EAA2B,OAAO,KAAP;iBACtB,IAAIC,IAAI,CAAb,EAAgBA,IAAIJ,EAAEG,MAAtB,EAA8BC,GAA9B,EAAmC;oBAC3B,CAACL,cAAcC,EAAEI,CAAF,CAAd,EAAoBH,EAAEG,CAAF,CAApB,CAAL,EAAgC,OAAO,KAAP;;mBAE7B,IAAP;aACC,QAAL;gBACQJ,EAAEL,IAAF,KAAWM,EAAEN,IAAjB,EAAuB,OAAO,KAAP;gBACnBK,EAAEK,GAAF,KAAUJ,EAAEI,GAAhB,EAAqB,OAAO,KAAP;gBACjBL,EAAEM,GAAF,KAAUL,EAAEK,GAAhB,EAAqB,OAAO,KAAP;mBACdC,WAAWP,EAAEQ,KAAb,EAAoBP,EAAEO,KAAtB,CAAP,CAXR;;mBAaeR,MAAMC,CAAb;;;;AAIZ,AAAO,SAASM,UAAT,CAAoBP,CAApB,EAAuBC,CAAvB,EAAwC;QAAdQ,OAAc,uEAAJ,EAAI;;QACrCC,QAAQC,OAAOC,IAAP,CAAYZ,CAAZ,CAAd;QACIa,SAAS,CAAb;QACIC,SAAS,CAAb;;SAEK,IAAIV,IAAI,CAAR,EAAWW,IAAIL,MAAMP,MAA1B,EAAkCC,IAAIW,CAAtC,EAAyCX,GAAzC,EAA8C;YACpCC,MAAMK,MAAMN,CAAN,CAAZ;YACI,CAACK,QAAQO,MAAT,IAAmBP,QAAQO,MAAR,CAAeC,OAAf,CAAuBZ,GAAvB,MAAgC,CAAC,CAAxD,EAA2D;;gBAEnDA,QAAQ,OAAR,IAAmBA,QAAQ,UAA3B,IAAyCL,EAAEK,GAAF,MAAWJ,EAAEI,GAAF,CAAxD,EAAgE,OAAO,KAAP;sBACtD,CAAV;;;;QAIFa,QAAQP,OAAOC,IAAP,CAAYX,CAAZ,CAAd;;SAEK,IAAIG,KAAI,CAAR,EAAWW,KAAIG,MAAMf,MAA1B,EAAkCC,KAAIW,EAAtC,EAAyCX,IAAzC,EAA8C;YACpCC,OAAMa,MAAMd,EAAN,CAAZ;YACI,CAACK,QAAQO,MAAT,IAAmBP,QAAQO,MAAR,CAAeC,OAAf,CAAuBZ,IAAvB,MAAgC,CAAC,CAAxD,EAA2D;sBAC7C,CAAV;;;;QAIJQ,WAAWC,MAAf,EAAuB,OAAO,KAAP;;;;QAInB,CAACK,YAAYnB,EAAEoB,KAAd,EAAqBnB,EAAEmB,KAAvB,CAAL,EAAoC,OAAO,KAAP;;;WAG7BrB,cAAcC,EAAEqB,QAAhB,EAA0BpB,EAAEoB,QAA5B,CAAP;;;;;"}