'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var stylesEqual = _interopDefault(require('style-equal'));

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

/* eslint-disable import/prefer-default-export */

function type(value) {
    if (value === null) return 'null';
    if (Array.isArray(value)) return 'array';
    return typeof value === 'undefined' ? 'undefined' : _typeof(value);
}

function elementsEqual(a, b) {
    var typeOfA = type(a);

    if (typeOfA !== type(b)) return false;

    switch (typeOfA) {
        case 'array':
            if (a.length !== b.length) return false;
            for (var i = 0; i < a.length; i++) {
                if (!elementsEqual(a[i], b[i])) return false;
            }
            return true;
        case 'object':
            if (a.type !== b.type) return false;
            if (a.key !== b.key) return false;
            if (a.ref !== b.ref) return false;
            return propsEqual(a.props, b.props); // eslint-disable-line no-use-before-define
        default:
            return a === b;
    }
}

function propsEqual(a, b) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var aKeys = Object.keys(a);
    var aCount = 0;
    var bCount = 0;

    for (var i = 0, l = aKeys.length; i < l; i++) {
        var key = aKeys[i];
        if (!options.ignore || options.ignore.indexOf(key) === -1) {
            // Compare `style` and `children` props later
            if (key !== 'style' && key !== 'children' && a[key] !== b[key]) return false;
            aCount += 1;
        }
    }

    var bKeys = Object.keys(b);

    for (var _i = 0, _l = bKeys.length; _i < _l; _i++) {
        var _key = bKeys[_i];
        if (!options.ignore || options.ignore.indexOf(_key) === -1) {
            bCount += 1;
        }
    }

    if (aCount !== bCount) return false;

    // NOTE: Kind of risky, but I'm assuming that a `style` prop is a React Native style,
    // and using the `styleEqual` algorithm here.
    if (!stylesEqual(a.style, b.style)) return false;

    // Compare children last
    return elementsEqual(a.children, b.children);
}

exports.stylesEqual = stylesEqual;
exports.propsEqual = propsEqual;
exports.elementsEqual = elementsEqual;
//# sourceMappingURL=react-shallow-equal.cjs.js.map
